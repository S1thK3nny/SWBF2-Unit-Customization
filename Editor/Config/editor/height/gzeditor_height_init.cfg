//
// CREATE HEIGHT EDITOR VARIABLES
//
ConfigureVarSys()
{
    CreateInteger("editor.height.shape.value", 0);
    SetIntegerRange("editor.height.shape.value", 0, 4);
}

//
// CREATE THE HEIGHT EDITOR CONTROL
//


CreateControl("EditHeight", "STATIC")
{
    Pos(0, 80);
    Size(115, 366);
    ColorGroup("INPUTBOX");
    CreateControl("HeightModeTitle", "STATIC")
    {
        ColorGroup("BACKGROUND");
        Pos(0, 0);
        Size(115, 12);
        Font("SMALL");
        JustifyText("VCENTER");
        Text("TERRAIN BRUSH");
        Style("TRANSPARENT");
    }
    // Start Height Mode Controls
    // Start Height Brush Mode Control
    CreateControl("BrushModeTitle", "STATIC")
    {
        Style("TRANSPARENT");
        ColorGroup("INPUTBOX");
        Pos(2, 12);
        Size(110, 47);
        CreateControl("ModeTitle", "STATIC")
        {
            ColorGroup("BACKGROUND");
            Pos(2, 0);
            Size(115, 12);
            Font("SMALL");
            JustifyText("LEFT");
            Text("Mode:");
            Style("TRANSPARENT");
        }
        CreateControl("ModePaint", "BUTTON")
        {
            Pos(3, 12);
            Size(50, 15);
            Font("SMALL");
            Text("Paint");
            Cursor("Highlight");
            Style("ROLLOVER", "RADIO");
            UseVar("editor.height.mode");
            Value(0);
            TipText("Paint the terrain to match the specified height", "This functions like a paintbrush", "it IS NOT a gradual application of height");
        }
        CreateControl("ModeSpray", "BUTTON")
        {
            Pos(55, 12);
            Size(50, 15);
            Font("SMALL");
            Text("Spray");
            Cursor("Highlight");
            Style("ROLLOVER", "RADIO");
            UseVar("editor.height.mode");
            Value(1);
            TipText("Spray the terrain to match the specified height", "This functions like an Airbrush", "it IS a gradual application of height");
        }
        CreateControl("ModeRaise", "BUTTON")
        {
            Pos(3, 28);
            Size(50, 15);
            Font("SMALL");
            Text("Raise");
            Cursor("Highlight");
            Style("ROLLOVER", "RADIO");
            UseVar("editor.height.mode");
            Value(2);
            TipText("Smoothly raise terrain to specified Height");
        }
        CreateControl("ModeBlend", "BUTTON")
        {
            Pos(55, 28);
            Size(50, 15);
            Font("SMALL");
            Text("Blend");
            Cursor("Highlight");
            Style("ROLLOVER", "RADIO");
            UseVar("editor.height.mode");
            Value(3);
            TipText("Blend nearby heights on the terrain");
        }
    }
    // End Height Brush Mode Control

    // Start Height Brush Size Control
    CreateControl("SizeTitle", "STATIC")
    {
        Style("TRANSPARENT");
        ColorGroup("INPUTBOX");
        Pos(2, 62);
        Size(110, 70);
        CreateControl("BrushSizeTitle", "STATIC")
        {
            ColorGroup("BACKGROUND");
            Pos(2, 0);
            Size(50, 12);
            Font("SMALL");
            JustifyText("LEFT");
            Text("Size:");
            Style("TRANSPARENT");
            TipText("Change the Size of the",  "Height application cursor");
        }
        CreateControl("WidthTitle", "STATIC")
        {
            ColorGroup("BACKGROUND");
            Pos(8, 12);
            Size(36, 12);
            Font("SMALL");
            JustifyText("LEFT");
            Text("Width:");
            Style("TRANSPARENT");
        }
        CreateControl("Width", "EDIT")
        {
            ColorGroup("INPUTBOX2");
            Pos(14, 26);
            Size(36, 18);
            Font("SMALL");
            JustifyText("LEFT");
            Style("ROLLOVER");
            Cursor("Highlight");
            UseVar("editor.height.size.width");
        }
        CreateControl("Width", "SLIDER")
        {
            ColorGroup("INPUTBOX2");
            Pos(5, 46);
            Size(45, 15);
            Cursor("Highlight");
            Font("SMALL");
            Style("ROLLOVER");
            UseVar("editor.height.size.width");
            SliderPageSize(20.0);
        }
        CreateControl("DepthTitle", "STATIC")
        {
            ColorGroup("BACKGROUND");
            Pos(60, 12);
            Size(50, 12);
            Font("SMALL");
            JustifyText("LEFT");
            Text("Depth:");
            Style("TRANSPARENT");
        }
        CreateControl("Depth", "EDIT")
        {
            ColorGroup("INPUTBOX2");
            Pos(66, 25);
            Size(36, 18);
            Font("SMALL");
            Style("ROLLOVER");
            Cursor("Highlight");
            UseVar("editor.height.size.depth");
        }
        CreateControl("Depth", "SLIDER")
        {
            ColorGroup("INPUTBOX2");
            Pos(57, 46);
            Size(45, 15);
            Cursor("Highlight");
            Font("SMALL");
            UseVar("editor.height.size.depth");
            Style("ROLLOVER");
            SliderPageSize(20.0);
        }
    }
    // End Height Brush Size Control

    // Start Height Brush Shape Control
    CreateControl("BrushShapeTitle", "STATIC")
    {
        Style("TRANSPARENT");
        ColorGroup("INPUTBOX");
        Pos(2, 135);
        Size(110, 66);
        CreateControl("ShapeTitle", "STATIC")
        {
            ColorGroup("BACKGROUND");
            Pos(2, 0);
            Size(80, 12);
            Font("SMALL");
            JustifyText("LEFT");
            Text("Shape:");
            Style("TRANSPARENT");
        }
        CreateControl("ShapeSquare", "BUTTON")
        {
            Pos(4, 12);
            Size(50, 15);
            Font("SMALL");
            Text("Square");
            Cursor("Highlight");
            Style("ROLLOVER", "RADIO");
            UseVar("editor.height.shape.value");
            Value(0);
            NotifyParent("Button::Select", "Square");
            TipText("Use the Square shape for painting Height");
        }
        CreateControl("ShapeCircle", "BUTTON")
        {
            Pos(56, 12);
            Size(50, 15);
            Font("SMALL");
            Text("Circle");
            Cursor("Highlight");
            Style("ROLLOVER", "RADIO");
            UseVar("editor.height.shape.value");
            Value(1);
            NotifyParent("Button::Select", "Circle");
            TipText("Use the Circle shape for painting Height");
        }
        CreateControl("ShapeCone", "BUTTON")
        {
            Pos(4, 28);
            Size(50, 15);
            Font("SMALL");
            Text("Cone");
            Cursor("Highlight");
            Style("ROLLOVER", "RADIO");
            UseVar("editor.height.shape.value");
            Value(2);
            NotifyParent("Button::Select", "Cone");
            TipText("Use the Cone shape for painting Height");
        }
        CreateControl("ShapeBell", "BUTTON")
        {
            Pos(56, 28);
            Size(50, 15);
            Font("SMALL");
            Text("Bell");
            Cursor("Highlight");
            Style("ROLLOVER", "RADIO");
            UseVar("editor.height.shape.value");
            Value(3);
            NotifyParent("Button::Select", "Bell");
            TipText("Use the Bell shape for painting Height");
        }
        CreateControl("ShapeRamp", "BUTTON")
        {
            Pos(4, 44);
            Size(50, 15);
            Font("SMALL");
            Text("Ramp");
            Cursor("Highlight");
            Style("ROLLOVER", "RADIO");
            UseVar("editor.height.shape.value");
            Value(4);
            NotifyParent("Button::Select", "Ramp");
            TipText("Use the Ramp shape for painting Height", "LMB: GREEN is Foreground - - RED is Background", "RMB: RED is Foreground - - GREEN is Background");
        }
         //   CreateControl("ShapeCustom", "BUTTON")
         //   {
         //       Pos(58, 210);
         //       Size(50, 15);
         //       Font("SMALL");
         //       Text("Custom");
         //       Cursor("Highlight");
         //       Style("ROLLOVER", "RADIO");
         //       UseVar("editor.height.shape.value");
         //       Value(5);
         //       NotifyParent("Button::Select", "Custom");
         //   }
         //   CreateControl("LoadCustom", "BUTTON")
         //   {
         //       Pos(5, 225);
         //       Size(104, 15);
         //       Font("SMALL");
         //       Text("Load Custom");
         //       Cursor("Highlight");
         //       Style("ROLLOVER");
         //       NotifyParent("Button::Press", "LoadCustom");
         //   }
        OnEvent("Custom")
        {
            Cmd("editor.height.shape.custom");
        }
        OnEvent("LoadCustom")
        {
            Cmd("editor.height.shape.loadcustom");
        }
        OnEvent("Square")
        {
            Cmd("editor.height.shape.square");
        }
        OnEvent("Circle")
        {
            Cmd("editor.height.shape.circle");
        }
        OnEvent("Cone")
        {
            Cmd("editor.height.shape.cone");
        }
        OnEvent("Bell")
        {
            Cmd("editor.height.shape.bell");
        }
        OnEvent("Ramp")
        {
            Cmd("editor.height.shape.ramp");
        }
    }
    // End Height Brush Shape Control

    // Start Height Brush Rotation and Pressure Control
    CreateControl("OrientationTitle", "STATIC")
    {
        Style("TRANSPARENT");
        ColorGroup("INPUTBOX");
        Pos(2, 204);
        Size(110, 48);
        CreateControl("RotationTitle", "STATIC")
        {
            ColorGroup("BACKGROUND");
            Pos(3, 4);
            Size(50, 12);
            Font("SMALL");
            JustifyText("LEFT");
            Text("Rotation:");
            Style("TRANSPARENT");
            TipText("Rotate the orientation of the Height application cursor");
        }
        CreateControl("Rotation", "EDIT")
        {
            ColorGroup("INPUTBOX2");
            Pos(73, 2);
            Size(36, 18);
            Font("SMALL");
            Style("ROLLOVER");
            Cursor("Highlight");
            UseVar("editor.height.rotation");
        }
        //  CreateControl("Rotation", "SLIDER")
        //  {
        //      ColorGroup("INPUTBOX");
        //      Pos(5, 133);
        //      Size(104, 16);
        //      Cursor("Highlight");
        //      Font("SMALL");
        //      UseVar("editor.height.rotation");
        //      Style("ROLLOVER");
        //      SliderPageSize(120.0);
        //  }
        CreateControl("PressureTitle", "STATIC")
        {
            ColorGroup("BACKGROUND");
            Pos(3, 28:);
            Size(80, 12);
            Font("SMALL");
            JustifyText("LEFT");
            Text("Pressure:");
            Style("Transparent");
            TipText("Enter a value to adjust the pressure of the Spray Tool");
        }
        CreateControl("Pressure", "EDIT")
        {
            ColorGroup("INPUTBOX2");
            Pos(73, 26);
            Size(36, 18);
            Font("SMALL");
            Style("ROLLOVER");
            Cursor("Highlight");
            UseVar("editor.height.pressure");
        }
    }
    // End Height Brush Rotation and Pressure Control

    // Start Height Brush Terrain Height Control
    CreateControl("TerrainHeightTitle", "STATIC")
    {
        Style("TRANSPARENT");
        ColorGroup("INPUTBOX");
        Pos(2, 256);
        Size(110, 105);
        CreateControl("TerrainSelectTitle", "STATIC")
        {
            ColorGroup("BACKGROUND");
            Pos(3, 0);
            Size(40, 12);
            Font("SMALL");
            JustifyText("LEFT");
            Text("Terrain Height:");
            Style("TRANSPARENT");
        }
        CreateControl("ModeEyedrop", "BUTTON")
        {
            Pos(2, 16);
            Size(40, 18);
            Font("SMALL");
            Text("Pick");
            Cursor("Highlight");
            Style("ROLLOVER", "RADIO");
            UseVar("editor.height.mode");
            Value(4);
            TipText("Pick a Height from the terrain to use");
        }
        CreateControl("ModeSelect", "BUTTON")
        {
            Pos(45, 16);
            Size(64, 18);
            Font("SMALL");
            Text("Marquee");
            Cursor("Highlight");
            Style("ROLLOVER", "RADIO");
            UseVar("editor.height.mode");
            Value(5);
            TipText("Bandbox an area of terrain and use CTRL+C to copy it","LMB places the copied terrain", "RMB releases the selected terrain");
        }
        CreateControl("ForegroundTitle", "STATIC")
        {
            ColorGroup("BACKGROUND");
            Pos(10, 40);
            Size(110, 12);
            Font("SMALL");
            JustifyText("LEFT");
            Text("Foreground:");
            Style("Transparent");
            TipText("Enter a value for the Foreground Height");
        }
        CreateControl("Foreground", "EDIT")
        {
            ColorGroup("INPUTBOX2");
            Pos(10, 52);
            Size(85, 16);
            Font("SMALL");
            Style("ROLLOVER");
            Cursor("Highlight");
            UseVar("editor.height.foreground");
        }
        CreateControl("BackgroundTitle", "STATIC")
        {
            ColorGroup("BACKGROUND");
            Pos(10, 72);
            Size(110, 12);
            Font("SMALL");
            JustifyText("LEFT");
            Text("Background:");
            Style("Transparent");
            TipText("Enter a value for the Background Height");
        }
        CreateControl("Background", "EDIT")
        {
            ColorGroup("INPUTBOX2");
            Pos(10, 84);
            Size(85, 16);
            Font("SMALL");
            Style("ROLLOVER");
            Cursor("Highlight");
            UseVar("editor.height.background");
        }
    }
    // End Height Brush Terrain Height Control
}




        // SELECT, COPY, AND PASTE CONTROLS
        //CreateControl("PasteAbsolute", "BUTTON")
        //{
        //      Pos(2, 35);
        //       Size(50, 15);
        //       Font("SMALL");
        //       Cursor("Highlight");
        //       Style("ROLLOVER", "RADIO");
        //       Text("Paste");
        //       UseVar("editor.height.pastemode");
        //       Value(0);
        //           }
        //              CreateControl("PasteRelative", "BUTTON")
        //              {
        //                  Pos(55, 35);
        //                  Size(55, 15);
        //                  Font("SMALL");
        //                  Style("ROLLOVER", "RADIO");
        //                  Cursor("Highlight");
        //                  Text("Relative");
        //                  UseVar("editor.height.pastemode");
        //                  Value(1);
        //          }
        //  CreateControl("FeatherTitle", "STATIC")
        //  {
        //      ColorGroup("BACKGROUND");
        //      Pos(5, 55);
        //      Size(80, 10);
        //      Font("SMALL");
        //      JustifyText("LEFT");
        //      Text("Feather Distance");
        //      Style("Transparent");
        //  }
        //  CreateControl("FeatherDistance", "EDIT")
        //  {
        //      Pos(5, 68);
        //      Size(100, 15);
        //      Font("SMALL");
        //      Style("ROLLOVER");
        //      Cursor("Highlight");
        //      UseVar("editor.height.featherdistance");
        //  }
        //  CreateControl("SaveSelection", "BUTTON")
        //  {
        //      Pos(5, 98);
        //      Size(50, 15);
        //      Font("SMALL");
        //      Style("ROLLOVER");
        //      Cursor("Highlight");
        //      Text("Save");
        //      NotifyParent("Button::Press", "SaveSelection");
        //  }
        //CreateControl("LoadSelection", "BUTTON")
        //  {
        //      Pos(55, 98);
        //      Size(50, 15);
        //      Font("SMALL");
        //      Style("ROLLOVER");
        //      Cursor("Highlight");
        //      Text("Load");
        //      NotifyParent("Button::Press", "LoadSelection");
        //  }
        //  CreateControl("SaveSelectionOBJ", "BUTTON")
        //  {
        //      Pos(5, 118);
        //      Size(50, 15);
        //      Font("SMALL");
        //     Style("ROLLOVER");
        //      Cursor("Highlight");
        //      Text("Save Obj");
        //      NotifyParent("Button::Press", "SaveSelectionOBJ");
        //  }
        // OnEvent("SaveSelection")
        //  {
        //      Cmd("editor.height.saveselection");
        //  }
        //  OnEvent("LoadSelection")
        //  {
        //      Cmd("editor.height.loadselection");
        //  }
        //  OnEvent("SaveSelectionOBJ")
        //  {
        //      Cmd("editor.height.saveselectionobj");
        //  }

