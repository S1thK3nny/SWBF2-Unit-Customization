// "Greetings, Starfighter.  You have been selected by the Star League to defend the Frontier
// against Xur and the Ko-dan armada..."

// Stuff in here works like functions.

// As function name:  "Exact" or "Prefix" gives the name (shadow, soundspace, etc)
// - "Exact" means the region name MUST be this, "Prefix" means the region name must begin with this...

// "Shapes" is for which shapes this region is allowed to be - takes 1 parameter
// - a string consisting of Box Sph[ere] or Cyl[inder], which specifies allowed shapes...ex. Shapes("Box Sph");
// if "Shapes" is not present, all shapes are assumed to be allowed.

// For all the below:
// First 2 arguments are IN ORDER:
// - The name of the argument.  For required args, this is "".  For others...example: "a=255", name is "a".
// - Description to be shown in the UI.  For example, "a=255", this might be "Alpha Value"

// Required parameters should be specified in-order, obviously.

// Types of arguments are:

// Arg("argName", "UI description"); 
//  -or-
// String("argName", "UI description");
//   - any string.  DOES NOT allow spaces.

// Number("argName", "UI description");
//  -or-
// BoundedNumber("argName", "UI description", lowerBound, upperBound);
//   - restricted to number entry, for bounded numbers restricted between lower and upper, inclusive.
// 

// File("argName", "UI description", "extension");
//   - UI element will have a browse button for files ending in "extension"

// Color("argName", "UI description");
//   - an RGB entry field in the form of "R,G,B" - comes with color picker button and validates user-entered text.

// An example type:

// Exact("test")
// {
// 	File("textfile", "Text File Name", "txt");
// 	Color("color", "Sample Color");
// 	Number("number", "Sample Number");
// 	BoundedNumber("bounded", "Sample Bnded #", -1, 2);
// 	Arg("string", "Sample string");
// }

// -- GOOD LUCK! -- 

Prefix("deathregion")
{
}

Exact("soundstream") {
	Shapes("Sph");
	Arg("", "Sound Property Name");
	BoundedNumber("", "Min Distance Divisor", 1, 1000000);
}
Exact("soundstatic") {
	Shapes("Sph");
	Arg("", "Sound Property Name");
	BoundedNumber("", "Min Distance Divisor", 1, 1000000);
}
Exact("soundspace") {
	Shapes("Box Cyl Sph");
	Arg("", "Sound Space Name");
}
Exact("soundtrigger") {
	Arg("", "Region Name");
}
Exact("foleyfx") {
	Arg("", "Group I.D.");
}

Prefix("shadow") {
	BoundedNumber("directional", "Directional 1 Intensity", 0, 1);
	BoundedNumber("directional1", "Directional 2 Intensity", 0, 1);
	Color("colortop", "Top Amb. Color (R,G,B)");
	Color("colorbottom", "Bottom Color (R,G,B)");
	File("envmap", "Environment Map", "TGA");
}

Exact("mapbounds") {
}

Exact("rumble") {
	Arg("", "Rumble Class");
	Arg("", "Particle Effect");
}

Prefix("reflection") { 
	Shapes("Box Cyl");
}

Prefix("rainshadow") { 
}

Prefix("danger") { 
}

Prefix("DamageRegion") {
	Number("damagerate", "Base Damage Rate");
	Number("personscale","Scale for people");
        Number("animalscale","Scale for animals");
        Number("droidscale","Scale for droids");
        Number("vehiclescale","Scale for vehicles");
        Number("buildingscale","Scale for buildings");
        Number("buildingdeadscale","Scale for dead buildings");
        Number("buildingunbuiltscale","Scale for unbuilt buildings");
}

Prefix("AIVis") {
	Number("crouch", "Vis Multiplier when Crouched");
	Number("stand","Vis Multiplier when Standing");
}

// more?