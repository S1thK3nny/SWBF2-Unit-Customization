<?xml version="1.0" encoding="utf-8" ?>
<shader rendertype="shield" skinned="no" debuginfo="no">
	<vertexshader name="vs1_near" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"

		#define R_WORLD_NORMAL r11

		; transform normal to world space
		dp3 R_WORLD_NORMAL.x, R_NORMAL, c[C_OBJ_WORLD_M0]
		dp3 R_WORLD_NORMAL.y, R_NORMAL, c[C_OBJ_WORLD_M1]
		dp3 R_WORLD_NORMAL.z, R_NORMAL, c[C_OBJ_WORLD_M2]

		; calculate the reflected eye-to-vertex vector
		add R_TEMP1.xyz, R_WORLD_POS.xyz,-c[C_WORLD_VIEWPOS].xyz
		dp3 R_TEMP.w,-R_TEMP1.xyz, R_WORLD_NORMAL.xyz
		mad R_TEMP.xyz, R_TEMP.w, R_WORLD_NORMAL.xyz, R_TEMP1.xyz
		mad R_TEMP.xyz, R_TEMP.w, R_WORLD_NORMAL.xyz, R_TEMP.xyz

		; calculate the view angle alpha factor in R_TEMP2.w
		dp3 R_TEMP1.w, R_TEMP1.xyz, R_TEMP1.xyz
		max R_TEMP1.w, R_TEMP1.w, c[C_CUSTOM_MIN+3].w
		rcp R_TEMP2.w, R_TEMP1.w
		dp3 R_TEMP1.w, R_TEMP.xyz, R_TEMP1.xyz
		mul R_TEMP2.w, R_TEMP1.w, R_TEMP2.w
		mad R_TEMP2.w, R_TEMP2.w,-c[C_CONST0].y, c[C_CONST0].y
		mul R_TEMP2.w, R_TEMP2.w, c[C_CUSTOM_MIN+3].z
		mad R_TEMP2.w,-R_TEMP2.w, R_MATERIAL_COLOR.w, R_MATERIAL_COLOR.w

		; calculate specular spot map projected coordinates
		dp3 R_TEMP1.x, R_TEMP.xyz, c[C_CUSTOM_MIN+1].xyz
		dp3 R_TEMP1.y, R_TEMP.xyz, c[C_CUSTOM_MIN+2].xyz
		dp3 R_TEMP1.w, R_TEMP.xyz,-c[C_LIGHT_DIRECTIONAL0_DIR].xyz
		; output biased coords (x+z, y+z, 0, z+z) => ((x/z + 1)/2, (y/z + 1)/2, 0, 1)
		add oT1.xyzw, R_TEMP1.xyww, R_TEMP1.wwww

		; calculate specular color = ((n dot -l) gte 0) ? c[C_SPECULAR_COLOR] : black
		dp3 R_TEMP.z, R_WORLD_NORMAL.xyz,-c[C_LIGHT_DIRECTIONAL0_DIR].xyz
		sge R_TEMP.zw, R_TEMP.zw, c[C_CONST0].xx
		mul R_TEMP.w, R_TEMP.w, R_TEMP.z	; multiply in eye dot normal to remove back facing specular
		mul R_TEMP2.xyz, R_TEMP.w, c[C_CUSTOM_MIN].xyz

		; project the position into screen space		
		POS_PROJECT(oPos)

		; decompress texcoords
		mul R_TEMP, V_TEXCOORDS, c[C_NORMALTEX_DECOMPRESS].zzzw
		add oT0.xy, R_TEMP.xy, c[C_CUSTOM_MIN+3].xy

		; calculate near scene fade factor in R_TEMP.w
		NEARSCENEFADE(R_TEMP)
		FOG(R_TEMP.z, R_WORLD_POS, R_TEMP1)
		mad R_TEMP.w, R_TEMP.z, c[C_CUSTOM_MIN+4].x, c[C_CUSTOM_MIN+4].y
		; clamp to [0.0,1.0]
		max R_TEMP.w, R_TEMP.w, c[C_CONST0].x
		min R_TEMP.w, R_TEMP.w, c[C_CONST0].z
		mul R_TEMP.w, R_TEMP.w, R_TEMP2.w
		; apply near scene fade to specular
		mul R_TEMP2.xyz, R_TEMP2.xyz, R_TEMP.w
		mul oD1.xyz, R_TEMP2.xyz, c[C_HDR].zzz	
		; output color with lighting and near scene fade
		mul oD0.xyz, R_MATERIAL_COLOR.xyz, c[C_HDR].zzz		
		mul oD0.w, R_MATERIAL_COLOR.w, R_TEMP.w
	</vertexshader>

	<pixelshader name="ps1_near" target="ps_1_1">
		def c0, 0, 0, 0, 0.49

		tex t0	    // diffuse map (alpha channel has alpha map)
		tex t1		// specular spot map

		// compute specular color (t0.a > 0 ? spot_map * specular_color : zero)
		mul r1.rgb, t1, v1
		+add r0.a, t0.a, c0.a
		cnd r1.rgb, r0.a, r1, c0

		// compute diffuse color (main * lighting)
		mul r0, t0, v0

		// out.rgb = diffuse * alpha + specular
		// out.a = t0.a for alpha test
		mad r0.rgb, r0, r0.a, r1
		+mov r0.a, t0.a		
	</pixelshader>

	<pipeline id="1">
		<state id="0">
			<pass transform="normals" lighting="none" vertexcolor="no">
				<vertexshader use="vs1_near"/>
				<pixelshader use="ps1_near"/>
			</pass>
		</state>
	</pipeline>
</shader>