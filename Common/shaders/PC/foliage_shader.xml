<?xml version="1.0" encoding="ISO-8859-1"?>
<shader rendertype="foliage">
	<vertexshader name="vs1_opaque" target="vs_1_1">		
	#include "pcRedVertexShaderConstants.h"
	#include "pcRedVertexShaderMacros.h"

	POS_PROJECT(oPos)

	; decompress texcoords
	mul oT0, V_TEXCOORDS, c[C_NORMALTEX_DECOMPRESS].zzzw

	; transform shadow map coordinates
	dp4 oT1.x, R_WORLD_POS, c[C_SHADOWMAP_TRANSFORM_U]
	dp4 oT1.y, R_WORLD_POS, c[C_SHADOWMAP_TRANSFORM_V]
	dp4 oT1.w, R_WORLD_POS, c[C_SHADOWMAP_TRANSFORM_W]
	mov oT1.z, c[C_CONST0].x

	; calculate near scene fade factor in R_TEMP.w
	NEARSCENEFADE(R_TEMP)
	FOG(R_TEMP.z, R_WORLD_POS, R_TEMP1)
	; output color with lighting and near scene fade
	mul oD0.xyz, R_DIFFUSE_LIGHTING.xyz, R_MATERIAL_COLOR.xyz
	; output fade factor * 0.25 + 0.5 to allow interpolation outside the range 0-1
	mad oD0.w, R_TEMP.w, c[C_CONST1].y, c[C_CONST1].z
	</vertexshader>

	<vertexshader name="vs1_transparent" target="vs_1_1">		
	#include "pcRedVertexShaderConstants.h"
	#include "pcRedVertexShaderMacros.h"

	POS_PROJECT(oPos)

	; decompress texcoords
	mul oT0, V_TEXCOORDS, c[C_NORMALTEX_DECOMPRESS].zzzw

	; transform shadow map coordinates
	dp4 oT1.x, R_WORLD_POS, c[C_SHADOWMAP_TRANSFORM_U]
	dp4 oT1.y, R_WORLD_POS, c[C_SHADOWMAP_TRANSFORM_V]
	dp4 oT1.w, R_WORLD_POS, c[C_SHADOWMAP_TRANSFORM_W]
	mov oT1.z, c[C_CONST0].x

	; calculate near scene fade factor in R_TEMP.w
	NEARSCENEFADE(R_TEMP)
	FOG(R_TEMP.z, R_WORLD_POS, R_TEMP1)
	; clamp to [0.0,1.0] and square it to fade transparent objects faster
	max R_TEMP.w, R_TEMP.w, c[C_CONST0].x
	min R_TEMP.w, R_TEMP.w, c[C_CONST0].z
	mul R_TEMP.w, R_TEMP.w, R_TEMP.w
	; output color with lighting and near scene fade
	mul oD0.xyz, R_DIFFUSE_LIGHTING.xyz, R_MATERIAL_COLOR.xyz
	mul oD0.w, R_MATERIAL_COLOR.w, R_TEMP.w
	</vertexshader>

	<pixelshader name="ps1_hardedged" target="ps_1_1">
	def c0, 0, 0, 0.75,-0.01	// 0, 0, 1-alpharef, 0
	tex t0						// diffuse map

	mul r0.rgb,t0,v0
	+add r0.a,t0_bias.a,c0.b
	cnd_x4 r0.a,r0.a,v0_bias.a,c0.a	// alpha test vs. alpharef; near scene alpha is d4 + 1/2
	</pixelshader>

	<pixelshader name="ps1_transparent_hardedged" target="ps_1_1">
	def c0, 0, 0, 0.75,-0.01	// 0, 0, 1-alpharef, 0
	tex t0						// diffuse map

	mul r1.rgb,t0.a,v0.a
	+add r0.a,t0_bias.a,c0.b
	mul r0.rgb,t0,v0
	+cnd r0.a,r0.a,r1.b,c0.a	// alpha test vs. alpha ref 0.5
	</pixelshader>

	<pixelshader name="ps1_shadow_hardedged" target="ps_1_1">
	def c0, 0, 0, 0.75,-0.01	// 0, 0, 1-alpharef, 0
	tex t0						// diffuse map
	tex t1						// shadow map

	mul r0.rgb, 1-t1.a, c1
	mul r0.rgb,v0,r0
	+add r0.a,t0_bias.a,c0.b
	mul r0.rgb,t0,r0
	+cnd_x4 r0.a,r0.a,v0_bias.a,c0.a	// alpha test vs. alpharef; near scene alpha is d4 + 1/2
	</pixelshader>

	<pixelshader name="ps1_shadow_transparent_hardedged" target="ps_1_1">
	def c0, 0, 0, 0.75,-0.01	// 0, 0, 1-alpharef, 0
	tex t0						// diffuse map
	tex t1						// shadow map

	mul r0.rgb, 1-t1.a, c1
	mul r1.a,t0.a,v0.a
	mul r0.rgb,v0,r0
	+add r0.a,t0_bias.a,c0.b
	mul r0.rgb,t0,r0
	+cnd r0.a,r0.a,r1.a,c0.a	// alpha test vs. alpha ref 0.5
	</pixelshader>

	<pipeline id="1">
		<state id="0">
			<pass transform="position" lighting="none">
				<vertexshader use="vs1_opaque"/>
				<pixelshader use="ps1_hardedged"/>
			</pass>
		</state>
		<state id="1">
			<pass transform="position" lighting="none">
				<vertexshader use="vs1_transparent"/>
				<pixelshader use="ps1_transparent_hardedged"/>
			</pass>
		</state>
		<state id="2">
			<pass transform="position" lighting="none">
				<vertexshader use="vs1_opaque"/>
				<pixelshader use="ps1_shadow_hardedged"/>
			</pass>
		</state>
		<state id="3">
			<pass transform="position" lighting="none">
				<vertexshader use="vs1_transparent"/>
				<pixelshader use="ps1_shadow_transparent_hardedged"/>
			</pass>
		</state>
	</pipeline>
</shader>
