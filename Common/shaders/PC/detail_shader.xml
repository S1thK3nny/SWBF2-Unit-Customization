<?xml version="1.0" encoding="utf-8" ?>
<shader rendertype="detail" skinned="yes" debuginfo="no">
	<vertexshader name="vs1_far" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"

		; project the position into screen space		
		POS_PROJECT(R_TEMP1)
		mov oPos, R_TEMP1
		
		; decompress texcoords
		mul R_TEMP, V_TEXCOORDS, c[C_NORMALTEX_DECOMPRESS].zzzw
	
		; copy diffuse texture coordinates
		mov oT0.xy, R_TEMP.xy
		mov oT0.zw, c[C_CONST0].xz

		; create detail texture coordinates
		mul oT1.xy, R_TEMP.xy, c[C_CUSTOM_MIN+0].zw
		mov oT1.zw, c[C_CONST0].xz

		; R_TEMP1.w is camera space z since position is already projected
		mad R_TEMP.w, R_TEMP1.w, c[C_CUSTOM_MIN+0].x, c[C_CUSTOM_MIN+0].y
		min oT2.xyzw, R_TEMP.w, c[C_CONST0].z				; clamp to (0..1)

		; output color (with lighting)
		mul oD0.xyz, R_MATERIAL_COLOR.xyz, R_DIFFUSE_LIGHTING.xyz
		mov oD0.w, R_MATERIAL_COLOR.w

		; output fog value in oFog
		dp4 R_TEMP.z, R_WORLD_POS, c[C_WORLD_PROJ_M3]
		FOG(R_TEMP.z, R_WORLD_POS, R_TEMP1)
	</vertexshader>

	<vertexshader name="vs1_near_opaque" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"

		; project the position into screen space		
		POS_PROJECT(R_TEMP1)
		mov oPos, R_TEMP1
		
		; decompress texcoords
		mul R_TEMP, V_TEXCOORDS, c[C_NORMALTEX_DECOMPRESS].zzzw
	
		; copy diffuse texture coordinates
		mov oT0.xy, R_TEMP.xy
		mov oT0.zw, c[C_CONST0].xz

		; create detail texture coordinates
		mul oT1.xy, R_TEMP.xy, c[C_CUSTOM_MIN+0].zw
		mov oT1.zw, c[C_CONST0].xz

		; R_TEMP1.w is camera space z since position is already projected
		mad R_TEMP.w, R_TEMP1.w, c[C_CUSTOM_MIN+0].x, c[C_CUSTOM_MIN+0].y
		min oT3.xyzw, R_TEMP.w, c[C_CONST0].z				; clamp to (0..1)

		; calculate near scene fade factor in R_TEMP.w
		NEARSCENEFADE(R_TEMP)
		FOG(R_TEMP.z, R_WORLD_POS, R_TEMP1)
		; output color with lighting and near scene fade
		mul oD0.xyz, R_MATERIAL_COLOR.xyz, R_DIFFUSE_LIGHTING.xyz
		; output fade factor * 0.25 + 0.5 to allow interpolation outside the range 0-1
		mad oD0.w, R_TEMP.w, c[C_CONST1].y, c[C_CONST1].z
	</vertexshader>

	<vertexshader name="vs1_near_opaque_shadow" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"

		; project the position into screen space		
		POS_PROJECT(R_TEMP1)
		mov oPos, R_TEMP1

		; decompress texcoords
		mul R_TEMP, V_TEXCOORDS, c[C_NORMALTEX_DECOMPRESS].zzzw

		; copy diffuse texture coordinates
		mov oT0.xy, R_TEMP.xy
		mov oT0.zw, c[C_CONST0].xz

		; create detail texture coordinates
		mul oT1.xy, R_TEMP.xy, c[C_CUSTOM_MIN+0].zw
		mov oT1.zw, c[C_CONST0].xz

		; transform shadow map coordinates
		dp4 oT2.x, R_WORLD_POS, c[C_SHADOWMAP_TRANSFORM_U]
		dp4 oT2.y, R_WORLD_POS, c[C_SHADOWMAP_TRANSFORM_V]
		dp4 oT2.w, R_WORLD_POS, c[C_SHADOWMAP_TRANSFORM_W]
		mov oT2.z, c[C_CONST0].x

		; R_TEMP1.w is camera space z since position is already projected
		mad R_TEMP.w, R_TEMP1.w, c[C_CUSTOM_MIN+0].x, c[C_CUSTOM_MIN+0].y
		min oT3.xyzw, R_TEMP.w, c[C_CONST0].z				; clamp to (0..1)

		; calculate near scene fade factor in R_TEMP.w
		NEARSCENEFADE(R_TEMP)
		FOG(R_TEMP.z, R_WORLD_POS, R_TEMP1)
		; output lighting minus sun to oD0, sun lighting to oD1
		add R_DIFFUSE_LIGHTING.xyz, R_DIFFUSE_LIGHTING.xyz, -R_DIFFUSE_DIRECTIONAL_LIGHTING_COLOR.xyz
		mul oD0.xyz, R_MATERIAL_COLOR.xyz, R_DIFFUSE_LIGHTING.xyz
		mul oD1.xyz, R_MATERIAL_COLOR.xyz, R_DIFFUSE_DIRECTIONAL_LIGHTING_COLOR.xyz
		; output fade factor * 0.25 + 0.5 to allow interpolation outside the range 0-1
		mad oD0.w, R_TEMP.w, c[C_CONST1].y, c[C_CONST1].z
	</vertexshader>

	<vertexshader name="vs1_near_transparent" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"

		; project the position into screen space		
		POS_PROJECT(R_TEMP1)
		mov oPos, R_TEMP1
		
		; decompress texcoords
		mul R_TEMP, V_TEXCOORDS, c[C_NORMALTEX_DECOMPRESS].zzzw
	
		; copy diffuse texture coordinates
		mov oT0.xy, R_TEMP.xy
		mov oT0.zw, c[C_CONST0].xz

		; create detail texture coordinates
		mul oT1.xy, R_TEMP.xy, c[C_CUSTOM_MIN+0].zw
		mov oT1.zw, c[C_CONST0].xz

		; R_TEMP1.w is camera space z since position is already projected
		mad R_TEMP.w, R_TEMP1.w, c[C_CUSTOM_MIN+0].x, c[C_CUSTOM_MIN+0].y
		min oT3.xyzw, R_TEMP.w, c[C_CONST0].z				; clamp to (0..1)

		; calculate near scene fade factor in R_TEMP.w
		NEARSCENEFADE(R_TEMP)
		FOG(R_TEMP.z, R_WORLD_POS, R_TEMP1)
		; clamp to [0.0,1.0] and square it to fade transparent objects faster
		max R_TEMP.w, R_TEMP.w, c[C_CONST0].x
		min R_TEMP.w, R_TEMP.w, c[C_CONST0].z
		mul R_TEMP.w, R_TEMP.w, R_TEMP.w
		; output color with lighting and near scene fade
		mul oD0.xyz, R_MATERIAL_COLOR.xyz, R_DIFFUSE_LIGHTING.xyz
		mul oD0.w, R_MATERIAL_COLOR.w, R_TEMP.w
	</vertexshader>

	<vertexshader name="vs1_near_transparent_shadow" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"

		; project the position into screen space		
		POS_PROJECT(R_TEMP1)
		mov oPos, R_TEMP1
		
		; decompress texcoords
		mul R_TEMP, V_TEXCOORDS, c[C_NORMALTEX_DECOMPRESS].zzzw
	
		; copy diffuse texture coordinates
		mov oT0.xy, R_TEMP.xy
		mov oT0.zw, c[C_CONST0].xz

		; create detail texture coordinates
		mul oT1.xy, R_TEMP.xy, c[C_CUSTOM_MIN+0].zw
		mov oT1.zw, c[C_CONST0].xz

		; transform shadow map coordinates
		dp4 oT2.x, R_WORLD_POS, c[C_SHADOWMAP_TRANSFORM_U]
		dp4 oT2.y, R_WORLD_POS, c[C_SHADOWMAP_TRANSFORM_V]
		dp4 oT2.w, R_WORLD_POS, c[C_SHADOWMAP_TRANSFORM_W]
		mov oT2.z, c[C_CONST0].x

		; R_TEMP1.w is camera space z since position is already projected
		mad R_TEMP.w, R_TEMP1.w, c[C_CUSTOM_MIN+0].x, c[C_CUSTOM_MIN+0].y
		min oT3.xyzw, R_TEMP.w, c[C_CONST0].z				; clamp to (0..1)

		; calculate near scene fade factor in R_TEMP.w
		NEARSCENEFADE(R_TEMP)
		FOG(R_TEMP.z, R_WORLD_POS, R_TEMP1)
		; clamp to [0.0,1.0] and square it to fade transparent objects faster
		max R_TEMP.w, R_TEMP.w, c[C_CONST0].x
		min R_TEMP.w, R_TEMP.w, c[C_CONST0].z
		mul R_TEMP.w, R_TEMP.w, R_TEMP.w
		; output lighting minus sun to oD0, sun lighting to oD1
		add R_DIFFUSE_LIGHTING.xyz, R_DIFFUSE_LIGHTING.xyz, -R_DIFFUSE_DIRECTIONAL_LIGHTING_COLOR.xyz
		mul oD0.xyz, R_MATERIAL_COLOR.xyz, R_DIFFUSE_LIGHTING.xyz
		mul oD1.xyz, R_MATERIAL_COLOR.xyz, R_DIFFUSE_DIRECTIONAL_LIGHTING_COLOR.xyz
		mul oD0.w, R_MATERIAL_COLOR.w, R_TEMP.w
	</vertexshader>

	<pixelshader name="ps1_far" target="ps_1_1">
		tex t0	       			// main map
		tex t1                  // detail map
		texcoord t2				// t2.b = fade factor

		// r1.rgb = main * detail * 2, r1.a = detail factor
		mul_x2 r1.rgb, t0, t1.a
		+mov r1.a, t2.b

		// lrp between detail*main*2 and main based on detail factor
		lrp r0.rgb, r1.a, r1, t0
		
		// r0.rgb = main * lighting
		mul r0.rgb, r0, v0
		+mul r0.a, t0.a, v0.a
	</pixelshader>

	<pixelshader name="ps1_near_opaque" target="ps_1_1">
		tex t0	       			// main map
		tex t1                  // detail map
		texcoord t3				// t3.b = fade factor

		// r1.rgb = main * detail * 2, r1.a = detail factor
		mul_x2 r1.rgb, t0, t1
		+mov r1.a, t3.b

		// lrp between detail*main*2 and main based on detail factor
		lrp r0.rgb, r1.a, r1, t0
		
		// r0.rgb = main * lighting
		mul r0.rgb, r0, v0
		mov_x4 r0.a,v0_bias.a	// near scene alpha is d4 + 1/2	
	</pixelshader>

	<pixelshader name="ps1_near_hardedged" target="ps_1_1">
		def c0, 0, 0, 0.5,-0.01	// 0, 0, 1-alpharef, 0
		tex t0	       			// main map
		tex t1                  // detail map
		texcoord t3				// t3.b = fade factor

		// r1.rgb = main * detail * 2, r1.a = detail factor
		mul_x2 r1.rgb, t0, t1
		+mov r1.a, t3.b

		// lrp between detail*main*2 and main based on detail factor
		lrp r0.rgb, r1.a, r1, t0
		+add r0.a,t0_bias.a,c0.b
		
		// r0.rgb = main * lighting
		mul r0.rgb, r0, v0
		cnd_x4 r0.a,r0.a,v0_bias.a,c0.a	// alpha test vs. alpharef; near scene alpha is d4 + 1/2
	</pixelshader>

	<pixelshader name="ps1_near_transparent" target="ps_1_1">
		tex t0	       			// main map
		tex t1                  // detail map
		texcoord t3				// t3.b = fade factor

		// r1.rgb = main * detail * 2, r1.a = detail factor
		mul_x2 r1.rgb, t0, t1
		+mov r1.a, t3.b

		// lrp between detail*main*2 and main based on detail factor
		lrp r0.rgb, r1.a, r1, t0
		
		// r0.rgb = main * lighting
		mul r0.rgb, r0, v0
		+mul r0.a,t0.a,v0.a
	</pixelshader>

	<pixelshader name="ps1_near_transparent_hardedged" target="ps_1_1">
		def c0, 0, 0, 0.5, 0	// 0, 0, 1-alpharef, 0
		tex t0	       			// main map
		tex t1                  // detail map
		texcoord t3				// t3.b = fade factor

		// r1.rgb = main * detail * 2, r1.a = detail factor
		mul_x2 r1.rgb, t0, t1
		+mov r1.a, t3.b

		// lrp between detail*main*2 and main based on detail factor
		lrp r0.rgb, r1.a, r1, t0
		mul r1.rgb, t0.a, v0.a
		+add r0.a,t0_bias.a,c0.b

		// r0.rgb = main * lighting
		mul r0.rgb, r0, v0
		+cnd r0.a,r0.a,r1.b,c0.a	// alpha test vs. alpharef
	</pixelshader>

	<pixelshader name="ps1_near_opaque_shadow" target="ps_1_1">
		tex t0	       			// main map
		tex t1                  // detail map
		tex t2					// shadow map
		texcoord t3				// t3.b = fade factor

		// r1.rgb = main * detail * 2, r1.a = detail factor
		mul_x2 r1.rgb, t0, t1
		+mov r1.a, t3.b

		// lrp between detail*main*2 and main based on detail factor
		lrp r0.rgb, r1.a, r1, t0

		// shadow corrected light = (diffuse lighting) + shadow*(sun contribution)
		mad_sat r1.rgb, t2.a, v1, v0

		// r0.rgb = main * lighting
		mul r0.rgb, r0, r1
		mov_x4 r0.a,v0_bias.a	// near scene alpha is d4 + 1/2	
	</pixelshader>

	<pixelshader name="ps1_near_hardedged_shadow" target="ps_1_1">
		def c0, 0, 0, 0.5,-0.01	// 0, 0, 1-alpharef, 0
		tex t0	       			// main map
		tex t1                  // detail map
		tex t2					// shadow map
		texcoord t3				// t3.b = fade factor

		// r1.rgb = main * detail * 2, r1.a = detail factor
		mul_x2 r1.rgb, t0, t1
		+mov r1.a, t3.b

		// lrp between detail*main*2 and main based on detail factor
		lrp r0.rgb, r1.a, r1, t0
		+add r0.a,t0_bias.a,c0.b
		
		// shadow corrected light = (diffuse lighting) + shadow*(sun contribution)
		mad_sat r1.rgb, t2.a, v1, v0

		// r0.rgb = main * lighting
		mul r0.rgb, r0, r1
		cnd_x4 r0.a,r0.a,v0_bias.a,c0.a	// alpha test vs. alpharef; near scene alpha is d4 + 1/2
	</pixelshader>

	<pixelshader name="ps1_near_transparent_shadow" target="ps_1_1">
		tex t0	       			// main map
		tex t1                  // detail map
		tex t2					// shadow map
		texcoord t3				// t3.b = fade factor

		// r1.rgb = main * detail * 2, r1.a = detail factor
		mul_x2 r1.rgb, t0, t1
		+mov r1.a, t3.b

		// lrp between detail*main*2 and main based on detail factor
		lrp r0.rgb, r1.a, r1, t0
		
		// shadow corrected light = (diffuse lighting) + shadow*(sun contribution)
		mad_sat r1.rgb, t2.a, v1, v0
		
		// r0.rgb = main * lighting
		mul r0.rgb, r0, r1
		+mul r0.a,t0.a,v0.a
	</pixelshader>

	<pixelshader name="ps1_near_transparent_hardedged_shadow" target="ps_1_1">
		def c0, 0, 0, 0.5, 0	// 0, 0, 1-alpharef, 0
		tex t0	       			// main map
		tex t1                  // detail map
		tex t2					// shadow map
		texcoord t3				// t3.b = fade factor

		// r1.rgb = main * detail * 2, r1.a = detail factor
		mul_x2 r1.rgb, t0, t1
		+mov r1.a, t3.b

		// lrp between detail*main*2 and main based on detail factor
		lrp r0.rgb, r1.a, r1, t0
		+mul r1.a,t0.a,v0.a

		// shadow corrected light = (diffuse lighting) + shadow*(sun contribution)
		mad_sat r1.rgb, t2.a, v1, v0
		+add r0.a,t0_bias.a,c0.b

		// r0.rgb = main * lighting
		mul r0.rgb, r0, r1
		+cnd r0.a,r0.a,r1.a,c0.a	// alpha test vs. alpharef
	</pixelshader>

	<pipeline id="1">
		<state id="0">
			<pass transform="normals" lighting="diffuse">
				<vertexshader use="vs1_far"/>
				<pixelshader use="ps1_far"/>
			</pass>
		</state>
		<state id="1">
			<pass transform="normals" lighting="diffuse">
				<vertexshader use="vs1_near_opaque"/>
				<pixelshader use="ps1_near_opaque"/>
			</pass>
		</state>
		<state id="2">
			<pass transform="normals" lighting="diffuse">
				<vertexshader use="vs1_near_opaque"/>
				<pixelshader use="ps1_near_hardedged"/>
			</pass>
		</state>
		<state id="3">
			<pass transform="normals" lighting="diffuse">
				<vertexshader use="vs1_near_transparent"/>
				<pixelshader use="ps1_near_transparent"/>
			</pass>
		</state>
		<state id="4">
			<pass transform="normals" lighting="diffuse">
				<vertexshader use="vs1_near_transparent"/>
				<pixelshader use="ps1_near_transparent_hardedged"/>
			</pass>
		</state>
		<state id="5">
			<pass transform="normals" lighting="diffuse">
				<vertexshader use="vs1_near_opaque_shadow"/>
				<pixelshader use="ps1_near_opaque_shadow"/>
			</pass>
		</state>
		<state id="6">
			<pass transform="normals" lighting="diffuse">
				<vertexshader use="vs1_near_opaque_shadow"/>
				<pixelshader use="ps1_near_hardedged_shadow"/>
			</pass>
		</state>
		<state id="7">
			<pass transform="normals" lighting="diffuse">
				<vertexshader use="vs1_near_transparent_shadow"/>
				<pixelshader use="ps1_near_transparent_shadow"/>
			</pass>
		</state>
		<state id="8">
			<pass transform="normals" lighting="diffuse">
				<vertexshader use="vs1_near_transparent_shadow"/>
				<pixelshader use="ps1_near_transparent_hardedged_shadow"/>
			</pass>
		</state>
	</pipeline>
</shader>