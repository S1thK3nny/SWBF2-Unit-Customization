<?xml version="1.0" encoding="utf-8" ?>
<shader rendertype="perpixeldiffuselighting" skinned="yes" debuginfo="no">

	<vertexshader name="vs1_3lights_bump" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"

		#define MIN_CONST		C_LIGHT_DIRECTIONAL0_COLOR
		#define R_WORLD_NORMAL  r11

		; project the position into screen space		
		POS_PROJECT(oPos)
		dp4 R_TEMP.z, R_WORLD_POS, c[C_WORLD_PROJ_M3]
		FOG(R_TEMP.z, R_WORLD_POS, R_TEMP1)
		
		; decompress texcoords
		mul R_TEMP, V_TEXCOORDS, c[C_NORMALTEX_DECOMPRESS].zzzw

		; transform texture coordinates
		dp4 oT0.x, R_TEMP, c[C_CUSTOM_MIN+0]
		dp4 oT0.y, R_TEMP, c[C_CUSTOM_MIN+1]
		mov oT0.zw, c[C_CONST0].xz

		// transform normal and binormals to world space
		dp3 R_WORLD_NORMAL.x, R_NORMAL, c[C_OBJ_WORLD_M0]
		dp3 R_WORLD_NORMAL.y, R_NORMAL, c[C_OBJ_WORLD_M1]
		dp3 R_WORLD_NORMAL.z, R_NORMAL, c[C_OBJ_WORLD_M2]
		mov R_TEMP.xyz, R_BINORMAL_S.xyz
		dp3 R_BINORMAL_S.x, R_TEMP, c[C_OBJ_WORLD_M0]
		dp3 R_BINORMAL_S.y, R_TEMP, c[C_OBJ_WORLD_M1]
		dp3 R_BINORMAL_S.z, R_TEMP, c[C_OBJ_WORLD_M2]
		mov R_TEMP.xyz, R_BINORMAL_T.xyz
		dp3 R_BINORMAL_T.x, R_TEMP, c[C_OBJ_WORLD_M0]
		dp3 R_BINORMAL_T.y, R_TEMP, c[C_OBJ_WORLD_M1]
		dp3 R_BINORMAL_T.z, R_TEMP, c[C_OBJ_WORLD_M2]

		// accumulate static and ambient light in oD0
		LIGHT_AMBIENT(R_TEMP, R_WORLD_NORMAL, c[C_LIGHT_AMBIENT_COLOR0], c[C_LIGHT_AMBIENT_COLOR1], R_TEMP1)
		add R_TEMP.xyz, R_TEMP.xyz, R_STATIC_DIFFUSE_LIGHTING.xyz
		mul oD0.xyz, R_TEMP.xyz, c[C_LIGHT_AMBIENT_COLOR0].www

		//////////////////////////////// light 1 ////////////////////////////////////////
		; calculate light space coordinates = (world_pos - light_pos) / (radius)
		mad R_TEMP, R_WORLD_POS, c[MIN_CONST+0].w, -c[MIN_CONST+0].xyz

		; rotate light into tangent space
		dp3 R_TEMP1.x, R_TEMP, R_BINORMAL_S
		dp3 R_TEMP1.y, R_TEMP, R_BINORMAL_T
		dp3 R_TEMP1.z, R_TEMP, R_WORLD_NORMAL

		; calculate light volume texture coordinates by scaling
		mad oT1, R_TEMP1, c[MIN_CONST+1].xxxz, c[MIN_CONST+1].yyyw


		//////////////////////////////// light 2 ////////////////////////////////////////
		; calculate light space coordinates = (world_pos - light_pos) / (radius)
		mad R_TEMP, R_WORLD_POS, c[MIN_CONST+2].w, -c[MIN_CONST+2].xyz

		; rotate light into tangent space
		dp3 R_TEMP1.x, R_TEMP, R_BINORMAL_S
		dp3 R_TEMP1.y, R_TEMP, R_BINORMAL_T
		dp3 R_TEMP1.z, R_TEMP, R_WORLD_NORMAL
							
		; calculate light volume texture coordinates by scaling
		mad oT2, R_TEMP1, c[MIN_CONST+3].xxxz, c[MIN_CONST+3].yyyw


		//////////////////////////////// light 3 ////////////////////////////////////////
		; calculate light space coordinates = (world_pos - light_pos) / (radius)
		mad R_TEMP, R_WORLD_POS, c[MIN_CONST+4].w, -c[MIN_CONST+4].xyz

		; rotate light into tangent space
		dp3 R_TEMP1.x, R_TEMP, R_BINORMAL_S
		dp3 R_TEMP1.y, R_TEMP, R_BINORMAL_T
		dp3 R_TEMP1.z, R_TEMP, R_WORLD_NORMAL
								
		; calculate light volume texture coordinates by scaling
		mad oT3, R_TEMP1, c[MIN_CONST+5].xxxz, c[MIN_CONST+5].yyyw
	</vertexshader>

	<vertexshader name="vs1_spotlight_bump" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"

		#define MIN_CONST		C_LIGHT_DIRECTIONAL0_COLOR
		#define R_WORLD_NORMAL  r11

		; project the position into screen space		
		POS_PROJECT(oPos)
		dp4 R_TEMP.z, R_WORLD_POS, c[C_WORLD_PROJ_M3]
		FOG(R_TEMP.z, R_WORLD_POS, R_TEMP1)
		
		; decompress texcoords
		mul R_TEMP, V_TEXCOORDS, c[C_NORMALTEX_DECOMPRESS].zzzw

		; transform texture coordinates
		dp4 oT0.x, R_TEMP, c[C_CUSTOM_MIN+0]
		dp4 oT0.y, R_TEMP, c[C_CUSTOM_MIN+1]
		mov oT0.zw, c[C_CONST0].xz

		// transform normal and binormals to world space
		dp3 R_WORLD_NORMAL.x, R_NORMAL, c[C_OBJ_WORLD_M0]
		dp3 R_WORLD_NORMAL.y, R_NORMAL, c[C_OBJ_WORLD_M1]
		dp3 R_WORLD_NORMAL.z, R_NORMAL, c[C_OBJ_WORLD_M2]
		mov R_TEMP.xyz, R_BINORMAL_S.xyz
		dp3 R_BINORMAL_S.x, R_TEMP, c[C_OBJ_WORLD_M0]
		dp3 R_BINORMAL_S.y, R_TEMP, c[C_OBJ_WORLD_M1]
		dp3 R_BINORMAL_S.z, R_TEMP, c[C_OBJ_WORLD_M2]
		mov R_TEMP.xyz, R_BINORMAL_T.xyz
		dp3 R_BINORMAL_T.x, R_TEMP, c[C_OBJ_WORLD_M0]
		dp3 R_BINORMAL_T.y, R_TEMP, c[C_OBJ_WORLD_M1]
		dp3 R_BINORMAL_T.z, R_TEMP, c[C_OBJ_WORLD_M2]

		// accumulate static and ambient light in oD0
		LIGHT_AMBIENT(R_TEMP, R_WORLD_NORMAL, c[C_LIGHT_AMBIENT_COLOR0], c[C_LIGHT_AMBIENT_COLOR1], R_TEMP1)
		add R_TEMP.xyz, R_TEMP.xyz, R_STATIC_DIFFUSE_LIGHTING.xyz
		mul oD0.xyz, R_TEMP.xyz, c[C_LIGHT_AMBIENT_COLOR0].www

		; calculate light space coordinates = (world_pos - light_pos) / (radius)
		mad R_TEMP, R_WORLD_POS, c[MIN_CONST+0].w, -c[MIN_CONST+0].xyz
		dp3 R_TEMP.w, R_TEMP, c[MIN_CONST+2]
		mul R_TEMP.w, R_TEMP.w, c[MIN_CONST+2].w
		mad oD1.xyzw, R_TEMP.w, c[C_CONST0].y, c[C_CONST0].y

		; rotate light into tangent space
		dp3 R_TEMP1.x, R_TEMP, R_BINORMAL_S
		dp3 R_TEMP1.y, R_TEMP, R_BINORMAL_T
		dp3 R_TEMP1.z, R_TEMP, R_WORLD_NORMAL

		; calculate light volume texture coordinates by scaling
		mad oT1, R_TEMP1, c[MIN_CONST+1].xxxz, c[MIN_CONST+1].yyyw

		; calculate projection map coordinates
		dp4 oT2.x, R_WORLD_POS, c[MIN_CONST+3]
		dp4 oT2.y, R_WORLD_POS, c[MIN_CONST+4]
		dp4 oT2.z, R_WORLD_POS, c[MIN_CONST+5]
		dp4 oT2.w, R_WORLD_POS, c[MIN_CONST+6]
	</vertexshader>

	<vertexshader name="vs1_3lights_bump_genbinormals" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"

		#define MIN_CONST		C_LIGHT_DIRECTIONAL0_COLOR
		#define R_WORLD_NORMAL  r11

		; project the position into screen space		
		POS_PROJECT(oPos)
		dp4 R_TEMP.z, R_WORLD_POS, c[C_WORLD_PROJ_M3]
		FOG(R_TEMP.z, R_WORLD_POS, R_TEMP1)
		
		; transform texture coordinates
		dp4 oT0.x, R_WORLD_POS, c[C_CUSTOM_MIN+0].xzyw
		dp4 oT0.y, R_WORLD_POS, c[C_CUSTOM_MIN+1].xzyw
		mov oT0.zw, c[C_CONST0].xz

		// transform normal and binormals to world space
		dp3 R_WORLD_NORMAL.x, R_NORMAL, c[C_OBJ_WORLD_M0]
		dp3 R_WORLD_NORMAL.y, R_NORMAL, c[C_OBJ_WORLD_M1]
		dp3 R_WORLD_NORMAL.z, R_NORMAL, c[C_OBJ_WORLD_M2]

		;NOTE: we rely on the fact that the object is world axis aligned
		; calculate normalized worldspace S = (1 - n.x*n.x, -n.x*n.y, -n.x*n.z)/sqrt(1 - n.x*n.x)
		mad R_BINORMAL_S.xyz, -R_WORLD_NORMAL.xxx, R_WORLD_NORMAL.xyz, c[C_CONST0].zxx
		rsq R_TEMP1.x, R_BINORMAL_S.x
		mul R_BINORMAL_S.xyz, R_BINORMAL_S.xyz, R_TEMP1.x
		; calculate normalized worldspace T = (-n.z*n.x, -n.z*n.y, 1 - n.z*n.z)/sqrt(1 - n.z*n.z)
		mad R_BINORMAL_T.xyz, -R_WORLD_NORMAL.zzz, R_WORLD_NORMAL.xyz, c[C_CONST0].xxz
		rsq R_TEMP1.x, R_BINORMAL_T.z
		mul R_BINORMAL_T.xyz, R_BINORMAL_T.xyz, R_TEMP1.x

		// accumulate static and ambient light in oD0
		LIGHT_AMBIENT(R_TEMP, R_WORLD_NORMAL, c[C_LIGHT_AMBIENT_COLOR0], c[C_LIGHT_AMBIENT_COLOR1], R_TEMP1)
		add R_TEMP.xyz, R_TEMP.xyz, R_STATIC_DIFFUSE_LIGHTING.xyz
		mul oD0.xyz, R_TEMP.xyz, c[C_LIGHT_AMBIENT_COLOR0].www

		//////////////////////////////// light 1 ////////////////////////////////////////
		; calculate light space coordinates = (world_pos - light_pos) / (radius)
		mad R_TEMP, R_WORLD_POS, c[MIN_CONST+0].w, -c[MIN_CONST+0].xyz

		; rotate light into tangent space
		dp3 R_TEMP1.x, R_TEMP, R_BINORMAL_S
		dp3 R_TEMP1.y, R_TEMP, R_BINORMAL_T
		dp3 R_TEMP1.z, R_TEMP, R_WORLD_NORMAL

		; calculate light volume texture coordinates by scaling
		mad oT1, R_TEMP1, c[MIN_CONST+1].xxxz, c[MIN_CONST+1].yyyw


		//////////////////////////////// light 2 ////////////////////////////////////////
		; calculate light space coordinates = (world_pos - light_pos) / (radius)
		mad R_TEMP, R_WORLD_POS, c[MIN_CONST+2].w, -c[MIN_CONST+2].xyz

		; rotate light into tangent space
		dp3 R_TEMP1.x, R_TEMP, R_BINORMAL_S
		dp3 R_TEMP1.y, R_TEMP, R_BINORMAL_T
		dp3 R_TEMP1.z, R_TEMP, R_WORLD_NORMAL
							
		; calculate light volume texture coordinates by scaling
		mad oT2, R_TEMP1, c[MIN_CONST+3].xxxz, c[MIN_CONST+3].yyyw


		//////////////////////////////// light 3 ////////////////////////////////////////
		; calculate light space coordinates = (world_pos - light_pos) / (radius)
		mad R_TEMP, R_WORLD_POS, c[MIN_CONST+4].w, -c[MIN_CONST+4].xyz

		; rotate light into tangent space
		dp3 R_TEMP1.x, R_TEMP, R_BINORMAL_S
		dp3 R_TEMP1.y, R_TEMP, R_BINORMAL_T
		dp3 R_TEMP1.z, R_TEMP, R_WORLD_NORMAL
								
		; calculate light volume texture coordinates by scaling
		mad oT3, R_TEMP1, c[MIN_CONST+5].xxxz, c[MIN_CONST+5].yyyw
	</vertexshader>

	<vertexshader name="vs1_spotlight_bump_genbinormals" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"

		#define MIN_CONST		C_LIGHT_DIRECTIONAL0_COLOR
		#define R_WORLD_NORMAL  r11

		; project the position into screen space		
		POS_PROJECT(oPos)
		dp4 R_TEMP.z, R_WORLD_POS, c[C_WORLD_PROJ_M3]
		FOG(R_TEMP.z, R_WORLD_POS, R_TEMP1)
		
		; transform texture coordinates
		dp4 oT0.x, R_WORLD_POS, c[C_CUSTOM_MIN+0].xzyw
		dp4 oT0.y, R_WORLD_POS, c[C_CUSTOM_MIN+1].xzyw
		mov oT0.zw, c[C_CONST0].xz		

		// transform normal and binormals to world space
		dp3 R_WORLD_NORMAL.x, R_NORMAL, c[C_OBJ_WORLD_M0]
		dp3 R_WORLD_NORMAL.y, R_NORMAL, c[C_OBJ_WORLD_M1]
		dp3 R_WORLD_NORMAL.z, R_NORMAL, c[C_OBJ_WORLD_M2]

		;NOTE: we rely on the fact that the terrain is world axis aligned
		; calculate normalized worldspace S = (1 - n.x*n.x, -n.x*n.y, -n.x*n.z)/sqrt(1 - n.x*n.x)
		mad R_BINORMAL_S.xyz, -R_WORLD_NORMAL.xxx, R_WORLD_NORMAL.xyz, c[C_CONST0].zxx
		rsq R_TEMP1.x, R_BINORMAL_S.x
		mul R_BINORMAL_S.xyz, R_BINORMAL_S.xyz, R_TEMP1.x
		; calculate normalized worldspace T = (-n.z*n.x, -n.z*n.y, 1 - n.z*n.z)/sqrt(1 - n.z*n.z)
		mad R_BINORMAL_T.xyz, -R_WORLD_NORMAL.zzz, R_WORLD_NORMAL.xyz, c[C_CONST0].xxz
		rsq R_TEMP1.x, R_BINORMAL_T.z
		mul R_BINORMAL_T.xyz, R_BINORMAL_T.xyz, R_TEMP1.x

		// accumulate static and ambient light in oD0
		LIGHT_AMBIENT(R_TEMP, R_WORLD_NORMAL, c[C_LIGHT_AMBIENT_COLOR0], c[C_LIGHT_AMBIENT_COLOR1], R_TEMP1)
		add R_TEMP.xyz, R_TEMP.xyz, R_STATIC_DIFFUSE_LIGHTING.xyz
		mul oD0.xyz, R_TEMP.xyz, c[C_LIGHT_AMBIENT_COLOR0].www

		; calculate light space coordinates = (world_pos - light_pos) / (radius)
		mad R_TEMP, R_WORLD_POS, c[MIN_CONST+0].w, -c[MIN_CONST+0].xyz
		dp3 R_TEMP.w, R_TEMP, c[MIN_CONST+2]
		mul R_TEMP.w, R_TEMP.w, c[MIN_CONST+2].w
		mad oD1.xyzw, R_TEMP.w, c[C_CONST0].y, c[C_CONST0].y

		; rotate light into tangent space
		dp3 R_TEMP1.x, R_TEMP, R_BINORMAL_S
		dp3 R_TEMP1.y, R_TEMP, R_BINORMAL_T
		dp3 R_TEMP1.z, R_TEMP, R_WORLD_NORMAL

		; calculate light volume texture coordinates by scaling
		mad oT1, R_TEMP1, c[MIN_CONST+1].xxxz, c[MIN_CONST+1].yyyw

		; calculate projection map coordinates
		dp4 oT2.x, R_WORLD_POS, c[MIN_CONST+3]
		dp4 oT2.y, R_WORLD_POS, c[MIN_CONST+4]
		dp4 oT2.z, R_WORLD_POS, c[MIN_CONST+5]
		dp4 oT2.w, R_WORLD_POS, c[MIN_CONST+6]
	</vertexshader>

	<vertexshader name="vs1_spotlight" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"

		#define MIN_CONST		C_LIGHT_DIRECTIONAL0_COLOR
		#define R_WORLD_NORMAL  r11

		; project the position into screen space		
		POS_PROJECT(oPos)
		dp4 R_TEMP.z, R_WORLD_POS, c[C_WORLD_PROJ_M3]
		FOG(R_TEMP.z, R_WORLD_POS, R_TEMP1)
		
		// transform normal and binormals to world space
		dp3 R_WORLD_NORMAL.x, R_NORMAL, c[C_OBJ_WORLD_M0]
		dp3 R_WORLD_NORMAL.y, R_NORMAL, c[C_OBJ_WORLD_M1]
		dp3 R_WORLD_NORMAL.z, R_NORMAL, c[C_OBJ_WORLD_M2]

		mov oT0.xyz, R_WORLD_NORMAL
		mov oT0.w, c[C_CONST0].z

		// accumulate static and ambient light in oD1
		LIGHT_AMBIENT(R_TEMP, R_WORLD_NORMAL, c[C_LIGHT_AMBIENT_COLOR0], c[C_LIGHT_AMBIENT_COLOR1], R_TEMP1)
		add R_TEMP.xyz, R_TEMP.xyz, R_STATIC_DIFFUSE_LIGHTING.xyz
		mul oD0.xyz, R_TEMP.xyz, c[C_LIGHT_AMBIENT_COLOR0].www

		; calculate light space coordinates = (world_pos - light_pos) / (radius)
		mad R_TEMP, R_WORLD_POS, c[MIN_CONST+0].w, -c[MIN_CONST+0].xyz
		dp3 R_TEMP.w, R_TEMP, c[MIN_CONST+2]
		mul R_TEMP.w, R_TEMP.w, c[MIN_CONST+2].w
		mad oD1.xyzw, R_TEMP.w, c[C_CONST0].y, c[C_CONST0].y


		; calculate light volume texture coordinates by scaling
		mad oT1, R_TEMP, c[MIN_CONST+1].xxxz, c[MIN_CONST+1].yyyw

		; calculate projection map coordinates
		dp4 oT2.x, R_WORLD_POS, c[MIN_CONST+3]
		dp4 oT2.y, R_WORLD_POS, c[MIN_CONST+4]
		dp4 oT2.z, R_WORLD_POS, c[MIN_CONST+5]
		dp4 oT2.w, R_WORLD_POS, c[MIN_CONST+6]
	</vertexshader>


	<vertexshader name="vs1_3lights" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"

		#define MIN_CONST		C_LIGHT_DIRECTIONAL0_COLOR
		#define R_WORLD_NORMAL  r11

		; project the position into screen space		
		POS_PROJECT(oPos)
		dp4 R_TEMP.z, R_WORLD_POS, c[C_WORLD_PROJ_M3]
		FOG(R_TEMP.z, R_WORLD_POS, R_TEMP1)
		
		// transform normal and binormals to world space
		dp3 R_WORLD_NORMAL.x, R_NORMAL, c[C_OBJ_WORLD_M0]
		dp3 R_WORLD_NORMAL.y, R_NORMAL, c[C_OBJ_WORLD_M1]
		dp3 R_WORLD_NORMAL.z, R_NORMAL, c[C_OBJ_WORLD_M2]

		mov oT0.xyz, R_WORLD_NORMAL
		mov oT0.w, c[C_CONST0].z

		// accumulate static and ambient light in oD1
		LIGHT_AMBIENT(R_TEMP, R_WORLD_NORMAL, c[C_LIGHT_AMBIENT_COLOR0], c[C_LIGHT_AMBIENT_COLOR1], R_TEMP1)
		add R_TEMP.xyz, R_TEMP.xyz, R_STATIC_DIFFUSE_LIGHTING.xyz
		mul oD0.xyz, R_TEMP.xyz, c[C_LIGHT_AMBIENT_COLOR0].www

		//////////////////////////////// light 1 ////////////////////////////////////////
		; calculate light space coordinates = (world_pos - light_pos) / (radius)
		mad R_TEMP, R_WORLD_POS, c[MIN_CONST+0].w, -c[MIN_CONST+0].xyz
		; calculate light volume texture coordinates by scaling
		mad oT1, R_TEMP, c[MIN_CONST+1].xxxz, c[MIN_CONST+1].yyyw

		//////////////////////////////// light 2 ////////////////////////////////////////
		; calculate light space coordinates = (world_pos - light_pos) / (radius)
		mad R_TEMP, R_WORLD_POS, c[MIN_CONST+2].w, -c[MIN_CONST+2].xyz
		; calculate light volume texture coordinates by scaling
		mad oT2, R_TEMP, c[MIN_CONST+3].xxxz, c[MIN_CONST+3].yyyw

		//////////////////////////////// light 3 ////////////////////////////////////////
		; calculate light space coordinates = (world_pos - light_pos) / (radius)
		mad R_TEMP, R_WORLD_POS, c[MIN_CONST+4].w, -c[MIN_CONST+4].xyz
		; calculate light volume texture coordinates by scaling
		mad oT3, R_TEMP, c[MIN_CONST+5].xxxz, c[MIN_CONST+5].yyyw
	</vertexshader>


	<pixelshader name="ps1_1light" target="ps_1_1">
		// c0 -> light 0 color
		// v0.rgb -> vertex lighting
		
		def c7, 1.0, 1.0, 1.0, 1.0

		tex t0	// normal map
		tex t1	// light map

		; light 0: r0.rgb = (N dot -L0) *L0.atten*L0.color + vertexlighting
		dp3_sat r0, t0_bx2, t1_bx2
		mul_sat r0.a, r0.a, t1.a
		mad_sat r0.rgb, r0.a, c0, v0
		; write 1 to output
		+mov r0.a, c7.a
	</pixelshader>

	<pixelshader name="ps1_2lights" target="ps_1_1">
		// c0 -> light 0 color
		// c1 -> light 1 color
		// v0.rgb -> vertex lighting

		def c7, 1.0, 1.0, 1.0, 1.0

		tex t0	// normal map
		tex t1	// light map
		tex t2  // light map
		
		; light 0: r0.rgb = (N dot -L0) *L0.atten*L0.color + vertexlighting
		dp3_sat r0, t0_bx2, t1_bx2
			; light 1: r0.rgb += (N dot -L1) *L1.atten*L1.color
			dp3_sat r1.rgb, t0_bx2, t2_bx2
		+mul_sat r0.a, r0.a, t1.a
		mad_sat r0.rgb, r0.a, c0, v0
			+mul_sat r0.a, r1.b, t2.a
			mad_sat r0.rgb, r0.a, c1, r0
		; write 1 to output
		+mov r0.a, c7.a
	</pixelshader>

	<pixelshader name="ps1_3lights" target="ps_1_1">
		// c0 -> light 0 color
		// c1 -> light 1 color
		// c2 -> light 2 color
		// v0.rgb -> vertex lighting

		def c7, 1.0, 1.0, 1.0, 1.0

		tex t0	// normal map
		tex t1	// light map
		tex t2  // light map
		tex t3	// light map

		; light 0: r0.rgb = (N dot -L0) *L0.atten*L0.color + vertexlighting
		dp3_sat r0, t0_bx2, t1_bx2
			; light 1: r1.rgb += (N dot -L1) *L1.atten*L1.color
			dp3_sat r1.rgb, t0_bx2, t2_bx2
		+mul_sat r0.a, r0.a, t1.a
		mad_sat r0.rgb, r0.a, c0, v0
			+mul_sat r0.a, r1.b, t2.a
		; light 2: r0.rgb += (N dot -L2) *L2.atten*L2.color
		dp3_sat r1.rgb, t0_bx2, t3_bx2
			mad_sat r0.rgb, r0.a, c1, r0
		+mul_sat r1.a, r1.b, t3.a
		mad_sat r0.rgb, r1.a, c2, r0
		+mov r0.a, c7.a
	</pixelshader>

	<pixelshader name="ps1_spotlight" target="ps_1_1">
		// c0 -> light 0 color
		// c0.a -> whether or not spot is bidirectional
		// v0.rgb -> vertex lighting
		// v1.rgb -> back face attenuation

		def c7, 0.0f, 0.0f, 0.0f, 1.0f

		tex t0	// normal map
		tex t1	// light map
		tex t2	// projection map
				
		; light 0: r0.rgb = (N dot -L0)*L0.atten*backface*L0.proj*L0.color + vertexlighting
		dp3_sat r0.rgb, t0_bx2, t1_bx2
		+mov r0.a, v1.b					; move back face atten into r0 to use in conditional
		mul r1.rgb, c0, t2
		+cnd r0.a, r0.a, c7.a, c0.a		; r0.a = r0.a > 0.5 ? 1 : bidirectional
		mul r1.rgb, r1, r0
		+mul r0.a, r0.a, t1.a

		mad_sat r0.rgb, r0.a, r1, v0
		; write 1 to output
		+mov r0.a, c7.a
	</pixelshader>

	<pipeline id="1">
		<!-- ***************** opaque no bump map ************************* -->
		<state id="0">
			<pass transform="normals" lighting="none">
				<vertexshader use="vs1_3lights"/>
				<pixelshader use="ps1_3lights"/>
			</pass>
		</state>
		<state id="1">
			<pass transform="normals" lighting="none">
				<vertexshader use="vs1_3lights"/>
				<pixelshader use="ps1_2lights"/>
			</pass>
		</state>
		<state id="2">
			<pass transform="normals" lighting="none">
				<vertexshader use="vs1_3lights"/>
				<pixelshader use="ps1_1light"/>
			</pass>
		</state>

		<!-- ***************** opaque spotlight/projection no bump map ************************* -->
		<state id="3">
			<pass transform="normals" lighting="none">
				<vertexshader use="vs1_3lights"/>
				<pixelshader use="ps1_3lights"/>
			</pass>
			<pass transform="normals" lighting="none">
				<vertexshader use="vs1_spotlight"/>
				<pixelshader use="ps1_spotlight"/>
			</pass>
		</state>
		<state id="4">
			<pass transform="normals" lighting="none">
				<vertexshader use="vs1_3lights"/>
				<pixelshader use="ps1_2lights"/>
			</pass>
			<pass transform="normals" lighting="none">
				<vertexshader use="vs1_spotlight"/>
				<pixelshader use="ps1_spotlight"/>
			</pass>
		</state>
		<state id="5">
			<pass transform="normals" lighting="none">
				<vertexshader use="vs1_3lights"/>
				<pixelshader use="ps1_1light"/>
			</pass>
			<pass transform="normals" lighting="none">
				<vertexshader use="vs1_spotlight"/>
				<pixelshader use="ps1_spotlight"/>
			</pass>
		</state>

		<!-- ***************** opaque with bump map ************************* -->
		<state id="6">
			<pass transform="binormals" lighting="none">
				<vertexshader use="vs1_3lights_bump"/>
				<pixelshader use="ps1_3lights"/>
			</pass>
		</state>
		<state id="7">
			<pass transform="binormals" lighting="none">
				<vertexshader use="vs1_3lights_bump"/>
				<pixelshader use="ps1_2lights"/>
			</pass>
		</state>
		<state id="8">
			<pass transform="binormals" lighting="none">
				<vertexshader use="vs1_3lights_bump"/>
				<pixelshader use="ps1_1light"/>
			</pass>
		</state>

		<!-- ***************** opaque spotlight/projection no bump map ************************* -->
		<state id="9">
			<pass transform="binormals" lighting="none">
				<vertexshader use="vs1_3lights_bump"/>
				<pixelshader use="ps1_3lights"/>
			</pass>
			<pass transform="binormals" lighting="none">
				<vertexshader use="vs1_spotlight_bump"/>
				<pixelshader use="ps1_spotlight"/>
			</pass>
		</state>
		<state id="10">
			<pass transform="binormals" lighting="none">
				<vertexshader use="vs1_3lights_bump"/>
				<pixelshader use="ps1_2lights"/>
			</pass>
			<pass transform="binormals" lighting="none">
				<vertexshader use="vs1_spotlight_bump"/>
				<pixelshader use="ps1_spotlight"/>
			</pass>
		</state>
		<state id="11">
			<pass transform="binormals" lighting="none">
				<vertexshader use="vs1_3lights_bump"/>
				<pixelshader use="ps1_1light"/>
			</pass>
			<pass transform="binormals" lighting="none">
				<vertexshader use="vs1_spotlight_bump"/>
				<pixelshader use="ps1_spotlight"/>
			</pass>
		</state>

		<!-- ***************** opaque with bump map (generate binormals) ************************* -->
		<state id="12">
			<pass transform="normals" lighting="none">
				<vertexshader use="vs1_3lights_bump_genbinormals"/>
				<pixelshader use="ps1_3lights"/>
			</pass>
		</state>
		<state id="13">
			<pass transform="normals" lighting="none">
				<vertexshader use="vs1_3lights_bump_genbinormals"/>
				<pixelshader use="ps1_2lights"/>
			</pass>
		</state>
		<state id="14">
			<pass transform="normals" lighting="none">
				<vertexshader use="vs1_3lights_bump_genbinormals"/>
				<pixelshader use="ps1_1light"/>
			</pass>
		</state>

		<!-- ***************** opaque spotlight/projection no bump map (generate binormals) ************************* -->
		<state id="15">
			<pass transform="normals" lighting="none">
				<vertexshader use="vs1_3lights_bump_genbinormals"/>
				<pixelshader use="ps1_3lights"/>
			</pass>
			<pass transform="normals" lighting="none">
				<vertexshader use="vs1_spotlight_bump_genbinormals"/>
				<pixelshader use="ps1_spotlight"/>
			</pass>
		</state>
		<state id="16">
			<pass transform="normals" lighting="none">
				<vertexshader use="vs1_3lights_bump_genbinormals"/>
				<pixelshader use="ps1_2lights"/>
			</pass>
			<pass transform="normals" lighting="none">
				<vertexshader use="vs1_spotlight_bump_genbinormals"/>
				<pixelshader use="ps1_spotlight"/>
			</pass>
		</state>
		<state id="17">
			<pass transform="normals" lighting="none">
				<vertexshader use="vs1_3lights_bump_genbinormals"/>
				<pixelshader use="ps1_1light"/>
			</pass>
			<pass transform="normals" lighting="none">
				<vertexshader use="vs1_spotlight_bump_genbinormals"/>
				<pixelshader use="ps1_spotlight"/>
			</pass>
		</state>
</pipeline>
</shader>
