<?xml version="1.0" encoding="utf-8" ?>
<shader rendertype="normalmapadder" skinned="no" debuginfo="no">
	<pipeline id="1">
		<state id="0">
			<pass transform="position" lighting="none">
				<vertexshader target="vs_1_1">
				#include "pcRedVertexShaderConstants.h"
				#include "pcRedVertexShaderMacros.h"

				; project the position
				POS_PROJECT(oPos)

				; decompress texcoords
				mul R_TEMP, V_TEXCOORDS, c[C_NORMALTEX_DECOMPRESS].zzzw
				
				; transform texture coordinates
				dp4 oT0.x, R_TEMP, c[C_CUSTOM_MIN+0]
				dp4 oT0.y, R_TEMP, c[C_CUSTOM_MIN+1]
				mov oT0.zw, c[C_CONST0].xz		

				; transform 2nd texture coordinates
				dp4 oT1.x, R_TEMP, c[C_CUSTOM_MIN+2]
				dp4 oT1.y, R_TEMP, c[C_CUSTOM_MIN+3]
				mov oT1.zw, c[C_CONST0].xz	
				</vertexshader>
				
				<pixelshader target="ps_1_1">
				def c0, 1.0, 1.0, 0.0, 1.0
				def c1, 0.0, 0.0, 1.0, 0.0
				def c2, 0.0, 0.0, 0.0, 1.0
				
				tex t0
				tex t1
		
				; blend the two normals together
				lrp r0, c3.a, t1_bx2, t0_bx2		
				
				; normalize the average normal
				; n' = [(3 - n.n) / 2 ] * n
				dp3_d2 r1.rgb, r0, r0
				mad r0.rgb, -r0, r1_bias, r0
				
				; convert the normalized vector back to bx2 format
				add_d2 r0, r0, c2.a

				; swizzle the normal
//				mad r0.rgb, c0, r1, c1
//				+ mov r0.a, r1.b		
				</pixelshader>			
			</pass>
		</state>
		
		<state id="1">
			<pass transform="binormals" lighting="none">
				<vertexshader target="vs_1_1">
				// Constants
				// 0-2	->	Object to World Matrix
				// 3	->	constant[0.0 0.5 -0.5 0.0]			
				
				#include "pcRedVertexShaderConstants.h"
				#include "pcRedVertexShaderMacros.h"

				; project the position
				POS_PROJECT(R_TEMP)
				mov oPos, R_TEMP

				; decompress texcoords
				mul oT0, V_TEXCOORDS, c[C_NORMALTEX_DECOMPRESS].zzzw

				; transform binormals to world space
				; write oT1.xyz = (0.5*S.x, 0.5*T.x, 0.5), oT2.xyz = (0.5*S.y, 0.5*T.y, 0.5)
				; to transform bump map to world space
				dp3 R_TEMP.x, c[C_OBJ_WORLD_M0], R_BINORMAL_S
				dp3 R_TEMP.y, c[C_OBJ_WORLD_M0], R_BINORMAL_T
				mov R_TEMP.z, c[C_CONST0].y
				dp3 R_TEMP1.x, c[C_OBJ_WORLD_M2], R_BINORMAL_S
				dp3 R_TEMP1.y, c[C_OBJ_WORLD_M2], R_BINORMAL_T
				mov R_TEMP1.z, c[C_CONST0].y
				
				mul oT1.xyz, R_TEMP.xyz, c[C_CONST0].yyy
				mov oT1.w, c[C_CONST0].z
				mul oT2.xyz, R_TEMP1.xyz, c[C_CONST0].yyy
				mov oT2.w, c[C_CONST0].z
			
				; copy alpha from vertex
				mov oD0.w, R_MATERIAL_COLOR.w
				</vertexshader>
				
				<pixelshader target="ps_1_1">
				// t0	->	normal map to add to t1 (must have z == 1)
				// t1	->	base normal map (must have b == 1 and a == z)
				// t2	->	[S.x T.x translation]
				// t3	->	[S.y T.y translation]
								
				def c0, 1, 0, 0, 0
				def c1, 0, 1, 0, 0
				def c2, 0, 0, 1, 0
				def c3, 1.0, 1.0, 0.0, 1.0
				def c4, 0.0, 0.0, 1.0, 0.0

				tex t0
				texm3x2pad  t1, t0_bx2
				texm3x2tex  t2, t0_bx2                           

				mov r0.rgb, t2
				+mul_sat r0.a, v0.a, t0.a					
				</pixelshader>			
			</pass>
		</state>
		
	</pipeline>
</shader>