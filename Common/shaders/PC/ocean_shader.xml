<?xml version="1.0" encoding="utf-8" ?>
<shader rendertype="ocean" skinned="no" debuginfo="no">
	<vertexshader name="vs1_far" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"
		
		; decompress texcoords
		mul R_TEMP, V_TEXCOORDS, c[C_NORMALTEX_DECOMPRESS].zzzw

		; transform texture coordinates
		dp4 oT0.x, R_TEMP, c[C_CUSTOM_MIN+0]
		dp4 oT0.y, R_TEMP, c[C_CUSTOM_MIN+1]
		mov oT0.zw, c[C_CONST0].xz

		; transform texture coordinates
		dp4 oT1.x, R_TEMP, c[C_CUSTOM_MIN+0]
		dp4 oT1.y, R_TEMP, c[C_CUSTOM_MIN+1]
		mov oT1.zw, c[C_CONST0].xz
					
		; calculate world normal
		dp3 oT2.x, R_NORMAL, c[C_OBJ_WORLD_M0]
		dp3 oT2.y, R_NORMAL, c[C_OBJ_WORLD_M1]
		dp3 oT2.z, R_NORMAL, c[C_OBJ_WORLD_M2]
		mov oT2.w, c[C_CONST0].z

		; project the position into screen space		
		POS_PROJECT(oPos)
		
		; output color 
		mov oD0, R_MATERIAL_COLOR

		; output fog value in oFog
		dp4 R_TEMP.z, R_WORLD_POS, c[C_WORLD_PROJ_M3]
		FOG(R_TEMP.z, R_WORLD_POS, R_TEMP1)
	</vertexshader>

	<vertexshader name="vs1_near" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"

		; decompress texcoords
		mul R_TEMP, V_TEXCOORDS, c[C_NORMALTEX_DECOMPRESS].zzzw

		; transform texture coordinates
		dp4 oT0.x, R_TEMP, c[C_CUSTOM_MIN+0]
		dp4 oT0.y, R_TEMP, c[C_CUSTOM_MIN+1]
		mov oT0.zw, c[C_CONST0].xz

		; transform texture coordinates
		dp4 oT1.x, R_TEMP, c[C_CUSTOM_MIN+0]
		dp4 oT1.y, R_TEMP, c[C_CUSTOM_MIN+1]
		mov oT1.zw, c[C_CONST0].xz
					
		; calculate world normal
		dp3 oT2.x, R_NORMAL, c[C_OBJ_WORLD_M0]
		dp3 oT2.y, R_NORMAL, c[C_OBJ_WORLD_M1]
		dp3 oT2.z, R_NORMAL, c[C_OBJ_WORLD_M2]
		mov oT2.w, c[C_CONST0].z

		; project the position into screen space		
		POS_PROJECT(oPos)
		
		; calculate near scene fade factor in R_TEMP.w
		NEARSCENEFADE(R_TEMP)
		FOG(R_TEMP.z, R_WORLD_POS, R_TEMP1)
		; output color with lighting and near scene fade
		mov oD0.xyz, R_MATERIAL_COLOR.xyz
		; output fade factor * 0.25 + 0.5 to allow interpolation outside the range 0-1
		mad oD0.w, R_TEMP.w, c[C_CONST1].y, c[C_CONST1].z
	</vertexshader>


	<pixelshader name="ps1_far" target="ps_1_1">
		// oT0 -> base texture
		// oT1 -> foam map
		// oT2 -> normal (lookup into normalization cubemap)
		// c0 -> light vector
		// c1 -> light color
		// c2 -> ambient color
			
		tex t0	       	// base map
		tex t1			// foam map
		tex t2			// normalization cube map for the normal

		// compute r0 = (N.L) and foam level
		dp3_sat r0.rgb, t2_bx2, c0
		+mul r0.a, t1.a, v0.a

		// compute r1 = base*color	
		mul r1.rgb, t0, v0
		
		// compute light color + ambient		
		mad r0.rgb, r0, c1, c2
		
		// base material * lighting
		mul r0.rgb, r0, r1
		
		// lerp between base lighting and foam texture
		lrp r0.rgb, r0.a, t1, r0
	</pixelshader>

	<pixelshader name="ps1_near" target="ps_1_1">
		// oT0 -> base texture
		// oT1 -> foam map
		// oT2 -> normal (lookup into normalization cubemap)
		// c0 -> light vector
		// c1 -> light color
		// c2 -> ambient color
			
		tex t0	       	// base map
		tex t1			// foam map
		tex t2			// normalization cube map for the normal

		// compute r0 = (N.L) and foam level
		dp3_sat r0.rgb, t2_bx2, c0
		+mul r0.a, t1.a, v0.a

		// compute r1 = base*color	
		mul r1.rgb, t0, v0
		
		// compute light color + ambient		
		mad r0.rgb, r0, c1, c2
		
		// base material * lighting
		mul r0.rgb, r0, r1
		
		// lerp between base lighting and foam texture
		lrp r0.rgb, r0.a, t1, r0
		+mov_x4 r0.a, v0_bias.a		// near scene alpha is d4 + 1/2
	</pixelshader>

	<pipeline id="1">
		<state id="0">
			<pass transform="normals" lighting="none">
				<vertexshader use="vs1_far"/>
				<pixelshader use="ps1_far"/>
			</pass>
		</state>
		<state id="1">
			<pass transform="normals" lighting="none">
				<vertexshader use="vs1_near"/>
				<pixelshader use="ps1_near"/>
			</pass>
		</state>
	</pipeline>
</shader>