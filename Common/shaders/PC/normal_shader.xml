<?xml version="1.0" encoding="utf-8" ?>
<shader rendertype="normal" skinned="yes" debuginfo="no">
	<vertexshader name="vs1_far" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"

		; project the position into screen space		
		POS_PROJECT(oPos)
		
		; decompress texcoords
		mul R_TEMP, V_TEXCOORDS, c[C_NORMALTEX_DECOMPRESS].zzzw

		; transform texture coordinates
		dp4 oT0.x, R_TEMP, c[C_CUSTOM_MIN+1]
		dp4 oT0.y, R_TEMP, c[C_CUSTOM_MIN+2]
		mov oT0.zw, c[C_CONST0].xz

		; multiply lighting color with material
		mad R_TEMP, R_DIFFUSE_LIGHTING, c[C_CUSTOM_MIN+0].x, c[C_CUSTOM_MIN+0].y
		mul oD0, R_TEMP, R_MATERIAL_COLOR

		; output fog value in oFog
		dp4 R_TEMP.z, R_WORLD_POS, c[C_WORLD_PROJ_M3]
		FOG(R_TEMP.z, R_WORLD_POS, R_TEMP1)
	</vertexshader>
	
	<vertexshader name="vs_unlit_opaque" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"

		; project the position into screen space		
		POS_PROJECT(oPos)
		
		; decompress texcoords
		mul R_TEMP, V_TEXCOORDS, c[C_NORMALTEX_DECOMPRESS].zzzw

		; transform texture coordinates
		dp4 oT0.x, R_TEMP, c[C_CUSTOM_MIN+1]
		dp4 oT0.y, R_TEMP, c[C_CUSTOM_MIN+2]
		mov oT0.zw, c[C_CONST0].xz

		; transform detail texture coordinates
		dp4 oT1.x, R_TEMP, c[C_CUSTOM_MIN+3]
		dp4 oT1.y, R_TEMP, c[C_CUSTOM_MIN+4]
		mov oT1.zw, c[C_CONST0].xz

		; calculate near scene fade factor in R_TEMP.w
		NEARSCENEFADE(R_TEMP)
		FOG(R_TEMP.z, R_WORLD_POS, R_TEMP1)
		; multiply lighting color with material
		mad R_TEMP1, R_DIFFUSE_LIGHTING, c[C_CUSTOM_MIN+0].x, c[C_CUSTOM_MIN+0].y
		mul oD0.xyz, R_TEMP1.xyz, R_MATERIAL_COLOR.xyz
		; output fade factor * 0.25 + 0.5 to allow interpolation outside the range 0-1
		mad oD0.w, R_TEMP.w, c[C_CONST1].y, c[C_CONST1].z
	</vertexshader>

	<vertexshader name="vs_unlit_transparent" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"

		; project the position into screen space		
		POS_PROJECT(oPos)
		
		; decompress texcoords
		mul R_TEMP, V_TEXCOORDS, c[C_NORMALTEX_DECOMPRESS].zzzw

		; transform texture coordinates
		dp4 oT0.x, R_TEMP, c[C_CUSTOM_MIN+1]
		dp4 oT0.y, R_TEMP, c[C_CUSTOM_MIN+2]
		mov oT0.zw, c[C_CONST0].xz

		; transform detail texture coordinates
		dp4 oT1.x, R_TEMP, c[C_CUSTOM_MIN+3]
		dp4 oT1.y, R_TEMP, c[C_CUSTOM_MIN+4]
		mov oT1.zw, c[C_CONST0].xz

		; calculate near scene fade factor in R_TEMP.w
		NEARSCENEFADE(R_TEMP)
		FOG(R_TEMP.z, R_WORLD_POS, R_TEMP1)
		; clamp to [0.0,1.0] and square it to fade transparent objects faster
		max R_TEMP.w, R_TEMP.w, c[C_CONST0].x
		min R_TEMP.w, R_TEMP.w, c[C_CONST0].z
		mul R_TEMP.w, R_TEMP.w, R_TEMP.w
		mul oD0.w, R_MATERIAL_COLOR.w, R_TEMP.w

		; multiply lighting color with material
		mad R_TEMP, R_DIFFUSE_LIGHTING, c[C_CUSTOM_MIN+0].x, c[C_CUSTOM_MIN+0].y
		mul oD0.xyz, R_TEMP, R_MATERIAL_COLOR
	</vertexshader>	

	<vertexshader name="vs1_near_opaque" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"

		; project the position into screen space		
		POS_PROJECT(oPos)
		
		; decompress texcoords
		mul R_TEMP, V_TEXCOORDS, c[C_NORMALTEX_DECOMPRESS].zzzw

		; transform texture coordinates
		dp4 oT0.x, R_TEMP, c[C_CUSTOM_MIN+1]
		dp4 oT0.y, R_TEMP, c[C_CUSTOM_MIN+2]
		mov oT0.zw, c[C_CONST0].xz

		; transform detail texture coordinates
		dp4 oT1.x, R_TEMP, c[C_CUSTOM_MIN+3]
		dp4 oT1.y, R_TEMP, c[C_CUSTOM_MIN+4]
		mov oT1.zw, c[C_CONST0].xz

		; calculate near scene fade factor in R_TEMP.w
		NEARSCENEFADE(R_TEMP)
		FOG(R_TEMP.z, R_WORLD_POS, R_TEMP1)
		; multiply lighting color with material
		mad R_TEMP1, R_DIFFUSE_LIGHTING, c[C_CUSTOM_MIN+0].x, c[C_CUSTOM_MIN+0].y
		mul oD0.xyz, R_TEMP1.xyz, R_MATERIAL_COLOR.xyz
		; output fade factor * 0.25 + 0.5 to allow interpolation outside the range 0-1
		mad oD0.w, R_TEMP.w, c[C_CONST1].y, c[C_CONST1].z
	</vertexshader>

	<vertexshader name="vs1_near_opaque_shadow_projectedtex" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"

		; project the position into screen space		
		POS_PROJECT(oPos)
		
		; decompress texcoords
		mul R_TEMP, V_TEXCOORDS, c[C_NORMALTEX_DECOMPRESS].zzzw

		; transform texture coordinates
		dp4 oT0.x, R_TEMP, c[C_CUSTOM_MIN+1]
		dp4 oT0.y, R_TEMP, c[C_CUSTOM_MIN+2]
		mov oT0.zw, c[C_CONST0].xz

		; transform detail texture coordinates
		dp4 oT1.x, R_TEMP, c[C_CUSTOM_MIN+3]
		dp4 oT1.y, R_TEMP, c[C_CUSTOM_MIN+4]
		mov oT1.zw, c[C_CONST0].xz

		; projection texture coordinates
		dp4 oT2.x, R_WORLD_POS, c[C_LIGHT_PROJ_M0]
		dp4 oT2.y, R_WORLD_POS, c[C_LIGHT_PROJ_M1]
		dp4 oT2.z, R_WORLD_POS, c[C_LIGHT_PROJ_M2]
		dp4 oT2.w, R_WORLD_POS, c[C_LIGHT_PROJ_M3]
		mul R_TEMP.xyz, R_STATIC_DIFFUSE_LIGHTING.w, R_MATERIAL_COLOR.xyz
		mul R_TEMP.xyz, R_TEMP.xyz, c[C_HDR].zzz
		mul oD1.xyz, c[C_LIGHT_PROJ_COLOR].xyz, R_TEMP.xyz

		; transform shadow map coordinates
		dp4 oT3.x, R_WORLD_POS, c[C_SHADOWMAP_TRANSFORM_U]
		dp4 oT3.y, R_WORLD_POS, c[C_SHADOWMAP_TRANSFORM_V]
		dp4 oT3.w, R_WORLD_POS, c[C_SHADOWMAP_TRANSFORM_W]
		mov oT3.z, c[C_CONST0].x
		mov oD1.w, R_DIFFUSE_LIGHTING.w

		; calculate near scene fade factor in R_TEMP.w
		NEARSCENEFADE(R_TEMP)
		FOG(R_TEMP.z, R_WORLD_POS, R_TEMP1)

		mad R_TEMP1, R_DIFFUSE_LIGHTING, c[C_CUSTOM_MIN+0].x, c[C_CUSTOM_MIN+0].y
		mul oD0.xyz, R_TEMP1.xyz, R_MATERIAL_COLOR.xyz
		; output fade factor * 0.25 + 0.5 to allow interpolation outside the range 0-1
		mad oD0.w, R_TEMP.w, c[C_CONST1].y, c[C_CONST1].z
	</vertexshader>

	<vertexshader name="vs1_near_transparent_shadow_projectedtex" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"

		; project the position into screen space		
		POS_PROJECT(oPos)
		
		; decompress texcoords
		mul R_TEMP, V_TEXCOORDS, c[C_NORMALTEX_DECOMPRESS].zzzw

		; transform texture coordinates
		dp4 oT0.x, R_TEMP, c[C_CUSTOM_MIN+1]
		dp4 oT0.y, R_TEMP, c[C_CUSTOM_MIN+2]
//		mov oT0.zw, c[C_CONST0].xz

		; transform detail texture coordinates
		dp4 oT1.x, R_TEMP, c[C_CUSTOM_MIN+3]
		dp4 oT1.y, R_TEMP, c[C_CUSTOM_MIN+4]
//		mov oT1.zw, c[C_CONST0].xz

		; projection texture coordinates
		dp4 oT2.x, R_WORLD_POS, c[C_LIGHT_PROJ_M0]
		dp4 oT2.y, R_WORLD_POS, c[C_LIGHT_PROJ_M1]
		dp4 oT2.z, R_WORLD_POS, c[C_LIGHT_PROJ_M2]
		dp4 oT2.w, R_WORLD_POS, c[C_LIGHT_PROJ_M3]
		mul R_TEMP.xyz, R_STATIC_DIFFUSE_LIGHTING.w, R_MATERIAL_COLOR.xyz
		mul R_TEMP.xyz, R_TEMP.xyz, c[C_HDR].zzz
		mul oD1.xyz, c[C_LIGHT_PROJ_COLOR].xyz, R_TEMP.xyz

		; transform shadow map coordinates
		dp4 oT3.x, R_WORLD_POS, c[C_SHADOWMAP_TRANSFORM_U]
		dp4 oT3.y, R_WORLD_POS, c[C_SHADOWMAP_TRANSFORM_V]
		dp4 oT3.zw, R_WORLD_POS, c[C_SHADOWMAP_TRANSFORM_W]
		mov oD1.w, R_DIFFUSE_LIGHTING.w

		; calculate near scene fade factor in R_TEMP.w
		NEARSCENEFADE(R_TEMP)
		FOG(R_TEMP.z, R_WORLD_POS, R_TEMP1)
		; clamp to [0.0,1.0] and square it to fade transparent objects faster
		max R_TEMP.w, R_TEMP.w, c[C_CONST0].x
		min R_TEMP.w, R_TEMP.w, c[C_CONST0].z
		mul R_TEMP.w, R_TEMP.w, R_TEMP.w
		mul oD0.w, R_MATERIAL_COLOR.w, R_TEMP.w

		; multiply lighting color with material
		mad R_TEMP, R_DIFFUSE_LIGHTING, c[C_CUSTOM_MIN+0].x, c[C_CUSTOM_MIN+0].y
		mul oD0.xyz, R_TEMP, R_MATERIAL_COLOR
	</vertexshader>

	<pixelshader name="ps1_far" target="ps_1_1">
		tex t0	// diffuse map
		;v0.rgb = lighting
		;v0.a = material alpha

		mul r0, t0, v0
	</pixelshader>
	
	<pixelshader name="ps_unlit_opaque" target="ps_1_1">
		tex t0	// diffuse map
		tex t1	// detail map

		mul r0.rgb, t0, v0
		+lrp r0.a, c0.a, t0.a, c0.b 
		mul_x2 r0.rgb, r0, t1

		mad r1.rgb, r0, r0.a, r0
		mad r0.rgb, r1, r0.a, r0
		+mov_x4 r0.a,v0_bias.a		// near scene alpha is d4 + 1/2
	</pixelshader>
	
	<pixelshader name="ps_unlit_hardedged" target="ps_1_1">
		def c7, 0, 0, 0.5, -0.01		// 0, 0, 1-alpharef, 0
		tex t0	// diffuse map
		tex t1	// detail map
		mul r0.rgb, t0, v0
		+add r0.a,t0_bias.a,c7.b
		mul_x2 r0.rgb, r0, t1

		mad r1.rgb, r0, c0.a, r0
		mad r0.rgb, r1, c0.a, r0
		+cnd_x4 r0.a,r0.a,v0_bias.a,c7.a	// alpha test vs. alpharef; near scene alpha is d4 + 1/2		
	</pixelshader>		
	
	<pixelshader name="ps_unlit_transparent" target="ps_1_1">
		tex t0	// diffuse map
		tex t1	// detail map
		;v0.rgb = lighting
		;v0.a = material alpha * near scene fade factor d4+1/2

		mul r0, t0, v0
		mul_x2 r0.rgb, r0, t1

		mad r1.rgb, r0, c0.a, r0
		mad r0.rgb, r1, c0.a, r0
		;+mul r0.a,r0.a,v0.a	;this was setting r0.a to to.a * v0.a * v0.a
	</pixelshader>
	
	<pixelshader name="ps_unlit_transparent_hardedged" target="ps_1_1">
		def c7, 0, 0, 0.5, 0		// 0, 0, 1-alpharef, 0
		tex t0	// diffuse map
		tex t1	// detail map

		mul r1.rgb,t0.a,v0.a
		+add r0.a,t0_bias.a,c7.b
		mul r0.rgb,t0,v0
		+cnd r0.a,r0.a,r1.b,c7.a		// alpha test vs. alpharef
		mul_x2 r0.rgb, r0, t1
		
		mad r1.rgb, r0, c0.a, r0
		mad r0.rgb, r1, c0.a, r0
	</pixelshader>	
	
	<pixelshader name="ps1_near_opaque" target="ps_1_1">
		tex t0	// diffuse map
		tex t1	// detail map
		;v0.rgb = lighting
		;v0.a = near scene fade factor d4+1/2

		// r0 = main * lighting
		mul r0.rgb,t0,v0
		+mov_x4 r0.a,v0_bias.a		// near scene alpha is d4 + 1/2
		mul_x2 r0.rgb, r0, t1
	</pixelshader>

	<pixelshader name="ps1_near_hardedged" target="ps_1_1">
		def c0, 0, 0, 0.5, -0.01		// 0, 0, 1-alpharef, 0
		tex t0	// diffuse map
		tex t1	// detail map
		;v0.rgb = lighting
		;v0.a = near scene fade factor d4+1/2

		mul r0.rgb,t0,v0
		+add r0.a,t0_bias.a,c0.b
		mul_x2 r0.rgb, r0, t1
		+cnd_x4 r0.a,r0.a,v0_bias.a,c0.a	// alpha test vs. alpharef; near scene alpha is d4 + 1/2
	</pixelshader>

	<pixelshader name="ps1_near_transparent" target="ps_1_1">
		def c7, 0, 0, 0.5, 1.0		// 0, 0, 1-alpharef, 0
		tex t0	// diffuse map
		tex t1	// detail map
		;v0.rgb = lighting
		;v0.a = material alpha * near scene fade factor d4+1/2

		mul r0.rgb,t0,v0
		+lrp r0.a, c0.b, t0.a, c7.a
		mul_x2 r0.rgb, r0, t1
		+mul r0.a,r0.a,v0.a
	</pixelshader>

	<pixelshader name="ps1_near_transparent_hardedged" target="ps_1_1">
		def c7, 0, 0, 0.5, 0		// 0, 0, 1-alpharef, 0
		tex t0	// diffuse map
		tex t1	// detail map
		;v0.rgb = lighting
		;v0.a = material alpha * near scene fade factor d4+1/2

		mul r1.rgb,t0.a,v0.a
		+add r0.a,t0_bias.a,c7.b
		mul r0.rgb,t0,v0
		+cnd r0.a,r0.a,r1.b,c7.a		// alpha test vs. alpharef
		mul_x2 r0.rgb, r0, t1
	</pixelshader>

	<pixelshader name="ps1_near_opaque_projectedtex" target="ps_1_1">
		def c0, 0, 0, 0, 1
		tex t0	// diffuse map
		tex t1	// detail map
		tex t2  // projection tex
		;v0.rgb = lighting*material
		;v1.rgb = proj light atten * material color
		;v1.a = shadow light atten
		;v0.a = near scene fade factor d4+1/2
		;c1.rgb = proj light color

		mad r0.rgb,t2,v1,v0
		mul r0.rgb,r0,t0
		+mov_x4 r0.a,v0_bias.a		// near scene alpha is d4 + 1/2
		mul_x2 r0.rgb, r0, t1
	</pixelshader>

	<pixelshader name="ps1_near_hardedged_projectedtex" target="ps_1_1">
		def c0, 0, 0, 0.5, -0.01		// 0, 0, 1-alpharef, 0
		tex t0	// diffuse map
		tex t1	// detail map
		tex t2  // projection tex
		;v0.rgb = lighting*material
		;v1.rgb = proj light atten * material color
		;v1.a = shadow light atten
		;v0.a = near scene fade factor d4+1/2
		;c1.rgb = proj light color

		mad r0.rgb,t2,v1,v0
		+add r0.a,t0_bias.a,c0.b
		mul r0.rgb,r0,t0
		+cnd_x4 r0.a,r0.a,v0_bias.a,c0.a	// alpha test vs. alpharef; near scene alpha is d4 + 1/2
		mul_x2 r0.rgb, r0, t1
	</pixelshader>

	<pixelshader name="ps1_near_transparent_projectedtex" target="ps_1_1">
		def c7, 0, 0, 0.5, 1.0		// 0, 0, 1-alpharef, 0
		tex t0	// diffuse map
		tex t1	// detail map
		tex t2  // projection tex
		;v0.rgb = lighting*material
		;v1.rgb = proj light atten * material color
		;v1.a = shadow light atten
		;v0.a = near scene fade factor d4+1/2
		;c1.rgb = proj light color

		mad r0.rgb,t2,v1,v0
		+lrp r0.a, c0.b, t0.a, c7.a
		mul r0.rgb,r0,t0
		+mul r0.a,r0.a,v0.a
		mul_x2 r0.rgb, r0, t1
	</pixelshader>

	<pixelshader name="ps1_near_transparent_hardedged_projectedtex" target="ps_1_1">
		def c7, 0, 0, 0.5, 0		// 0, 0, 1-alpharef, 0
		tex t0	// diffuse map
		tex t1	// detail map
		tex t2  // projection tex
		;v0.rgb = lighting*material
		;v1.rgb = proj light atten * material color
		;v1.a = shadow light atten
		;v0.a = near scene fade factor d4+1/2
		;c1.rgb = proj light color


		mad r0.rgb,t2,v1,v0
		+mul r1.a,t0.a,v0.a
		mul r0.rgb,r0,t0
		+add r0.a,t0_bias.a,c7.b
		mul_x2 r0.rgb, r0, t1
		+cnd r0.a,r0.a,r1.a,c7.a		// alpha test vs. alpharef
	</pixelshader>

	<pixelshader name="ps1_near_opaque_shadow" target="ps_1_1">
		def c0, 0, 0, 0, 1
		tex t0	// diffuse map
		tex t1	// detail map
		tex t3	// shadow map
		;v0.rgb = lighting*material
		;v1.rgb = proj light atten * material color
		;v1.a = shadow light atten
		;v0.a = near scene fade factor d4+1/2
		;c1.rgb = proj light color

		mul r0.rgb,t0,v0
		+mul r0.a, v1.a, 1-t3.a
		mul r0.rgb, r0, 1-r0.a
		+mov_x4 r0.a,v0_bias.a		// near scene alpha is d4 + 1/2
		mul_x2 r0.rgb, r0, t1
	</pixelshader>

	<pixelshader name="ps1_near_opaque_hardedged_shadow" target="ps_1_1">
		def c0, 0, 0, 0.5, -0.01			// 0, 0, 1-alpharef, 0
		tex t0	// diffuse map
		tex t1	// detail map
		tex t3	// shadow map
		;v0.rgb = lighting*material
		;v1.rgb = proj light atten * material color
		;v1.a = shadow light atten
		;v0.a = near scene fade factor d4+1/2
		;c1.rgb = proj light color

		mul r0.rgb,t0,v0
		+mul r0.a, v1.a, 1-t3.a
		mul r0.rgb, r0, 1-r0.a
		+add r0.a,t0_bias.a,c0.b
		mul_x2 r0.rgb, r0, t1
		+cnd_x4 r0.a,r0.a,v0_bias.a,c0.a	// alpha test vs. alpharef; near scene alpha is d4 + 1/2
	</pixelshader>

	<pixelshader name="ps1_near_opaque_shadow_projectedtex" target="ps_1_1">
		def c0, 0, 0, 0, 1
		tex t0	// diffuse map
		tex t1	// detail map
		tex t2  // projection tex
		tex t3	// shadow map
		;v0.rgb = lighting*material
		;v1.rgb = proj light atten * material color
		;v1.a = shadow light atten
		;v0.a = near scene fade factor d4+1/2

		mul r0.rgb,t2,v1
		+lrp r1.a, c1.a, t3.a, c0.a
		mad r0.rgb,r0,r1.a,v0
		+mul_sat r0.a, v1.a, 1-t3.a	
		mul r0.rgb,r0,t0
		mul r0.rgb, r0, 1-r0.a
		+mov_x4 r0.a,v0_bias.a		// near scene alpha is d4 + 1/2
		mul_x2 r0.rgb, r0, t1

	</pixelshader>

	<pixelshader name="ps1_near_opaque_hardedged_shadow_projectedtex" target="ps_1_1">
		def c0, 0, 0, 0, 1
		def c7, 0, 0, 0.5, -0.01			// 0, 0, 1-alpharef, 0
		tex t0	// diffuse map
		tex t1	// detail map
		tex t2  // projection tex
		tex t3	// shadow map
		;v0.rgb = lighting*material
		;v1.rgb = proj light atten * material color
		;v1.a = shadow light atten
		;v0.a = near scene fade factor d4+1/2
		;c1.rgb = proj light color


		mul r0.rgb,t2,v1
		+lrp r1.a, c1.a, t3.a, c0.a
		mad r0.rgb,r0,r1.a,v0
		+mul_sat r0.a, v1.a, 1-t3.a	
		mul r0.rgb,r0,t0
		mul r0.rgb, r0, 1-r0.a
		+add r0.a,t0_bias.a,c7.b
		mul_x2 r0.rgb, r0, t1
		+cnd_x4 r0.a,r0.a,v0_bias.a,c7.a	// alpha test vs. alpharef; near scene alpha is d4 + 1/2
	</pixelshader>
	
	
	
	
	
	
	
	
	
	<pixelshader name="ps1_near_transparent_shadow" target="ps_1_1">
		def c7, 0, 0, 0.5, 1.0		// 0, 0, 1-alpharef, 0
		tex t0	// diffuse map
		tex t1	// detail map
		tex t3	// shadow map
		;v0.rgb = lighting*material
		;v0.a = material alpha * near scene fade factor d4+1/2
		;v1.rgb = proj light atten * material color
		;v1.a = shadow light atten
		;c1.rgb = proj light color

		mul r0.rgb,t0,v0
		+mul r0.a, v1.a, 1-t3.a
		mul r0.rgb, r0, 1-r0.a
		+lrp r0.a, c0.b, t0.a, c7.a
		mul_x2 r0.rgb, r0, t1
		+mul r0.a,r0.a,v0.a
	</pixelshader>

	<pixelshader name="ps1_near_transparent_hardedged_shadow" target="ps_1_1">
		def c7, 0, 0, 0.5, 0		// 0, 0, 1-alpharef, 0
		tex t0	// diffuse map
		tex t1	// detail map
		tex t3	// shadow map
		;v0.rgb = lighting*material
		;v0.a = material alpha * near scene fade factor d4+1/2
		;v1.rgb = proj light atten * material color
		;v1.a = shadow light atten
		;c1.rgb = proj light color

		mul r1.rgb,t0.a,v0.a
		+add r0.a,t0_bias.a,c7.b
		mul r0.rgb,t0,v0
		+mul r1.a, v1.a, 1-t3.a
		mul r0.rgb, r0, 1-r1.a
		+cnd r0.a,r0.a,r1.b,c7.a		// alpha test vs. alpharef
		mul_x2 r0.rgb, r0, t1
	</pixelshader>
	
	<pixelshader name="ps1_near_transparent_shadow_projectedtex" target="ps_1_1">
		def c7, 0, 0, 0.5, 1.0		// 0, 0, 1-alpharef, 0
		tex t0	// diffuse map
		tex t1	// detail map
		tex t2  // projection tex
		tex t3	// shadow map
		;v0.rgb = lighting*material
		;v0.a = material alpha * near scene fade factor d4+1/2
		;v1.rgb = proj light atten * material color
		;v1.a = shadow light atten
		;c1.rgb = proj light color

		mad r0.rgb,t2,v1,v0
		+lrp r0.a, c0.b, t0.a, c7.a
		mul r0.rgb,r0,t0
		+mul r1.a, v1.a, 1-t3.a
		mul r0.rgb, r0, 1-r1.a
		+mul r0.a,r0.a,v0.a
		mul_x2 r0.rgb, r0, t1
	</pixelshader>

	<pixelshader name="ps1_near_transparent_hardedged_shadow_projectedtex" target="ps_1_1">
		def c7, 0, 0, 0.5, 0		// 0, 0, 1-alpharef, 0
		tex t0	// diffuse map
		tex t1	// detail map
		tex t2  // projection tex
		tex t3	// shadow map
		;v0.rgb = lighting*material
		;v0.a = material alpha * near scene fade factor d4+1/2
		;v1.rgb = proj light atten * material color
		;v1.a = shadow light atten
		;c1.rgb = proj light color


		mad r0.rgb,t2,v1,v0
		+mul r1.a,t0.a,v0.a
		mul r0.rgb,r0,t0
		+mul r0.a, v1.a, 1-t3.a
		mul r0.rgb, r0, 1-r0.a	
		+add r0.a,t0_bias.a,c7.b
		mul_x2 r0.rgb, r0, t1
		+cnd r0.a,r0.a,r1.a,c7.a		// alpha test vs. alpharef
	</pixelshader>
	
	

	<pixelshader name="solid" target="ps_1_1">
		def c0, 0, 0, 0, 1
		mov r0, c0.a
	</pixelshader>

	<pixelshader name="lighting" target="ps_1_1">
		;v0.rgb = lighting *material
		mov r0.rgb, v0
		+mov_x4 r0.a,v0_bias.a		// near scene alpha is d4 + 1/2
	</pixelshader>	


	<pipeline id="1">
<!--	
		<state id="0">
			<pass transform="normals" lighting="diffuse">
				<vertexshader use="vs1_far"/>
				<pixelshader use="ps1_far"/>
			</pass>
		</state>
-->		
		<!-- unlit opaque -->	
		<state id="0">
			<pass transform="position" lighting="none">
				<vertexshader use="vs_unlit_opaque"/>
				<pixelshader use="ps_unlit_opaque"/>
			</pass>
		</state>		
		
		<state id="1">
			<pass transform="position" lighting="none">
				<vertexshader use="vs_unlit_opaque"/>
				<pixelshader use="ps_unlit_hardedged"/>
			</pass>
		</state>
		<!-- unlit transparent -->
		<state id="2">
			<pass transform="position" lighting="none">
				<vertexshader use="vs_unlit_transparent"/>
				<pixelshader use="ps_unlit_transparent"/>
			</pass>
		</state>
		<state id="3">
			<pass transform="position" lighting="none">
				<vertexshader use="vs_unlit_transparent"/>
				<pixelshader use="ps_unlit_transparent_hardedged"/>
			</pass>
		</state>
		
		
		<state id="4">
			<pass transform="normals" lighting="diffuse">
				<vertexshader use="vs1_near_opaque"/>
				<pixelshader use="ps1_near_opaque"/>
			</pass>
		</state>
		<state id="5">
			<pass transform="normals" lighting="diffuse">
				<vertexshader use="vs1_near_opaque"/>
				<pixelshader use="ps1_near_hardedged"/>
			</pass>
		</state>
		<state id="6">
			<pass transform="normals" lighting="diffuse">
				<vertexshader use="vs1_near_transparent_shadow_projectedtex"/>
				<pixelshader use="ps1_near_transparent"/>
			</pass>
		</state>
		<state id="7">
			<pass transform="normals" lighting="diffuse">
				<vertexshader use="vs1_near_transparent_shadow_projectedtex"/>
				<pixelshader use="ps1_near_transparent_hardedged"/>
			</pass>
		</state>
		<state id="8">
			<pass transform="normals" lighting="diffuse">
				<vertexshader use="vs1_near_opaque_shadow_projectedtex"/>
				<pixelshader use="ps1_near_opaque_projectedtex"/>
			</pass>
		</state>
		<state id="9">
			<pass transform="normals" lighting="diffuse">
				<vertexshader use="vs1_near_opaque_shadow_projectedtex"/>
				<pixelshader use="ps1_near_hardedged_projectedtex"/>
			</pass>
		</state>
		<state id="10">
			<pass transform="normals" lighting="diffuse">
				<vertexshader use="vs1_near_transparent_shadow_projectedtex"/>
				<pixelshader use="ps1_near_transparent_projectedtex"/>
			</pass>
		</state>
		<state id="11">
			<pass transform="normals" lighting="diffuse">
				<vertexshader use="vs1_near_transparent_shadow_projectedtex"/>
				<pixelshader use="ps1_near_transparent_hardedged_projectedtex"/>
			</pass>
		</state>
		<state id="12">
			<pass transform="normals" lighting="diffuse">
				<vertexshader use="vs1_near_opaque_shadow_projectedtex"/>
				<pixelshader use="ps1_near_opaque_shadow"/>
			</pass>
		</state>
		<state id="13">
			<pass transform="normals" lighting="diffuse">
				<vertexshader use="vs1_near_opaque_shadow_projectedtex"/>
				<pixelshader use="ps1_near_opaque_hardedged_shadow"/>
			</pass>
		</state>
		<state id="14">
			<pass transform="normals" lighting="diffuse">
				<vertexshader use="vs1_near_opaque_shadow_projectedtex"/>
				<pixelshader use="ps1_near_opaque_shadow_projectedtex"/>
			</pass>
		</state>
		<state id="15">
			<pass transform="normals" lighting="diffuse">
				<vertexshader use="vs1_near_opaque_shadow_projectedtex"/>
				<pixelshader use="ps1_near_opaque_hardedged_shadow_projectedtex"/>
			</pass>
		</state>
		<state id="16">
			<pass transform="normals" lighting="diffuse">
				<vertexshader use="vs1_near_transparent_shadow_projectedtex"/>
				<pixelshader use="ps1_near_transparent_shadow"/>
			</pass>
		</state>
		<state id="17">
			<pass transform="normals" lighting="diffuse">
				<vertexshader use="vs1_near_transparent_shadow_projectedtex"/>
				<pixelshader use="ps1_near_transparent_hardedged_shadow"/>
			</pass>
		</state>
		<state id="18">
			<pass transform="normals" lighting="diffuse">
				<vertexshader use="vs1_near_transparent_shadow_projectedtex"/>
				<pixelshader use="ps1_near_transparent_shadow_projectedtex"/>
			</pass>
		</state>
		<state id="19">
			<pass transform="normals" lighting="diffuse">
				<vertexshader use="vs1_near_transparent_shadow_projectedtex"/>
				<pixelshader use="ps1_near_transparent_hardedged_shadow_projectedtex"/>
			</pass>
		</state>
	</pipeline>
</shader>
