<?xml version="1.0" encoding="utf-8" ?>
<shader rendertype="refraction" skinned="yes" debuginfo="no">
	<vertexshader name="vs1_far" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"

		; project the position into screen space		
		POS_PROJECT(oPos)
		
		; decompress texcoords
		mul R_TEMP, V_TEXCOORDS, c[C_NORMALTEX_DECOMPRESS].zzzw

		; transform texture coordinates
		dp4 oT0.x, R_TEMP, c[C_CUSTOM_MIN+0]
		dp4 oT0.y, R_TEMP, c[C_CUSTOM_MIN+1]
		mov oT0.zw, c[C_CONST0].xz

		; output color (with lighting)
		mul oD0.xyz, R_MATERIAL_COLOR.xyz, R_DIFFUSE_LIGHTING.xyz
		mov oD0.w, R_MATERIAL_COLOR.w

		; output fog value in oFog
		dp4 R_TEMP.z, R_WORLD_POS, c[C_WORLD_PROJ_M3]
		FOG(R_TEMP.z, R_WORLD_POS, R_TEMP1)
	</vertexshader>

	<vertexshader name="vs1_near_fade_nodistortion" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"

		; project the position into screen space
		POS_PROJECT(R_TEMP)
		mov oPos, R_TEMP

		; decompress texcoords
		mul R_TEMP, V_TEXCOORDS, c[C_NORMALTEX_DECOMPRESS].zzzw

		; transform diffuse texture coordinates
		dp4 oT0.x, R_TEMP, c[C_CUSTOM_MIN+0]
		dp4 oT0.y, R_TEMP, c[C_CUSTOM_MIN+1]
		mov oT0.zw, c[C_CONST0].xz

		; calculate near scene fade factor in R_TEMP.w
		NEARSCENEFADE(R_TEMP)
		FOG(R_TEMP.z, R_WORLD_POS, R_TEMP1)	
		; clamp to [0.0,1.0] and square it to fade transparent objects faster
		max R_TEMP.w, R_TEMP.w, c[C_CONST0].x
		min R_TEMP.w, R_TEMP.w, c[C_CONST0].z
		mul R_TEMP.w, R_TEMP.w, R_TEMP.w
		; output color with lighting and near scene fade
		mul oD0.xyz, R_MATERIAL_COLOR.xyz, R_DIFFUSE_LIGHTING.xyz
		mul oD0.w, R_MATERIAL_COLOR.w, R_TEMP.w
	</vertexshader>

	<vertexshader name="vs1_near_fade" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"

		; project the position into screen space
		POS_PROJECT(oPos)

		; distort position by normal and project into screen space to get texture coords
		mad R_TEMP2, R_NORMAL.xyzz, c[C_CUSTOM_MIN+0].zzzw, R_POS
		dp4 oT1.x, R_TEMP2, c[C_CUSTOM_MIN+1]
		dp4 oT1.y, R_TEMP2, c[C_CUSTOM_MIN+2]
		dp4 oT1.zw, R_TEMP2, c[C_CUSTOM_MIN+4]
		
		; projection texture coordinates
		dp4 oT3.x, R_WORLD_POS, c[C_LIGHT_PROJ_M0]
		dp4 oT3.y, R_WORLD_POS, c[C_LIGHT_PROJ_M1]
//		dp4 oT3.z, R_WORLD_POS, c[C_LIGHT_PROJ_M2]
		dp4 oT3.zw, R_WORLD_POS, c[C_LIGHT_PROJ_M3]
		mul R_TEMP.xyz, R_STATIC_DIFFUSE_LIGHTING.w, R_MATERIAL_COLOR.xyz
		mul R_TEMP.xyz, R_TEMP.xyz, c[C_HDR].zzz
		mul oD1.xyz, c[C_LIGHT_PROJ_COLOR].xyz, R_TEMP.xyz

		; decompress texcoords
		mul R_TEMP, V_TEXCOORDS, c[C_NORMALTEX_DECOMPRESS].zzzw

		; transform bump texture coordinates
		dp4 oT0.x, R_TEMP, c[C_CUSTOM_MIN+5]
		dp4 oT0.y, R_TEMP, c[C_CUSTOM_MIN+6]
		mov oT0.zw, c[C_CONST0].xz

		; transform diffuse texture coordinates
		dp4 oT2.x, R_TEMP, c[C_CUSTOM_MIN+7]
		dp4 oT2.y, R_TEMP, c[C_CUSTOM_MIN+8]
		mov oT2.zw, c[C_CONST0].xz

		; calculate near scene fade factor in R_TEMP.w
		NEARSCENEFADE(R_TEMP)
		FOG(R_TEMP.z, R_WORLD_POS, R_TEMP1)
	
		; clamp to [0.0,1.0] and square it to fade transparent objects faster
		max R_TEMP.w, R_TEMP.w, c[C_CONST0].x
		min R_TEMP.w, R_TEMP.w, c[C_CONST0].z
		mul R_TEMP.w, R_TEMP.w, R_TEMP.w
		; output color with lighting and near scene fade
		mul oD0.xyz, R_MATERIAL_COLOR.xyz, R_DIFFUSE_LIGHTING.xyz
		mul oD0.w, R_MATERIAL_COLOR.w, R_TEMP.w
	</vertexshader>

	<pixelshader name="ps1_far" target="ps_1_1">
		tex t0	// diffuse map

		mul r0, t0, v0
	</pixelshader>

	<pixelshader name="ps1_near_diffuse_bump" target="ps_1_1">
		tex t0
		texbem t1, t0
		tex t2
		tex t3
		;v0.rgb = lighting*material
		;v1.rgb = proj light atten * material color
		;v0.a = transparency

		// r0.rgb = main * lighting
		mad r0.rgb,t3,v1,v0
		mul r0.rgb,r0,t2
		+mad r0.a,-t2.a, c0.a, t2.a

		// r0.rgb = diffuse*(alpha) + refraction*(1-alpha)
		lrp r0.rgb, r0.a, r0, t1
		+mov r0.a, v0.a
	</pixelshader>

	<pixelshader name="ps1_near_diffuse" target="ps_1_1">
		tex t1
		tex t2
		tex t3
		;v0.rgb = lighting*material
		;v1.rgb = proj light atten * material color
		;v0.a = transparency

		// r0.rgb = main * lighting
		mad r0.rgb,t3,v1,v0
		mul r0.rgb,r0,t2
		+mad r0.a,-t2.a, c0.a, t2.a

		// r0.rgb = diffuse*(alpha) + refraction*(1-alpha)
		lrp r0.rgb, r0.a, r0, t1
		+mov r0.a, v0.a
	</pixelshader>

	<pixelshader name="ps1_near_bump" target="ps_1_1">
		tex t0
		texbem t1, t0
		tex t3
		;v0.rgb = lighting*material
		;v1.rgb = proj light atten * material color
		;v0.a = transparency

		// r0.rgb = main * lighting
		mad r0.rgb,t3,v1,v0

		// r0.rgb = diffuse*(alpha) + refraction*(1-alpha)
		lrp r0.rgb, c0.a, r0, t1
		+mov r0.a, v0.a
	</pixelshader>

	<pixelshader name="ps1_near" target="ps_1_1">
		tex t1
		tex t3
		;v0.rgb = lighting*material
		;v1.rgb = proj light atten * material color
		;v0.a = transparency

		// r0.rgb = main * lighting
		mad r0.rgb,t3,v1,v0

		// r0.rgb = diffuse*(alpha) + refraction*(1-alpha)
		lrp r0.rgb, c0.a, r0, t1
		+mov r0.a, v0.a
	</pixelshader>

	<pipeline id="1">
		<state id="0">
			<pass transform="normals" lighting="diffuse">
				<vertexshader use="vs1_far"/>
				<pixelshader use="ps1_far"/>
			</pass>
		</state>
		<state id="1">
			<pass transform="normals" lighting="diffuse">
				<vertexshader use="vs1_near_fade_nodistortion"/>
				<pixelshader use="ps1_far"/>
			</pass>
		</state>
		<state id="2">
			<pass transform="normals" lighting="diffuse">
				<vertexshader use="vs1_near_fade"/>
				<pixelshader use="ps1_near"/>
			</pass>
		</state>
		<state id="3">
			<pass transform="normals" lighting="diffuse">
				<vertexshader use="vs1_near_fade"/>
				<pixelshader use="ps1_near_bump"/>
			</pass>
		</state>
		<state id="4">
			<pass transform="normals" lighting="diffuse">
				<vertexshader use="vs1_near_fade"/>
				<pixelshader use="ps1_near_diffuse"/>
			</pass>
		</state>
		<state id="5">
			<pass transform="normals" lighting="diffuse">
				<vertexshader use="vs1_near_fade"/>
				<pixelshader use="ps1_near_diffuse_bump"/>
			</pass>
		</state>
	</pipeline>
</shader>