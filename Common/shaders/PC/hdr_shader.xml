<?xml version="1.0" encoding="utf-8" ?>
<shader rendertype="hdr" skinned="no" debuginfo="no">

	<vertexshader name="vs_screenspace" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"
		#include "pcRedVertexShaderConstants.h"

		dcl_position	V_POS
		dcl_texcoord	V_TEXCOORDS

		; decompress texcoords
		mul oT0, V_TEXCOORDS, c[C_NORMALTEX_DECOMPRESS].zzzw

		; decompress position
		mul R_POS, c[C_POS_DECOMPRESS0], V_POS
		add R_POS, c[C_POS_DECOMPRESS1], R_POS

		; multiply the normalized [0..1] position by 2
		add R_TEMP.xy, V_POS.xy, -c[C_CUSTOM_MIN+1].zw
		add R_TEMP.xy, R_TEMP.xy, R_TEMP.xy
		; subtract one to have a [-1..1] in x and [1..-1] in y
		mad oPos.xy, R_TEMP.xy, c[C_CONST0].zw, c[C_CONST0].wz
		mov oPos.zw, c[C_CONST0].yz
	</vertexshader>

	<vertexshader name="vs_bloomfilter" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"
		#include "pcRedVertexShaderConstants.h"

		dcl_position	V_POS
		dcl_texcoord	V_TEXCOORDS

		; decompress texcoords
		mul R_TEMP, V_TEXCOORDS, c[C_NORMALTEX_DECOMPRESS].zzzw

		; scale the pos into the texture coordinates
		mad oT0.xy, R_TEMP.xy, c[C_CUSTOM_MIN+2].xy, c[C_CUSTOM_MIN+2].zw
		mov oT0.zw, R_TEMP.zw
		mad oT1.x, R_TEMP.x, c[C_CUSTOM_MIN+2].x, -c[C_CUSTOM_MIN+2].z
		mad oT1.y, R_TEMP.y, c[C_CUSTOM_MIN+2].y, c[C_CUSTOM_MIN+2].w
		mov oT1.zw, R_TEMP.zw
		mov oT2.zw, R_TEMP.zw
		mad oT2.x, R_TEMP.x, c[C_CUSTOM_MIN+2].x, c[C_CUSTOM_MIN+2].z
		mad oT2.y, R_TEMP.y, c[C_CUSTOM_MIN+2].y, -c[C_CUSTOM_MIN+2].w
		mad oT3.xy, R_TEMP.xy, c[C_CUSTOM_MIN+2].xy, -c[C_CUSTOM_MIN+2].zw
		mov oT3.zw, R_TEMP.zw
	
		; decompress position
		mul R_POS, c[C_POS_DECOMPRESS0], V_POS
		add R_POS, c[C_POS_DECOMPRESS1], R_POS

		; multiply the normalized [0..1] position by 2
		add R_TEMP.xy, V_POS.xy, -c[C_CUSTOM_MIN+1].zw
		add R_TEMP.xy, R_TEMP.xy, R_TEMP.xy
		; subtract one to have a [-1..1] in x and [1..-1] in y
		mad oPos.xy, R_TEMP.xy, c[C_CONST0].zw, c[C_CONST0].wz
		mov oPos.zw, c[C_CONST0].yz
	</vertexshader>
	
	<pixelshader name="ps_glowthreshold" target="ps_1_1">
		def c6, 0.0, 0.0, 0.0, 0.0
		def c7, 0.5, 0.5, 0.5, 0.45
		tex t0		// input texture

		sub_sat r0.rgb, t0, c0.a
		
		// convert RGB to luminance
		dp3 r0.rgba, r0, c0

		// compare r0.a > threshold => r0.a + (0.5-threshold) > 0.5
//		add r1.a, c7.a, -c0.a
//		add r0.a, r0.a, r1.a

		// compare r0.a > 0 => r0.a + 0.5 > 0.5
		add r0.a, r0.a, c7.a

		// intensity > threshold ? 1.0 : 0.0
		cnd r0.rgb, r0.a, t0, c6	
	</pixelshader>

	<pixelshader name="ps_luminance" target="ps_1_1">
		def c7, 0.5, 0.5, 0.5, 0.5
		tex t0		// input texture
		
		// convert RGB to luminance
		dp3 r0.rgba, t0, c0
	</pixelshader>

	<pixelshader name="ps_bloomfilter" target="ps_1_1">	
		tex t0
		tex t1
		tex t2
		tex t3

		// evaluate the first 2 sample and add them: t0*c0 + t1*c1
		mul r0, t0, c1.a
		mad r0, t1, c1.a, r0
		
		// evaluate the next 2 samples and add them: t2*c2 + t3*c3
		mul r1, t2, c1.a
		mad r1, t3, c1.a, r1

		// add the previous two sums			
		add r0, r0, r1
	</pixelshader>

	<pixelshader name="ps_screenspace" target="ps_1_1">
		tex t0

		mul r0.rgb, t0, c2
		+mov r0.a, c2.a
	</pixelshader>

	<pipeline id="1">
		<!-- state 0: find all pixels about an intensity threshold and rescale -->
		<state id="0">
			<pass transform="none" lighting="none" vertexcolor="no">
				<vertexshader use="vs_screenspace"/>
				<pixelshader use="ps_glowthreshold"/>
			</pass>
		</state>

		<!-- state 1: convert texture to luminance -->
		<state id="1">
			<pass transform="none" lighting="none" vertexcolor="no">
				<vertexshader use="vs_screenspace"/>
				<pixelshader use="ps_luminance"/>
			</pass>
		</state>

		<!-- state 2: bloom filter -->
		<state id="2">
			<pass transform="none" lighting="none" vertexcolor="no">
				<vertexshader use="vs_bloomfilter"/>
				<pixelshader use="ps_bloomfilter"/>
			</pass>
		</state>

		<!-- state 3: scale and bloom -->
		<state id="3">
			<pass transform="none" lighting="none" vertexcolor="no">
				<vertexshader use="vs_screenspace"/>
				<pixelshader use="ps_screenspace"/>
			</pass>
		</state>
	</pipeline>
</shader>
