<?xml version="1.0" encoding="utf-8" ?>
<shader rendertype="scroll" skinned="yes" debuginfo="no">
	<vertexshader name="vs1_far" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"

		; project the position into screen space		
		POS_PROJECT(oPos)
		
		; decompress texcoords
		mul R_TEMP, V_TEXCOORDS, c[C_NORMALTEX_DECOMPRESS].zzzw

		; transform texture coordinates
		dp4 oT0.x, R_TEMP, c[C_CUSTOM_MIN+0]
		dp4 oT0.y, R_TEMP, c[C_CUSTOM_MIN+1]
		mov oT0.zw, c[C_CONST0].xz

		; output color (with lighting)
		mul oD0.xyz, R_DIFFUSE_LIGHTING.xyz, R_MATERIAL_COLOR.xyz
		mov oD0.w, R_MATERIAL_COLOR.w

		; output fog value in oFog
		dp4 R_TEMP.z, R_WORLD_POS, c[C_WORLD_PROJ_M3]
		FOG(R_TEMP.z, R_WORLD_POS, R_TEMP1)
	</vertexshader>

	<vertexshader name="vs1_near_opaque" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"

		; project the position into screen space		
		POS_PROJECT(oPos)
		
		; decompress texcoords
		mul R_TEMP, V_TEXCOORDS, c[C_NORMALTEX_DECOMPRESS].zzzw

		; transform texture coordinates
		dp4 oT0.x, R_TEMP, c[C_CUSTOM_MIN+0]
		dp4 oT0.y, R_TEMP, c[C_CUSTOM_MIN+1]
		mov oT0.zw, c[C_CONST0].xz

		; calculate near scene fade factor in R_TEMP.w
		NEARSCENEFADE(R_TEMP)
		FOG(R_TEMP.z, R_WORLD_POS, R_TEMP1)
		; output color with lighting and near scene fade
		mul oD0.xyz, R_DIFFUSE_LIGHTING.xyz, R_MATERIAL_COLOR.xyz
		; output fade factor * 0.25 + 0.5 to allow interpolation outside the range 0-1
		mad oD0.w, R_TEMP.w, c[C_CONST1].y, c[C_CONST1].z
	</vertexshader>

	<vertexshader name="vs1_near_opaque_shadow" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"

		; project the position into screen space		
		POS_PROJECT(oPos)
		
		; decompress texcoords
		mul R_TEMP, V_TEXCOORDS, c[C_NORMALTEX_DECOMPRESS].zzzw

		; transform texture coordinates
		dp4 oT0.x, R_TEMP, c[C_CUSTOM_MIN+0]
		dp4 oT0.y, R_TEMP, c[C_CUSTOM_MIN+1]
		mov oT0.zw, c[C_CONST0].xz

		; transform shadow map coordinates
		dp4 oT1.x, R_WORLD_POS, c[C_SHADOWMAP_TRANSFORM_U]
		dp4 oT1.y, R_WORLD_POS, c[C_SHADOWMAP_TRANSFORM_V]
		dp4 oT1.w, R_WORLD_POS, c[C_SHADOWMAP_TRANSFORM_W]
		mov oT1.z, c[C_CONST0].x

		; calculate near scene fade factor in R_TEMP.w
		NEARSCENEFADE(R_TEMP)
		FOG(R_TEMP.z, R_WORLD_POS, R_TEMP1)
		; output lighting minus sun to oD0, sun lighting to oD1
		add R_TEMP.xyz, -R_DIFFUSE_DIRECTIONAL_LIGHTING_COLOR.xyz, R_DIFFUSE_LIGHTING.xyz
		mul oD0.xyz, R_MATERIAL_COLOR.xyz, R_TEMP.xyz
		mul oD1.xyz, R_MATERIAL_COLOR.xyz, R_DIFFUSE_DIRECTIONAL_LIGHTING_COLOR.xyz
		; output fade factor * 0.25 + 0.5 to allow interpolation outside the range 0-1
		mad oD0.w, R_TEMP.w, c[C_CONST1].y, c[C_CONST1].z
	</vertexshader>

	<vertexshader name="vs1_near_transparent" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"

		; project the position into screen space		
		POS_PROJECT(oPos)
		
		; decompress texcoords
		mul R_TEMP, V_TEXCOORDS, c[C_NORMALTEX_DECOMPRESS].zzzw

		; transform texture coordinates
		dp4 oT0.x, R_TEMP, c[C_CUSTOM_MIN+0]
		dp4 oT0.y, R_TEMP, c[C_CUSTOM_MIN+1]
		mov oT0.zw, c[C_CONST0].xz

		; calculate near scene fade factor in R_TEMP.w
		NEARSCENEFADE(R_TEMP)
		FOG(R_TEMP.z, R_WORLD_POS, R_TEMP1)
		; clamp to [0.0,1.0] and square it to fade transparent objects faster
		max R_TEMP.w, R_TEMP.w, c[C_CONST0].x
		min R_TEMP.w, R_TEMP.w, c[C_CONST0].z
		mul R_TEMP.w, R_TEMP.w, R_TEMP.w
		; output color with lighting and near scene fade
		mul oD0.xyz, R_DIFFUSE_LIGHTING.xyz, R_MATERIAL_COLOR.xyz
		mul oD0.w, R_MATERIAL_COLOR.w, R_TEMP.w
	</vertexshader>

	<vertexshader name="vs1_near_transparent_shadow" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"

		; project the position into screen space		
		POS_PROJECT(oPos)
		
		; decompress texcoords
		mul R_TEMP, V_TEXCOORDS, c[C_NORMALTEX_DECOMPRESS].zzzw

		; transform texture coordinates
		dp4 oT0.x, R_TEMP, c[C_CUSTOM_MIN+0]
		dp4 oT0.y, R_TEMP, c[C_CUSTOM_MIN+1]
		mov oT0.zw, c[C_CONST0].xz

		; transform shadow map coordinates
		dp4 oT1.x, R_WORLD_POS, c[C_SHADOWMAP_TRANSFORM_U]
		dp4 oT1.y, R_WORLD_POS, c[C_SHADOWMAP_TRANSFORM_V]
		dp4 oT1.w, R_WORLD_POS, c[C_SHADOWMAP_TRANSFORM_W]
		mov oT1.z, c[C_CONST0].x

		; calculate near scene fade factor in R_TEMP.w
		NEARSCENEFADE(R_TEMP)
		FOG(R_TEMP.z, R_WORLD_POS, R_TEMP1)
		; clamp to [0.0,1.0] and square it to fade transparent objects faster
		max R_TEMP.w, R_TEMP.w, c[C_CONST0].x
		min R_TEMP.w, R_TEMP.w, c[C_CONST0].z
		mul R_TEMP.w, R_TEMP.w, R_TEMP.w
		; output lighting minus sun to oD0, sun lighting to oD1
		add R_TEMP.xyz, -R_DIFFUSE_DIRECTIONAL_LIGHTING_COLOR.xyz, R_DIFFUSE_LIGHTING.xyz
		mul oD0.xyz, R_MATERIAL_COLOR.xyz, R_TEMP.xyz
		mul oD1.xyz, R_MATERIAL_COLOR.xyz, R_DIFFUSE_DIRECTIONAL_LIGHTING_COLOR.xyz
		mul oD0.w, R_MATERIAL_COLOR.w, R_TEMP.w
	</vertexshader>

	<pixelshader name="ps1_far" target="ps_1_1">
		tex t0	// diffuse map
		;v0.rgb = lighting
		;v0.a = material alpha

		mul r0, t0, v0
	</pixelshader>

	<pixelshader name="ps1_near_opaque" target="ps_1_1">
		tex t0	// diffuse map
		;v0.rgb = lighting
		;v0.a = near scene fade factor d4+1/2

		// r0 = main * lighting
		mul r0.rgb,t0,v0
		mov_x4 r0.a,v0_bias.a		// near scene alpha is d4 + 1/2
	</pixelshader>

	<pixelshader name="ps1_near_hardedged" target="ps_1_1">
		def c0, 0, 0, 0.5, -0.01		// 0, 0, 1-alpharef, 0
		tex t0	// diffuse map
		;v0.rgb = lighting
		;v0.a = near scene fade factor d4+1/2

		mul r0.rgb,t0,v0
		+add r0.a,t0_bias.a,c0.b
		cnd_x4 r0.a,r0.a,v0_bias.a,c0.a	// alpha test vs. alpharef; near scene alpha is d4 + 1/2
	</pixelshader>

	<pixelshader name="ps1_near_transparent" target="ps_1_1">
		tex t0	// diffuse map
		;v0.rgb = lighting
		;v0.a = material alpha * near scene fade factor d4+1/2

		mul r0.rgb,t0,v0
		+mul r0.a,t0.a,v0.a
	</pixelshader>

	<pixelshader name="ps1_near_transparent_hardedged" target="ps_1_1">
		def c0, 0, 0, 0.5, 0		// 0, 0, 1-alpharef, 0
		tex t0	// diffuse map
		;v0.rgb = lighting
		;v0.a = material alpha * near scene fade factor d4+1/2

		mul r1.rgb,t0.a,v0.a
		+add r0.a,t0_bias.a,c0.b
		mul r0.rgb,t0,v0
		+cnd r0.a,r0.a,r1.b,c0.a		// alpha test vs. alpharef
	</pixelshader>

	<pixelshader name="ps1_near_opaque_shadow" target="ps_1_1">
		tex t0	// diffuse map
		tex t1	// shadow map
		;v0.rgb = lighting - sun lighting
		;v1.rgb = sun lighting
		;v0.a = near scene fade factor d4+1/2

		// Add in sun lighting where not shadowed
		mad_sat r0.rgb, t1.a, v1, v0

		// r0 = main * lighting + specular
		mul r0.rgb,t0,r0
		mov_x4 r0.a,v0_bias.a		// near scene alpha is d4 + 1/2
	</pixelshader>

	<pixelshader name="ps1_near_hardedged_shadow" target="ps_1_1">
		def c0, 0, 0, 0.5, -0.01			// 0, 0, 1-alpharef, 0
		tex t0	// diffuse map
		tex t1	// shadow map
		;v0.rgb = lighting - sun lighting
		;v1.rgb = sun lighting
		;v0.a = near scene fade factor d4+1/2

		// Add in sun lighting where not shadowed
		mad_sat r0.rgb, t1.a, v1, v0
		+add r0.a,t0_bias.a,c0.b
		mul r0.rgb,t0,r0
		cnd_x4 r0.a,r0.a,v0_bias.a,c0.a	// alpha test vs. alpharef; near scene alpha is d4 + 1/2
	</pixelshader>

	<pixelshader name="ps1_near_transparent_shadow" target="ps_1_1">
		tex t0	// diffuse map
		tex t1	// shadow map
		;v0.rgb = lighting - sun lighting
		;v1.rgb = sun lighting
		;v0.a = near scene fade factor d4+1/2

		// Add in sun lighting where not shadowed
		mad_sat r0.rgb, t1.a, v1, v0
		mul r0.rgb,t0,r0
		+mul r0.a,t0.a,v0.a
	</pixelshader>

	<pixelshader name="ps1_near_transparent_hardedged_shadow" target="ps_1_1">
		def c0, 0, 0, 0.5, 0		// 0, 0, 1-alpharef, 0
		tex t0	// diffuse map
		tex t1	// shadow map
		;v0.rgb = lighting - sun lighting
		;v1.rgb = sun lighting
		;v0.a = near scene fade factor d4+1/2

		// Add in sun lighting where not shadowed
		mad_sat r0.rgb, t1.a, v1, v0
		+mul r1.a,t0.a,v0.a
		mul r0.rgb,t0,r0
		+add r0.a,t0_bias.a,c0.b
		cnd r0.a,r0.a,r1.a,c0.a	// alpha test vs. alpharef
	</pixelshader>

	<pipeline id="1">
		<state id="0">
			<pass transform="normals" lighting="diffuse">
				<vertexshader use="vs1_far"/>
				<pixelshader use="ps1_far"/>
			</pass>
		</state>
		<state id="1">
			<pass transform="normals" lighting="diffuse">
				<vertexshader use="vs1_near_opaque"/>
				<pixelshader use="ps1_near_opaque"/>
			</pass>
		</state>
		<state id="2">
			<pass transform="normals" lighting="diffuse">
				<vertexshader use="vs1_near_opaque"/>
				<pixelshader use="ps1_near_hardedged"/>
			</pass>
		</state>
		<state id="3">
			<pass transform="normals" lighting="diffuse">
				<vertexshader use="vs1_near_transparent"/>
				<pixelshader use="ps1_near_transparent"/>
			</pass>
		</state>
		<state id="4">
			<pass transform="normals" lighting="diffuse">
				<vertexshader use="vs1_near_transparent"/>
				<pixelshader use="ps1_near_transparent_hardedged"/>
			</pass>
		</state>
		<state id="5">
			<pass transform="normals" lighting="diffuse">
				<vertexshader use="vs1_near_opaque_shadow"/>
				<pixelshader use="ps1_near_opaque_shadow"/>
			</pass>
		</state>
		<state id="6">
			<pass transform="normals" lighting="diffuse">
				<vertexshader use="vs1_near_opaque_shadow"/>
				<pixelshader use="ps1_near_hardedged_shadow"/>
			</pass>
		</state>
		<state id="7">
			<pass transform="normals" lighting="diffuse">
				<vertexshader use="vs1_near_transparent_shadow"/>
				<pixelshader use="ps1_near_transparent_shadow"/>
			</pass>
		</state>
		<state id="8">
			<pass transform="normals" lighting="diffuse">
				<vertexshader use="vs1_near_transparent_shadow"/>
				<pixelshader use="ps1_near_transparent_hardedged_shadow"/>
			</pass>
		</state>
	</pipeline>
</shader>
