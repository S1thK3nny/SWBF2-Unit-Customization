<?xml version="1.0" encoding="ISO-8859-1"?>
<shader rendertype="decal" skinned="no" debuginfo="no">
	<pipeline id="1">
		<state id="0">
			<pass transform="none" lighting="none">
				<vertexshader target="vs_1_1">
				#include "pcRedVertexShaderConstants.h"
				#include "pcRedVertexShaderMacros.h"

				dcl_position	V_POS
				dcl_color		V_COLOR
				dcl_texcoord	V_TEXCOORDS

				// decompress position
				mul R_POS, c[C_POS_DECOMPRESS0], V_POS
				add R_POS, c[C_POS_DECOMPRESS1], R_POS
				// transform into world space
				dp4 R_WORLD_POS.x, R_POS, c[C_OBJ_WORLD_M0]
				dp4 R_WORLD_POS.y, R_POS, c[C_OBJ_WORLD_M1]
				dp4 R_WORLD_POS.z, R_POS, c[C_OBJ_WORLD_M2]
				mov R_WORLD_POS.w, c[C_CONST0].z
				
				POS_PROJECT(oPos)

				; decompress texcoords
				mul oT0, V_TEXCOORDS, c[C_NORMALTEX_DECOMPRESS].zzzw
				
				; calculate near scene fade factor in R_TEMP.w
				NEARSCENEFADE(R_TEMP)
				mul R_TEMP.xyz, V_COLOR, c[C_COLOR_DIFFUSE]
				mul oD0.xyz, R_TEMP.xyz, c[C_HDR].zzz	
				mul oD0.w, c[C_COLOR_DIFFUSE].w, R_TEMP.w
				</vertexshader>

				<pixelshader target="ps_1_1">
				tex t0	       			// decal

				mul_sat r0.rgb, t0, v0
				+mul r1.a, t0.a, v0.a

				lrp r0.rgb, r1.a, r0, c0
				+mov r0.a, c0.a
				</pixelshader>			
			</pass>
		</state>

		<state id="1">
			<pass transform="none" lighting="none">
				<vertexshader target="vs_1_1">
				#include "pcRedVertexShaderConstants.h"
				#include "pcRedVertexShaderMacros.h"

				dcl_position	V_POS
				dcl_color		V_COLOR
				dcl_texcoord	V_TEXCOORDS

				// decompress position
				mul R_POS, c[C_POS_DECOMPRESS0], V_POS
				add R_POS, c[C_POS_DECOMPRESS1], R_POS
				// transform into world space
				dp4 R_WORLD_POS.x, R_POS, c[C_OBJ_WORLD_M0]
				dp4 R_WORLD_POS.y, R_POS, c[C_OBJ_WORLD_M1]
				dp4 R_WORLD_POS.z, R_POS, c[C_OBJ_WORLD_M2]
				mov R_WORLD_POS.w, c[C_CONST0].z

				POS_PROJECT(oPos)

				; decompress texcoords
				mul oT0, V_TEXCOORDS, c[C_NORMALTEX_DECOMPRESS].zzzw
				mul oT1, V_TEXCOORDS, c[C_NORMALTEX_DECOMPRESS].zzzw
				
				; calculate near scene fade factor in R_TEMP.w
				NEARSCENEFADE(R_TEMP)
				mul oD0.xyz, V_COLOR, c[C_HDR].zzz
				mul oD0.w, c[C_COLOR_DIFFUSE].w, R_TEMP.w
				</vertexshader>

				<pixelshader target="ps_1_1">
				tex t0	       			// diffuse map
				tex t1					// bx2 bump map

				// r0.rgb = bump_normal_bx2 dot vector_to_light_bx2, r1.a = t0.a * v0.a
				dp3_sat r0.rgb, t1_bx2, v0_bx2

				mul_sat r0.rgb, r0, c1
				+mul r0.a, t1.a, v0.a

				mul_sat r0.rgb, r0, t0
				+mul_sat r0.a, r0.a, t0.a

				lrp r0.rgb, r0.a, r0, c0
				</pixelshader>			
			</pass>
		</state>

		<state id="2">
			<pass transform="none" lighting="none">
				<vertexshader target="vs_1_1">
				#include "pcRedVertexShaderConstants.h"
				#include "pcRedVertexShaderMacros.h"

				dcl_position	V_POS
				dcl_color		V_COLOR
				dcl_texcoord	V_TEXCOORDS

				// decompress position
				mul R_POS, c[C_POS_DECOMPRESS0], V_POS
				add R_POS, c[C_POS_DECOMPRESS1], R_POS
				// transform into world space
				dp4 R_WORLD_POS.x, R_POS, c[C_OBJ_WORLD_M0]
				dp4 R_WORLD_POS.y, R_POS, c[C_OBJ_WORLD_M1]
				dp4 R_WORLD_POS.z, R_POS, c[C_OBJ_WORLD_M2]
				mov R_WORLD_POS.w, c[C_CONST0].z

				POS_PROJECT(oPos)

				; decompress texcoords
				mul oT0, V_TEXCOORDS, c[C_NORMALTEX_DECOMPRESS].zzzw
				
				; calculate near scene fade factor in R_TEMP.w
				NEARSCENEFADE(R_TEMP)
				mul oD0.xyz, V_COLOR, c[C_HDR].zzz
				mul oD0.w, c[C_COLOR_DIFFUSE].w, R_TEMP.w
				</vertexshader>

				<pixelshader target="ps_1_1">
				tex t0	       			// bx2 bump map

				// r0.rgb = bump_normal_bx2 dot vector_to_light_bx2, r1.a = t0.a * v0.a
				dp3_sat r0.rgb, t0_bx2, v0_bx2

				mul_sat r0.rgb, r0, c1
				+mul_sat r1.a, t0.a, v0.a

				lrp r0.rgb, r1.a, r0, c0
				+mov r0.a, c0.a
				</pixelshader>			
			</pass>
		</state>

	</pipeline>
</shader>