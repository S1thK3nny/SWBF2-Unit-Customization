<?xml version="1.0" encoding="utf-8" ?>
<shader rendertype="specularlighting" skinned="yes" debuginfo="no">

	<vertexshader name="vs1_vertexlit" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"

		; project the position into screen space		
		POS_PROJECT(oPos)
		
		; decompress texcoords
		mul R_TEMP, V_TEXCOORDS, c[C_NORMALTEX_DECOMPRESS].zzzw

		; transform texture coordinates
		dp4 oT0.x, R_TEMP, c[C_CUSTOM_MIN+0]
		dp4 oT0.y, R_TEMP, c[C_CUSTOM_MIN+1]
		mov oT0.zw, c[C_CONST0].xz

		mul oD1.xyz, R_SPECULAR_LIGHTING.w, c[C_CUSTOM_MIN+2].xyz
		dp4 R_TEMP.z, R_WORLD_POS, c[C_WORLD_PROJ_M3]
		FOG(R_TEMP.z, R_WORLD_POS, R_TEMP1)
	</vertexshader>

	<vertexshader name="vs1_specularspot_3lights" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"

		#define R_CONSTANTS			r3
		#define R_LIGHT1_DIR		r5
		#define R_LIGHT2_DIR		R_TEMP2
		#define R_REFLECTION_VEC	r6
		#define R_LIGHT_X			r7
		#define R_LIGHT_Y			r8
		#define R_LIGHT_Z			r9
		#define R_WORLD_NORMAL		r11

		mov R_CONSTANTS, c[C_CONST0]

		; project the position into screen space		
		POS_PROJECT(oPos)
		dp4 R_TEMP.z, R_WORLD_POS, c[C_WORLD_PROJ_M3]
		FOG(R_TEMP.z, R_WORLD_POS, R_TEMP1)

		; decompress texcoords
		mul R_TEMP, V_TEXCOORDS, c[C_NORMALTEX_DECOMPRESS].zzzw

		; transform texture coordinates
		dp4 oT0.x, R_TEMP, c[C_CUSTOM_MIN+0]
		dp4 oT0.y, R_TEMP, c[C_CUSTOM_MIN+1]
		mov oT0.zw, c[C_CONST0].xz

		; transform normal to world space
		dp3 R_WORLD_NORMAL.x, R_NORMAL, c[C_OBJ_WORLD_M0]
		dp3 R_WORLD_NORMAL.y, R_NORMAL, c[C_OBJ_WORLD_M1]
		dp3 R_WORLD_NORMAL.z, R_NORMAL, c[C_OBJ_WORLD_M2]

		; calculate the reflected eye-to-vertex vector in world space
		add R_REFLECTION_VEC.xyz, R_WORLD_POS.xyz,-c[C_WORLD_VIEWPOS].xyz
		dp3 R_REFLECTION_VEC.w, R_REFLECTION_VEC.xyz, R_WORLD_NORMAL.xyz
		mad R_REFLECTION_VEC.xyz,-R_REFLECTION_VEC.w, R_WORLD_NORMAL.xyz, R_REFLECTION_VEC.xyz
		mad R_REFLECTION_VEC.xyz,-R_REFLECTION_VEC.w, R_WORLD_NORMAL.xyz, R_REFLECTION_VEC.xyz

		////////////////////////////// light 1 ///////////////////////////////////////
		GET_LIGHT_COMPONENTS(R_LIGHT1_DIR, R_WORLD_POS, c[C_CUSTOM_MIN+3].xyz, c[C_CUSTOM_MIN+3].w, R_TEMP1, R_CONSTANTS.x, R_CONSTANTS.z)

		// create a basis around the light direction
		CREATE_BASIS(R_LIGHT_X, R_LIGHT_Y, R_LIGHT1_DIR, R_TEMP1)

		; calculate specular spot map projected coordinates
		dp3 R_TEMP1.x, R_REFLECTION_VEC.xyz, R_LIGHT_X.xyz
		dp3 R_TEMP1.y, R_REFLECTION_VEC.xyz, R_LIGHT_Y.xyz
		dp3 R_TEMP1.w, R_REFLECTION_VEC.xyz, R_LIGHT1_DIR.xyz
		; scale the spot according to specular power
		mul R_TEMP1.xy, R_TEMP1.xy, c[C_CUSTOM_MIN+2].w	
		; output biased coords (x+z, y+z, 0, z+z) => ((x/z + 1)/2, (y/z + 1)/2, 0, 1)
		add R_TEMP1.xyzw, R_TEMP1.xyww, R_TEMP1.wwww

		// choose the specular spot map coords or the reflection vec
		LERP(oT1, c[C_CUSTOM_MIN+2].x, R_REFLECTION_VEC, R_TEMP1, R_TEMP)

		////////////////////////////// light 2 ///////////////////////////////////////
		GET_LIGHT_COMPONENTS(R_LIGHT2_DIR, R_WORLD_POS, c[C_CUSTOM_MIN+4].xyz, c[C_CUSTOM_MIN+4].w, R_TEMP1, R_CONSTANTS.x, R_CONSTANTS.z)

		// create a basis around the light direction
		CREATE_BASIS(R_LIGHT_X, R_LIGHT_Y, R_LIGHT2_DIR, R_TEMP1)

		; calculate specular spot map projected coordinates
		dp3 R_TEMP1.x, R_REFLECTION_VEC.xyz, R_LIGHT_X.xyz
		dp3 R_TEMP1.y, R_REFLECTION_VEC.xyz, R_LIGHT_Y.xyz
		dp3 R_TEMP1.w, R_REFLECTION_VEC.xyz, R_LIGHT2_DIR.xyz
		; scale the spot for the according to specular power
		mul R_TEMP1.xy, R_TEMP1.xy, c[C_CUSTOM_MIN+2].w
		; output biased coords (x+z, y+z, 0, z+z) => ((x/z + 1)/2, (y/z + 1)/2, 0, 1)
		add R_TEMP1.xyzw, R_TEMP1.xyww, R_TEMP1.wwww

		// choose the specular spot map coords or the reflection vec
		LERP(oT2, c[C_CUSTOM_MIN+2].y, R_REFLECTION_VEC, R_TEMP1, R_TEMP)

		////////////////////////////// light 3 ///////////////////////////////////////
		GET_LIGHT_COMPONENTS(R_TEMP, R_WORLD_POS, c[C_CUSTOM_MIN+5].xyz, c[C_CUSTOM_MIN+5].w, R_TEMP1, R_CONSTANTS.x, R_CONSTANTS.z)

		// calculate specular attenuation for all lights  = (((n dot -l) > 0) ? attenutation : black) + envmap
		dp3 R_TEMP1.y, R_WORLD_NORMAL.xyz,-R_LIGHT1_DIR
		dp3 R_TEMP1.z, R_WORLD_NORMAL.xyz,-R_LIGHT2_DIR
		dp3 R_TEMP1.w, R_WORLD_NORMAL.xyz,-R_TEMP
		slt R_TEMP1.xyzw, c[C_CONST0].xxxx, R_TEMP1.xyzw
//		slt R_TEMP1.y, c[C_CONST0].x, R_TEMP1.y
			
		dp3 R_CONSTANTS.y, R_REFLECTION_VEC.xyz,-R_LIGHT1_DIR
		dp3 R_CONSTANTS.z, R_REFLECTION_VEC.xyz,-R_LIGHT2_DIR
		dp3 R_CONSTANTS.w, R_REFLECTION_VEC.xyz,-R_TEMP
		slt R_CONSTANTS.xyzw, c[C_CONST0].xxxx, R_CONSTANTS.xyzw
		mul R_TEMP1.xyzw, R_TEMP1.xyzw, R_CONSTANTS.xyzw
//		slt R_CONSTANTS.y, c[C_CONST0].x, R_TEMP1.y
//		mul R_TEMP1.y, R_TEMP1.y, R_CONSTANTS.y
	
		mad oD0.xyz, R_LIGHT1_DIR.w, R_TEMP1.y, c[C_CUSTOM_MIN+2].x
		mad oD0.w, R_LIGHT2_DIR.w, R_TEMP1.z, c[C_CUSTOM_MIN+2].y
		mad oD1.xyzw, R_TEMP.w, R_TEMP1.w, c[C_CUSTOM_MIN+2].z

		// create a basis around the light direction
		CREATE_BASIS(R_LIGHT_X, R_LIGHT_Y, R_TEMP, R_TEMP1)

		; calculate specular spot map projected coordinates
		dp3 R_TEMP1.x, R_REFLECTION_VEC.xyz, R_LIGHT_X.xyz
		dp3 R_TEMP1.y, R_REFLECTION_VEC.xyz, R_LIGHT_Y.xyz
		dp3 R_TEMP1.w, R_REFLECTION_VEC.xyz, R_TEMP.xyz
		; scale the spot for the according to specular power
		mul R_TEMP1.xy, R_TEMP1.xy, c[C_CUSTOM_MIN+2].w
		; output biased coords (x+z, y+z, 0, z+z) => ((x/z + 1)/2, (y/z + 1)/2, 0, 1)
		add R_TEMP1.xyzw, R_TEMP1.xyww, R_TEMP1.wwww

		// choose the specular spot map coords or the reflection vec
		LERP(oT3, c[C_CUSTOM_MIN+2].z, R_REFLECTION_VEC, R_TEMP1, R_TEMP)	
	</vertexshader>

	<vertexshader name="vs1_specularspot_2lights" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"

		#define R_CONSTANTS			r3
		#define R_REFLECTION_VEC	r6
		#define R_LIGHT_X		r7
		#define R_LIGHT_Y		r8
		#define R_LIGHT_Z		r9
		#define R_WORLD_NORMAL	r11

		mov R_CONSTANTS, c[C_CONST0]

		; project the position into screen space		
		POS_PROJECT(oPos)
		dp4 R_TEMP.z, R_WORLD_POS, c[C_WORLD_PROJ_M3]
		FOG(R_TEMP.z, R_WORLD_POS, R_TEMP1)

		; decompress texcoords
		mul R_TEMP, V_TEXCOORDS, c[C_NORMALTEX_DECOMPRESS].zzzw

		; transform texture coordinates
		dp4 oT0.x, R_TEMP, c[C_CUSTOM_MIN+0]
		dp4 oT0.y, R_TEMP, c[C_CUSTOM_MIN+1]
		mov oT0.zw, c[C_CONST0].xz

		; transform normal to world space
		dp3 R_WORLD_NORMAL.x, R_NORMAL, c[C_OBJ_WORLD_M0]
		dp3 R_WORLD_NORMAL.y, R_NORMAL, c[C_OBJ_WORLD_M1]
		dp3 R_WORLD_NORMAL.z, R_NORMAL, c[C_OBJ_WORLD_M2]

		; calculate the reflected eye-to-vertex vector in world space
		add R_REFLECTION_VEC.xyz, R_WORLD_POS.xyz,-c[C_WORLD_VIEWPOS].xyz
		dp3 R_REFLECTION_VEC.w, R_REFLECTION_VEC.xyz, R_WORLD_NORMAL.xyz
		mad R_REFLECTION_VEC.xyz,-R_REFLECTION_VEC.w, R_WORLD_NORMAL.xyz, R_REFLECTION_VEC.xyz
		mad R_REFLECTION_VEC.xyz,-R_REFLECTION_VEC.w, R_WORLD_NORMAL.xyz, R_REFLECTION_VEC.xyz

		////////////////////////////// light 1 ///////////////////////////////////////
		GET_LIGHT_COMPONENTS(R_TEMP, R_WORLD_POS, c[C_CUSTOM_MIN+3].xyz, c[C_CUSTOM_MIN+3].w, R_TEMP1, R_CONSTANTS.x, R_CONSTANTS.z)

		// calculate specular color = ((n dot -l) gte 0) ? c[C_SPECULAR_COLOR]*attenutation : black
		dp3 R_TEMP1.w, R_WORLD_NORMAL.xyz,-R_TEMP
		dp3 R_TEMP1.z, R_REFLECTION_VEC.xyz,-R_TEMP
		slt R_TEMP1.zw, c[C_CONST0].xx, R_TEMP1.zw
		mul R_TEMP1.w, R_TEMP1.w, R_TEMP1.z
		mad oD0.xyz, R_TEMP.w, R_TEMP1.w, c[C_CUSTOM_MIN+2].x

		// create a basis around the light direction
		CREATE_BASIS(R_LIGHT_X, R_LIGHT_Y, R_TEMP, R_TEMP2)

		; calculate specular spot map projected coordinates
		dp3 R_TEMP1.x, R_REFLECTION_VEC.xyz, R_LIGHT_X.xyz
		dp3 R_TEMP1.y, R_REFLECTION_VEC.xyz, R_LIGHT_Y.xyz
		dp3 R_TEMP1.w, R_REFLECTION_VEC.xyz, R_TEMP.xyz
		; scale the spot for the according to specular power
		mul R_TEMP1.xy, R_TEMP1.xy, c[C_CUSTOM_MIN+2].w	
		; output biased coords (x+z, y+z, 0, z+z) => ((x/z + 1)/2, (y/z + 1)/2, 0, 1)
		add R_TEMP1.xyzw, R_TEMP1.xyww, R_TEMP1.wwww

		// choose the specular spot map coords or the reflection vec
		LERP(oT1, c[C_CUSTOM_MIN+2].x, R_REFLECTION_VEC, R_TEMP1, R_TEMP)

		////////////////////////////// light 2 ///////////////////////////////////////
		GET_LIGHT_COMPONENTS(R_TEMP, R_WORLD_POS, c[C_CUSTOM_MIN+4].xyz, c[C_CUSTOM_MIN+4].w, R_TEMP1, R_CONSTANTS.x, R_CONSTANTS.z)

		// calculate specular color = ((n dot -l) gte 0) ? c[C_SPECULAR_COLOR]*attenutation : black
		dp3 R_TEMP1.w, R_WORLD_NORMAL.xyz,-R_TEMP
		dp3 R_TEMP1.z, R_REFLECTION_VEC.xyz,-R_TEMP
		slt R_TEMP1.zw, c[C_CONST0].xx, R_TEMP1.zw
		mul R_TEMP1.w, R_TEMP1.w, R_TEMP1.z
		mad oD0.w, R_TEMP.w, R_TEMP1.w, c[C_CUSTOM_MIN+2].y

		// create a basis around the light direction
		CREATE_BASIS(R_LIGHT_X, R_LIGHT_Y, R_TEMP, R_TEMP2)

		; calculate specular spot map projected coordinates
		dp3 R_TEMP1.x, R_REFLECTION_VEC.xyz, R_LIGHT_X.xyz
		dp3 R_TEMP1.y, R_REFLECTION_VEC.xyz, R_LIGHT_Y.xyz
		dp3 R_TEMP1.w, R_REFLECTION_VEC.xyz, R_TEMP.xyz
		; scale the spot for the according to specular power
		mul R_TEMP1.xy, R_TEMP1.xy, c[C_CUSTOM_MIN+2].w	
		; output biased coords (x+z, y+z, 0, z+z) => ((x/z + 1)/2, (y/z + 1)/2, 0, 1)
		add R_TEMP1.xyzw, R_TEMP1.xyww, R_TEMP1.wwww

		// choose the specular spot map coords or the reflection vec
		LERP(oT2, c[C_CUSTOM_MIN+2].y, R_REFLECTION_VEC, R_TEMP1, R_TEMP)
	</vertexshader>

	<vertexshader name="vs1_specularspot_1light" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"

		#define R_CONSTANTS			r3
		#define R_REFLECTION_VEC	r6
		#define R_LIGHT_X		r7
		#define R_LIGHT_Y		r8
		#define R_LIGHT_Z		r9
		#define R_WORLD_NORMAL	r11

		mov R_CONSTANTS, c[C_CONST0]

		; project the position into screen space		
		POS_PROJECT(oPos)
		dp4 R_TEMP.z, R_WORLD_POS, c[C_WORLD_PROJ_M3]
		FOG(R_TEMP.z, R_WORLD_POS, R_TEMP1)

		; decompress texcoords
		mul R_TEMP, V_TEXCOORDS, c[C_NORMALTEX_DECOMPRESS].zzzw

		; transform texture coordinates
		dp4 oT0.x, R_TEMP, c[C_CUSTOM_MIN+0]
		dp4 oT0.y, R_TEMP, c[C_CUSTOM_MIN+1]
		mov oT0.zw, c[C_CONST0].xz

		; transform normal to world space
		dp3 R_WORLD_NORMAL.x, R_NORMAL, c[C_OBJ_WORLD_M0]
		dp3 R_WORLD_NORMAL.y, R_NORMAL, c[C_OBJ_WORLD_M1]
		dp3 R_WORLD_NORMAL.z, R_NORMAL, c[C_OBJ_WORLD_M2]

		; calculate the reflected eye-to-vertex vector in world space
		add R_REFLECTION_VEC.xyz, R_WORLD_POS.xyz,-c[C_WORLD_VIEWPOS].xyz
		dp3 R_REFLECTION_VEC.w, R_REFLECTION_VEC.xyz, R_WORLD_NORMAL.xyz
		mad R_REFLECTION_VEC.xyz,-R_REFLECTION_VEC.w, R_WORLD_NORMAL.xyz, R_REFLECTION_VEC.xyz
		mad R_REFLECTION_VEC.xyz,-R_REFLECTION_VEC.w, R_WORLD_NORMAL.xyz, R_REFLECTION_VEC.xyz

		////////////////////////////// light 1 ///////////////////////////////////////
		GET_LIGHT_COMPONENTS(R_TEMP, R_WORLD_POS, c[C_CUSTOM_MIN+3].xyz, c[C_CUSTOM_MIN+3].w, R_TEMP1, R_CONSTANTS.x, R_CONSTANTS.z)

		// calculate specular color = ((n dot -l) gte 0) ? c[C_SPECULAR_COLOR]*attenutation : black
		dp3 R_TEMP1.w, R_WORLD_NORMAL.xyz,-R_TEMP
		dp3 R_TEMP1.z, R_REFLECTION_VEC.xyz,-R_TEMP
		slt R_TEMP1.zw, c[C_CONST0].xx, R_TEMP1.zw
		mul R_TEMP1.w, R_TEMP1.w, R_TEMP1.z
		mad oD0.xyz, R_TEMP.w, R_TEMP1.w, c[C_CUSTOM_MIN+2].x

		// create a basis around the light direction
		CREATE_BASIS(R_LIGHT_X, R_LIGHT_Y, R_TEMP, R_TEMP2)

		; calculate specular spot map projected coordinates
		dp3 R_TEMP1.x, R_REFLECTION_VEC.xyz, R_LIGHT_X.xyz
		dp3 R_TEMP1.y, R_REFLECTION_VEC.xyz, R_LIGHT_Y.xyz
		dp3 R_TEMP1.w, R_REFLECTION_VEC.xyz, R_TEMP.xyz
		; scale the spot for the according to specular power
		mul R_TEMP1.xy, R_TEMP1.xy, c[C_CUSTOM_MIN+2].w	
		; output biased coords (x+z, y+z, 0, z+z) => ((x/z + 1)/2, (y/z + 1)/2, 0, 1)
		add R_TEMP1.xyzw, R_TEMP1.xyww, R_TEMP1.wwww

		// choose the specular spot map coords or the reflection vec
		LERP(oT1, c[C_CUSTOM_MIN+2].x, R_REFLECTION_VEC, R_TEMP1, R_TEMP)
	</vertexshader>


	<vertexshader name="vs1_pixellit_lights" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"

		#define R_CONSTANTS			r3
		#define R_HALF_VEC		r8
		#define R_LIGHT_X		r9
		#define R_LIGHT_Z		r10
		#define R_WORLD_NORMAL	r11

		mov R_CONSTANTS, c[C_CONST0]

		; project the position into screen space		
		POS_PROJECT(oPos)
		dp4 R_TEMP.z, R_WORLD_POS, c[C_WORLD_PROJ_M3]
		FOG(R_TEMP.z, R_WORLD_POS, R_TEMP1)

		; decompress texcoords
		mul R_TEMP, V_TEXCOORDS, c[C_NORMALTEX_DECOMPRESS].zzzw

		; transform texture coordinates
		dp4 oT0.x, R_TEMP, c[C_CUSTOM_MIN+0]
		dp4 oT0.y, R_TEMP, c[C_CUSTOM_MIN+1]
		mov oT0.zw, c[C_CONST0].xz

		; transform normal to world space
		dp3 R_WORLD_NORMAL.x, R_NORMAL, c[C_OBJ_WORLD_M0]
		dp3 R_WORLD_NORMAL.y, R_NORMAL, c[C_OBJ_WORLD_M1]
		dp3 R_WORLD_NORMAL.z, R_NORMAL, c[C_OBJ_WORLD_M2]


		GET_LIGHT_COMPONENTS(R_TEMP1, R_WORLD_POS, c[C_CUSTOM_MIN+2].xyz, c[C_CUSTOM_MIN+2].w, R_TEMP2, R_CONSTANTS.x, R_CONSTANTS.z)

		; calculate the direction from the vertex to the eye
		add R_TEMP, c[C_WORLD_VIEWPOS], -R_WORLD_POS
		dp3 R_TEMP.w, R_TEMP.xyz, R_TEMP.xyz
		rsq R_TEMP.w, R_TEMP.w
		mul R_TEMP.xyz, R_TEMP.xyz, R_TEMP.w

		; calculate the half vector
		add R_HALF_VEC.xyz, R_TEMP.xyz, -R_TEMP1.xyz
		dp3 R_HALF_VEC.w, R_HALF_VEC.xyz, R_HALF_VEC.xyz
		rsq R_HALF_VEC.w, R_HALF_VEC.w
		mul R_HALF_VEC.xyz, R_HALF_VEC.xyz, R_HALF_VEC.w

		// calculate specular attenuation = ((n dot -l) gte 0) ? attenutation : black
		dp3 R_TEMP.w, R_WORLD_NORMAL.xyz,-R_TEMP1.xyz
		slt R_TEMP.w, c[C_CONST0].x, R_TEMP.w
		mul oD0.xyzw, R_TEMP.w, R_TEMP1.w

		; transform binormals to world space
		dp3 R_TEMP.x, R_BINORMAL_S, c[C_OBJ_WORLD_M0]
		dp3 R_TEMP.y, R_BINORMAL_S, c[C_OBJ_WORLD_M1]
		dp3 R_TEMP.z, R_BINORMAL_S, c[C_OBJ_WORLD_M2]
		dp3 R_TEMP1.x, R_BINORMAL_T, c[C_OBJ_WORLD_M0]
		dp3 R_TEMP1.y, R_BINORMAL_T, c[C_OBJ_WORLD_M1]
		dp3 R_TEMP1.z, R_BINORMAL_T, c[C_OBJ_WORLD_M2]

		; create light space lightY = half vector, lightZ = tangent x lightY
		mul R_LIGHT_Z, R_TEMP.zxy, R_HALF_VEC.yzx
		mad R_LIGHT_Z, R_TEMP.yzx, R_HALF_VEC.zxy, -R_LIGHT_Z

		; normalize
		dp3 R_LIGHT_Z.w, R_LIGHT_Z.xyz, R_LIGHT_Z.xyz
		rsq R_LIGHT_Z.w, R_LIGHT_Z.w
		mul R_LIGHT_Z.xyz, R_LIGHT_Z.xyz, R_LIGHT_Z.w

		; lightX = lightY x lightZ
		mul R_LIGHT_X, R_HALF_VEC.zxy, R_LIGHT_Z.yzx
		mad R_LIGHT_X, R_HALF_VEC.yzx, R_LIGHT_Z.zxy, -R_LIGHT_X

		; normalize
		dp3 R_LIGHT_X.w, R_LIGHT_X.xyz, R_LIGHT_X.xyz
		rsq R_LIGHT_X.w, R_LIGHT_X.w
		mul R_LIGHT_X.xyz, R_LIGHT_X.xyz, R_LIGHT_X.w

		; create a matrix that transforms tangent space into light space
		dp3 oT1.x, R_TEMP.xyz, R_LIGHT_X.xyz
		dp3 oT2.x, R_TEMP.xyz, R_HALF_VEC.xyz
		dp3 oT3.x, R_TEMP.xyz, R_LIGHT_Z.xyz

		dp3 oT1.y, R_TEMP1.xyz, R_LIGHT_X.xyz
		dp3 oT2.y, R_TEMP1.xyz, R_HALF_VEC.xyz
		dp3 oT3.y, R_TEMP1.xyz, R_LIGHT_Z.xyz

		dp3 oT1.z, R_WORLD_NORMAL.xyz, R_LIGHT_X.xyz
		dp3 oT2.z, R_WORLD_NORMAL.xyz, R_HALF_VEC.xyz
		dp3 oT3.z, R_WORLD_NORMAL.xyz, R_LIGHT_Z.xyz

		mov oT1.w, c[C_CONST0].z
		mov oT2.w, c[C_CONST0].z
		mov oT3.w, c[C_CONST0].z
	</vertexshader>

	<vertexshader name="vs1_pixellit_envmap" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"

		#define R_WORLD_NORMAL	r11

		; project the position into screen space		
		POS_PROJECT(oPos)
		dp4 R_TEMP.z, R_WORLD_POS, c[C_WORLD_PROJ_M3]
		FOG(R_TEMP.z, R_WORLD_POS, R_TEMP1)

		; decompress texcoords
		mul R_TEMP, V_TEXCOORDS, c[C_NORMALTEX_DECOMPRESS].zzzw

		; transform texture coordinates
		dp4 oT0.x, R_TEMP, c[C_CUSTOM_MIN+0]
		dp4 oT0.y, R_TEMP, c[C_CUSTOM_MIN+1]
		mov oT0.zw, c[C_CONST0].xz

		; transform normal to world space
		dp3 R_WORLD_NORMAL.x, R_NORMAL, c[C_OBJ_WORLD_M0]
		dp3 R_WORLD_NORMAL.y, R_NORMAL, c[C_OBJ_WORLD_M1]
		dp3 R_WORLD_NORMAL.z, R_NORMAL, c[C_OBJ_WORLD_M2]

		; calculate the direction from the vertex to the eye
		add R_TEMP, c[C_WORLD_VIEWPOS], -R_WORLD_POS
		dp3 R_TEMP.w, R_TEMP.xyz, R_TEMP.xyz
		rsq R_TEMP.w, R_TEMP.w
		mul R_TEMP.xyz, R_TEMP.xyz, R_TEMP.w

		mov oT1.w, R_TEMP.x
		mov oT2.w, R_TEMP.y
		mov oT3.w, R_TEMP.z

		dp3 oT1.x, R_BINORMAL_S, c[C_OBJ_WORLD_M0]
		dp3 oT1.y, R_BINORMAL_S, c[C_OBJ_WORLD_M1]
		dp3 oT1.z, R_BINORMAL_S, c[C_OBJ_WORLD_M2]
		dp3 oT2.x, R_BINORMAL_T, c[C_OBJ_WORLD_M0]
		dp3 oT2.y, R_BINORMAL_T, c[C_OBJ_WORLD_M1]
		dp3 oT2.z, R_BINORMAL_T, c[C_OBJ_WORLD_M2]
		mov oT3.xyz, R_WORLD_NORMAL.xyz
	</vertexshader>

	<vertexshader name="vs1_pixellit_lights_genbinormals" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"

		#define R_CONSTANTS			r3
		#define R_HALF_VEC		r8
		#define R_LIGHT_X		r9
		#define R_LIGHT_Z		r10
		#define R_WORLD_NORMAL	r11

		mov R_CONSTANTS, c[C_CONST0]

		; project the position into screen space		
		POS_PROJECT(oPos)
		dp4 R_TEMP.z, R_WORLD_POS, c[C_WORLD_PROJ_M3]
		FOG(R_TEMP.z, R_WORLD_POS, R_TEMP1)

		; transform texture coordinates
		dp4 oT0.x, R_WORLD_POS, c[C_CUSTOM_MIN+0]
		dp4 oT0.y, R_WORLD_POS, c[C_CUSTOM_MIN+1]
		mov oT0.zw, c[C_CONST0].xz

		; transform normal to world space
		dp3 R_WORLD_NORMAL.x, R_NORMAL, c[C_OBJ_WORLD_M0]
		dp3 R_WORLD_NORMAL.y, R_NORMAL, c[C_OBJ_WORLD_M1]
		dp3 R_WORLD_NORMAL.z, R_NORMAL, c[C_OBJ_WORLD_M2]


		GET_LIGHT_COMPONENTS(R_TEMP1, R_WORLD_POS, c[C_CUSTOM_MIN+2].xyz, c[C_CUSTOM_MIN+2].w, R_TEMP2, R_CONSTANTS.x, R_CONSTANTS.z)

		; calculate the direction from the vertex to the eye
		add R_TEMP, c[C_WORLD_VIEWPOS], -R_WORLD_POS
		dp3 R_TEMP.w, R_TEMP.xyz, R_TEMP.xyz
		rsq R_TEMP.w, R_TEMP.w
		mul R_TEMP.xyz, R_TEMP.xyz, R_TEMP.w

		; calculate the half vector
		add R_HALF_VEC.xyz, R_TEMP.xyz, -R_TEMP1.xyz
		dp3 R_HALF_VEC.w, R_HALF_VEC.xyz, R_HALF_VEC.xyz
		rsq R_HALF_VEC.w, R_HALF_VEC.w
		mul R_HALF_VEC.xyz, R_HALF_VEC.xyz, R_HALF_VEC.w

		// calculate specular attenuation = ((n dot -l) gte 0) ? attenutation : black
		dp3 R_TEMP.w, R_WORLD_NORMAL.xyz,-R_TEMP1.xyz
		slt R_TEMP.w, c[C_CONST0].x, R_TEMP.w
		mul oD0.xyzw, R_TEMP.w, R_TEMP1.w

		;NOTE: we rely on the fact that the object is world axis aligned
		; calculate normalized worldspace S = (1 - n.x*n.x, -n.x*n.y, -n.x*n.z)/sqrt(1 - n.x*n.x)
		mad R_BINORMAL_S.xyz, -R_NORMAL.xxx, R_NORMAL.xyz, c[C_CONST0].zxx
		rsq R_TEMP1.x, R_BINORMAL_S.x
		mul R_BINORMAL_S.xyz, R_BINORMAL_S.xyz, R_TEMP1.x
		; calculate normalized worldspace T = (-n.z*n.x, -n.z*n.y, 1 - n.z*n.z)/sqrt(1 - n.z*n.z)
		mad R_BINORMAL_T.xyz, -R_NORMAL.zzz, R_NORMAL.xyz, c[C_CONST0].xxz
		rsq R_TEMP1.x, R_BINORMAL_T.z
		mul R_BINORMAL_T.xyz, R_BINORMAL_T.xyz, R_TEMP1.x

		; create light space lightY = half vector, lightZ = tangent x lightY
		mul R_LIGHT_Z, R_BINORMAL_S.zxy, R_HALF_VEC.yzx
		mad R_LIGHT_Z, R_BINORMAL_S.yzx, R_HALF_VEC.zxy, -R_LIGHT_Z

		; normalize
		dp3 R_LIGHT_Z.w, R_LIGHT_Z.xyz, R_LIGHT_Z.xyz
		rsq R_LIGHT_Z.w, R_LIGHT_Z.w
		mul R_LIGHT_Z.xyz, R_LIGHT_Z.xyz, R_LIGHT_Z.w

		; lightX = lightY x lightZ
		mul R_LIGHT_X, R_HALF_VEC.zxy, R_LIGHT_Z.yzx
		mad R_LIGHT_X, R_HALF_VEC.yzx, R_LIGHT_Z.zxy, -R_LIGHT_X

		; normalize
		dp3 R_LIGHT_X.w, R_LIGHT_X.xyz, R_LIGHT_X.xyz
		rsq R_LIGHT_X.w, R_LIGHT_X.w
		mul R_LIGHT_X.xyz, R_LIGHT_X.xyz, R_LIGHT_X.w

		; create a matrix that transforms tangent space into light space
		dp3 oT1.x, R_BINORMAL_S.xyz, R_LIGHT_X.xyz
		dp3 oT2.x, R_BINORMAL_S.xyz, R_HALF_VEC.xyz
		dp3 oT3.x, R_BINORMAL_S.xyz, R_LIGHT_Z.xyz

		dp3 oT1.y, R_BINORMAL_T.xyz, R_LIGHT_X.xyz
		dp3 oT2.y, R_BINORMAL_T.xyz, R_HALF_VEC.xyz
		dp3 oT3.y, R_BINORMAL_T.xyz, R_LIGHT_Z.xyz

		dp3 oT1.z, R_WORLD_NORMAL.xyz, R_LIGHT_X.xyz
		dp3 oT2.z, R_WORLD_NORMAL.xyz, R_HALF_VEC.xyz
		dp3 oT3.z, R_WORLD_NORMAL.xyz, R_LIGHT_Z.xyz

		mov oT1.w, c[C_CONST0].z
		mov oT2.w, c[C_CONST0].z
		mov oT3.w, c[C_CONST0].z
	</vertexshader>

	<vertexshader name="vs1_pixellit_envmap_genbinormals" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"

		#define R_WORLD_NORMAL	r11

		; project the position into screen space		
		POS_PROJECT(oPos)
		dp4 R_TEMP.z, R_WORLD_POS, c[C_WORLD_PROJ_M3]
		FOG(R_TEMP.z, R_WORLD_POS, R_TEMP1)

		; transform texture coordinates
		dp4 oT0.x, R_WORLD_POS, c[C_CUSTOM_MIN+0]
		dp4 oT0.y, R_WORLD_POS, c[C_CUSTOM_MIN+1]
		mov oT0.zw, c[C_CONST0].xz

		; transform normal to world space
		dp3 R_WORLD_NORMAL.x, R_NORMAL, c[C_OBJ_WORLD_M0]
		dp3 R_WORLD_NORMAL.y, R_NORMAL, c[C_OBJ_WORLD_M1]
		dp3 R_WORLD_NORMAL.z, R_NORMAL, c[C_OBJ_WORLD_M2]

		; calculate the direction from the vertex to the eye
		add R_TEMP, c[C_WORLD_VIEWPOS], -R_WORLD_POS
		dp3 R_TEMP.w, R_TEMP.xyz, R_TEMP.xyz
		rsq R_TEMP.w, R_TEMP.w
		mul R_TEMP.xyz, R_TEMP.xyz, R_TEMP.w

		mov oT1.w, R_TEMP.x
		mov oT2.w, R_TEMP.y
		mov oT3.w, R_TEMP.z

		;NOTE: we rely on the fact that the terrain is world axis aligned
		; calculate normalized worldspace S = (1 - n.x*n.x, -n.x*n.y, -n.x*n.z)/sqrt(1 - n.x*n.x)
		mad R_BINORMAL_S.xyz, -R_NORMAL.xxx, R_NORMAL.xyz, c[C_CONST0].zxx
		rsq R_TEMP1.x, R_BINORMAL_S.x
		mul oT1.xyz, R_BINORMAL_S.xyz, R_TEMP1.x
		; calculate normalized worldspace T = (-n.z*n.x, -n.z*n.y, 1 - n.z*n.z)/sqrt(1 - n.z*n.z)
		mad R_BINORMAL_T.xyz, -R_NORMAL.zzz, R_NORMAL.xyz, c[C_CONST0].xxz
		rsq R_TEMP1.x, R_BINORMAL_T.z
		mul oT2.xyz, R_BINORMAL_T.xyz, R_TEMP1.x

		mov oT3.xyz, R_WORLD_NORMAL.xyz
	</vertexshader>

	<pixelshader name="ps1_specularspot_3lights" target="ps_1_1">
		def c7, 0.0, 0.0, 0.0, 1.0

		tex t0		// diffuse map, gloss in alpha
		tex t1		// specular spot
		tex t2		// specular spot
		tex t3		// specular spot

		// light 0
		mul r0.rgb, v0, t1
		+lrp r0.a, c0.a, t0.a, c7.a		// compute the gloss factor
		mul r0.rgb, r0, c2

		// light 1
		mul r1.rgb, v0.a, t2
		mad r0.rgb, r1, c3, r0

		// light 2
		mul r1.rgb, v1.a, t3
		mad r0.rgb, r1, c4, r0

		// specular atten * specular color * gloss map
		mul r1.rgb, c0, r0.a
		+mov r0.a, t0.a
		mul r0.rgb, r0, r1
	</pixelshader>

	<pixelshader name="ps1_specularspot_2lights" target="ps_1_1">
		def c7, 0.0, 0.0, 0.0, 1.0

		tex t0		// diffuse map, gloss in alpha
		tex t1		// specular spot
		tex t2		// specular spot

		// light 0
		mul r0.rgb, v0, t1
		+lrp r0.a, c0.a, t0.a, c7.a		// compute the gloss factor
		mul r0.rgb, r0, c2

		// light 1
		mul r1.rgb, v0.a, t2
		mad r0.rgb, r1, c3, r0

		// specular atten * specular color * gloss map
		mul r1.rgb, c0, r0.a
		+mov r0.a, t0.a
		mul r0.rgb, r0, r1
	</pixelshader>

	<pixelshader name="ps1_specularspot_1light" target="ps_1_1">
		def c7, 0.0, 0.0, 0.0, 1.0

		tex t0		// diffuse map, gloss in alpha
		tex t1		// specular spot

		// light 0
		mul r0.rgb, v0, t1
		+lrp r0.a, c0.a, t0.a, c7.a		// compute the gloss factor
		mul r0.rgb, r0, c2

		// specular atten * specular color * gloss map
		mul r1.rgb, c0, r0.a
		+mov r0.a, t0.a
		mul r0.rgb, r0, r1
	</pixelshader>

	<pixelshader name="ps1_pixellit_lights" target="ps_1_1">
		// c0 -> specular color
		// c1 -> specular weights
		// c2 -> light color

		def c7, 0.0, 0.0, 0.0, 1.0

		tex t0						// normal map (gloss map in alpha channel)
		texm3x3pad t1, t0_bx2
		texm3x3pad t2, t0_bx2
		texm3x3tex t3, t0_bx2		// look up specular values using light space normal

		// combine weighted average of 4 specular values
		dp3 r0.rgb, t3, c1
		+lrp r0.a, c0.a, t0.a, c7.a		// compute the gloss factor
		mad r0.rgb, t3.a, c1.a, r0
		+mul r1.a, v0.a, r0.a

		// r0.rgb = GLOSS*LIGHT_COLOR*COLOR_SPECULAR * (N dot H)^n
		mul r0.rgb, r0, c0
		mul r0.rgb, r0, c2
		mul r0.rgb, r0, r1.a
		+mov r0.a, t0.a
	</pixelshader>


	<pixelshader name="ps1_pixellit_envmap" target="ps_1_1">
		// c0 -> specular color (a=whether or not to use gloss map)
		// c2 -> light color*specular color

		def c7, 0.0, 0.0, 0.0, 1.0

		tex t0						// normal map (gloss map in alpha channel)
		texm3x3pad t1, t0_bx2
		texm3x3pad t2, t0_bx2
		texm3x3vspec t3, t0_bx2		// look up specular values using light space normal

		// r0.rgb = GLOSS*LIGHT_COLOR*COLOR_SPECULAR*envmap
		mul r0.rgb, c2, t3
		+lrp r0.a, c0.a, t0.a, c7.a		// compute the gloss factor
		mul r0.rgb, r0, r0.a
		+mov r0.a, t0.a
	</pixelshader>


	<pixelshader name="ps1_vertexlit" target="ps_1_1">
		def c7, 0.0, 0.0, 0.0, 1.0

		tex t0		// diffuse map, gloss in alpha
	
		// specular spot * specular color * gloss map
		lrp r0.a, c0.a, t0.a, c7.a		// compute the gloss factor
		mul r0.rgb,r0.a,v1
		+mov r0.a,t0.a
	</pixelshader>

	<pipeline id="1">
		<!-- fixme: get vertex specular working -->
		<state id="0">
			<pass transform="normals" lighting="specular">
				<vertexshader use="vs1_vertexlit"/>
				<pixelshader use="ps1_vertexlit"/>
			</pass>
		</state>
		<state id="1">
			<pass transform="normals" lighting="none">
				<vertexshader use="vs1_specularspot_3lights"/>
				<pixelshader use="ps1_specularspot_3lights"/>
			</pass>
		</state>

		<state id="2">
			<pass transform="normals" lighting="none">
				<vertexshader use="vs1_specularspot_2lights"/>
				<pixelshader use="ps1_specularspot_2lights"/>
			</pass>
		</state>

		<state id="3">
			<pass transform="normals" lighting="none">
				<vertexshader use="vs1_specularspot_1light"/>
				<pixelshader use="ps1_specularspot_1light"/>
			</pass>
		</state>

		<!-- ************** per pixel lighting states ***************** -->
		<state id="4">
			<pass transform="binormals" lighting="none">
				<vertexshader use="vs1_pixellit_lights"/>
				<pixelshader use="ps1_pixellit_lights"/>
			</pass>
		</state>

		<state id="5">
			<pass transform="binormals" lighting="none">
				<vertexshader use="vs1_pixellit_envmap"/>
				<pixelshader use="ps1_pixellit_envmap"/>
			</pass>
		</state>

		<state id="6">
			<pass transform="binormals" lighting="none">
				<vertexshader use="vs1_pixellit_lights"/>
				<pixelshader use="ps1_pixellit_lights"/>
			</pass>
			<pass transform="binormals" lighting="none">
				<vertexshader use="vs1_pixellit_envmap"/>
				<pixelshader use="ps1_pixellit_envmap"/>
			</pass>
		</state>

	</pipeline>
</shader>
