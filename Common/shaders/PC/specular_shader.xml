<?xml version="1.0" encoding="utf-8" ?>
<shader rendertype="specmap" skinned="yes" debuginfo="no">
	<vertexshader name="vs1_far" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"

		; project the position into screen space		
		POS_PROJECT(oPos)

		; decompress texcoords
		mul oT0, V_TEXCOORDS, c[C_NORMALTEX_DECOMPRESS].zzzw

		; output color (with lighting)
		mul oD0, R_DIFFUSE_LIGHTING, R_MATERIAL_COLOR

		; output fog value in oFog
		dp4 R_TEMP.z, R_WORLD_POS, c[C_WORLD_PROJ_M3]
		FOG(R_TEMP.z, R_WORLD_POS, R_TEMP1)
	</vertexshader>

	<vertexshader name="vs1_near_opaque" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"

		#define R_WORLD_NORMAL r11
		; transform normal to world space
		dp3 R_WORLD_NORMAL.x, R_NORMAL, c[C_OBJ_WORLD_M0]
		dp3 R_WORLD_NORMAL.y, R_NORMAL, c[C_OBJ_WORLD_M1]
		dp3 R_WORLD_NORMAL.z, R_NORMAL, c[C_OBJ_WORLD_M2]
		
		; calculate the reflected eye-to-vertex vector in world space
		add R_TEMP.xyz, R_WORLD_POS.xyz,-c[C_WORLD_VIEWPOS].xyz
		dp3 R_TEMP.w, R_TEMP.xyz, R_WORLD_NORMAL.xyz
		mad R_TEMP.xyz,-R_TEMP.w, R_WORLD_NORMAL.xyz, R_TEMP.xyz
		mad R_TEMP.xyz,-R_TEMP.w, R_WORLD_NORMAL.xyz, R_TEMP.xyz

		; calculate specular spot map projected coordinates
		dp3 R_TEMP1.x, R_TEMP.xyz, c[C_CUSTOM_MIN+0].xyz
		dp3 R_TEMP1.y, R_TEMP.xyz, c[C_CUSTOM_MIN+1].xyz
		dp3 R_TEMP1.w, R_TEMP.xyz,-c[C_LIGHT_DIRECTIONAL0_DIR].xyz
		; output biased coords (x+z, y+z, 0, z+z) => ((x/z + 1)/2, (y/z + 1)/2, 0, 1)
		add oT1.xyzw, R_TEMP1.xyww, R_TEMP1.wwww

		; calculate specular color = ((n dot -l) gte 0) ? c[C_SPECULAR_COLOR] : black
		dp3 R_TEMP.w, R_WORLD_NORMAL.xyz,-c[C_LIGHT_DIRECTIONAL0_DIR].xyz
		sge R_TEMP.w, R_TEMP.w, c[C_CONST0].x
		mul oD1.xyz, R_TEMP.w, c[C_CUSTOM_MIN+2].xyz

		; project the position into screen space		
		POS_PROJECT(oPos)

		; decompress texcoords
		mul oT0, V_TEXCOORDS, c[C_NORMALTEX_DECOMPRESS].zzzw

		; calculate near scene fade factor in R_TEMP.w
		NEARSCENEFADE(R_TEMP)
		FOG(R_TEMP.z, R_WORLD_POS, R_TEMP1)
		; output color with lighting and near scene fade
		mul oD0.xyz, R_DIFFUSE_LIGHTING.xyz, R_MATERIAL_COLOR.xyz
		; output fade factor * 0.25 + 0.5 to allow interpolation outside the range 0-1
		mad oD0.w, R_TEMP.w, c[C_CONST1].y, c[C_CONST1].z
	</vertexshader>

	<vertexshader name="vs1_near_opaque_shadow" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"
		#define R_WORLD_NORMAL r11

		; transform normal to world space
		dp3 R_WORLD_NORMAL.x, R_NORMAL, c[C_OBJ_WORLD_M0]
		dp3 R_WORLD_NORMAL.y, R_NORMAL, c[C_OBJ_WORLD_M1]
		dp3 R_WORLD_NORMAL.z, R_NORMAL, c[C_OBJ_WORLD_M2]

		; calculate the reflected eye-to-vertex vector in world space
		add R_TEMP.xyz, R_WORLD_POS.xyz,-c[C_WORLD_VIEWPOS].xyz
		dp3 R_TEMP.w, R_TEMP.xyz, R_WORLD_NORMAL.xyz
		mad R_TEMP.xyz,-R_TEMP.w, R_WORLD_NORMAL.xyz, R_TEMP.xyz
		mad R_TEMP.xyz,-R_TEMP.w, R_WORLD_NORMAL.xyz, R_TEMP.xyz

		; calculate specular spot map projected coordinates
		dp3 R_TEMP1.x, R_TEMP.xyz, c[C_CUSTOM_MIN+0].xyz
		dp3 R_TEMP1.y, R_TEMP.xyz, c[C_CUSTOM_MIN+1].xyz
		dp3 R_TEMP1.w, R_TEMP.xyz,-c[C_LIGHT_DIRECTIONAL0_DIR].xyz
		; output biased coords (x+z, y+z, 0, z+z) => ((x/z + 1)/2, (y/z + 1)/2, 0, 1)
		add oT1.xyzw, R_TEMP1.xyww, R_TEMP1.wwww

		; calculate specular factor = ((n dot -l) gte 0) ? 1 : 0
		dp3 R_TEMP.w, R_WORLD_NORMAL.xyz,-c[C_LIGHT_DIRECTIONAL0_DIR].xyz
		sge oD1.w, R_TEMP.w, c[C_CONST0].x

		; project the position into screen space		
		POS_PROJECT(oPos)

		; decompress texcoords
		mul oT0, V_TEXCOORDS, c[C_NORMALTEX_DECOMPRESS].zzzw

		; transform texture coordinates for shadow map
		dp4 oT2.x, R_WORLD_POS, c[C_SHADOWMAP_TRANSFORM_U]
		dp4 oT2.y, R_WORLD_POS, c[C_SHADOWMAP_TRANSFORM_V]
		dp4 oT2.w, R_WORLD_POS, c[C_SHADOWMAP_TRANSFORM_W]
		mov oT2.z, c[C_CONST0].x

		; calculate near scene fade factor in R_TEMP.w
		NEARSCENEFADE(R_TEMP)
		FOG(R_TEMP.z, R_WORLD_POS, R_TEMP1)
		; output lighting minus sun to oD0, sun lighting to oD1
		add R_TEMP.xyz, -R_DIFFUSE_DIRECTIONAL_LIGHTING_COLOR.xyz, R_DIFFUSE_LIGHTING.xyz
		mul oD0.xyz, R_MATERIAL_COLOR.xyz, R_TEMP.xyz
		mul oD1.xyz, R_MATERIAL_COLOR.xyz, R_DIFFUSE_DIRECTIONAL_LIGHTING_COLOR.xyz
		; output fade factor * 0.25 + 0.5 to allow interpolation outside the range 0-1
		mad oD0.w, R_TEMP.w, c[C_CONST1].y, c[C_CONST1].z
	</vertexshader>

	<vertexshader name="vs1_near_transparent" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"

		#define R_WORLD_NORMAL r11
		; transform normal to world space
		dp3 R_WORLD_NORMAL.x, R_NORMAL, c[C_OBJ_WORLD_M0]
		dp3 R_WORLD_NORMAL.y, R_NORMAL, c[C_OBJ_WORLD_M1]
		dp3 R_WORLD_NORMAL.z, R_NORMAL, c[C_OBJ_WORLD_M2]

		; calculate the reflected eye-to-vertex vector
		add R_TEMP.xyz, R_WORLD_POS.xyz,-c[C_WORLD_VIEWPOS].xyz
		dp3 R_TEMP.w, R_TEMP.xyz, R_WORLD_NORMAL.xyz
		mad R_TEMP.xyz,-R_TEMP.w, R_WORLD_NORMAL.xyz, R_TEMP.xyz
		mad R_TEMP.xyz,-R_TEMP.w, R_WORLD_NORMAL.xyz, R_TEMP.xyz

		; calculate specular spot map projected coordinates
		dp3 R_TEMP1.x, R_TEMP.xyz, c[C_CUSTOM_MIN+0].xyz
		dp3 R_TEMP1.y, R_TEMP.xyz, c[C_CUSTOM_MIN+1].xyz
		dp3 R_TEMP1.w, R_TEMP.xyz,-c[C_LIGHT_DIRECTIONAL0_DIR].xyz
		; output biased coords (x+z, y+z, 0, z+z) => ((x/z + 1)/2, (y/z + 1)/2, 0, 1)
		add oT1.xyzw, R_TEMP1.xyww, R_TEMP1.wwww

		; calculate specular color = ((n dot -l) gte 0) ? c[C_SPECULAR_COLOR] : black
		dp3 R_TEMP.w, R_WORLD_NORMAL.xyz,-c[C_LIGHT_DIRECTIONAL0_DIR].xyz
		sge R_TEMP.w, R_TEMP.w, c[C_CONST0].x
		mul oD1.xyz, R_TEMP.w, c[C_CUSTOM_MIN+2].xyz

		; project the position into screen space		
		POS_PROJECT(oPos)

		; decompress texcoords
		mul oT0, V_TEXCOORDS, c[C_NORMALTEX_DECOMPRESS].zzzw

		; calculate near scene fade factor in R_TEMP.w
		NEARSCENEFADE(R_TEMP)
		FOG(R_TEMP.z, R_WORLD_POS, R_TEMP1)
		; clamp to [0.0,1.0] and square it to fade transparent objects faster
		max R_TEMP.w, R_TEMP.w, c[C_CONST0].x
		min R_TEMP.w, R_TEMP.w, c[C_CONST0].z
		mul R_TEMP.w, R_TEMP.w, R_TEMP.w
		; output color with lighting and near scene fade
		mul oD0.xyz, R_DIFFUSE_LIGHTING.xyz, R_MATERIAL_COLOR.xyz
		mul oD0.w, R_MATERIAL_COLOR.w, R_TEMP.w
	</vertexshader>

	<!--vertexshader name="vs1_near_transparent_shadow" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"

		#define R_WORLD_NORMAL r11
		; transform normal to world space
		dp3 R_WORLD_NORMAL.x, R_NORMAL, c[C_OBJ_WORLD_M0]
		dp3 R_WORLD_NORMAL.y, R_NORMAL, c[C_OBJ_WORLD_M1]
		dp3 R_WORLD_NORMAL.z, R_NORMAL, c[C_OBJ_WORLD_M2]

		; calculate the reflected eye-to-vertex vector
		add R_TEMP.xyz, R_WORLD_POS.xyz,-c[C_WORLD_VIEWPOS].xyz
		dp3 R_TEMP.w, R_TEMP.xyz, R_WORLD_NORMAL.xyz
		mad R_TEMP.xyz,-R_TEMP.w, R_WORLD_NORMAL.xyz, R_TEMP.xyz
		mad R_TEMP.xyz,-R_TEMP.w, R_WORLD_NORMAL.xyz, R_TEMP.xyz

		; calculate specular spot map projected coordinates
		dp3 R_TEMP1.x, R_TEMP.xyz, c[C_CUSTOM_MIN+0].xyz
		dp3 R_TEMP1.y, R_TEMP.xyz, c[C_CUSTOM_MIN+1].xyz
		dp3 R_TEMP1.w, R_TEMP.xyz,-c[C_LIGHT_DIRECTIONAL_DIR].xyz
		; output biased coords (x+z, y+z, 0, z+z) => ((x/z + 1)/2, (y/z + 1)/2, 0, 1)
		add oT1.xyzw, R_TEMP1.xyww, R_TEMP1.wwww

		; calculate specular factor = ((n dot -l) gte 0) ? 1 : 0
		dp3 R_TEMP.w, R_WORLD_NORMAL.xyz,-c[C_LIGHT_DIRECTIONAL_DIR].xyz
		sge oD1.w, R_TEMP.w, c[C_CONST0].x

		; project the position into screen space		
		POS_PROJECT(oPos)

		; decompress texcoords
		mul oT0, V_TEXCOORDS, c[C_NORMALTEX_DECOMPRESS].zzzw

		; transform texture coordinates for shadow map
		dp4 oT2.x, R_WORLD_POS, c[C_SHADOWMAP_TRANSFORM_U]
		dp4 oT2.y, R_WORLD_POS, c[C_SHADOWMAP_TRANSFORM_V]
		dp4 oT2.w, R_WORLD_POS, c[C_SHADOWMAP_TRANSFORM_W]
		mov oT2.z, c[C_CONST0].x

		; calculate near scene fade factor in R_TEMP.w
		NEARSCENEFADE(R_TEMP)
		FOG(R_TEMP.z, R_WORLD_POS, R_TEMP1)
		; clamp to [0.0,1.0] and square it to fade transparent objects faster
		max R_TEMP.w, R_TEMP.w, c[C_CONST0].x
		min R_TEMP.w, R_TEMP.w, c[C_CONST0].z
		mul R_TEMP.w, R_TEMP.w, R_TEMP.w
		; output lighting minus sun to oD0, sun lighting to oD1
		mad oD0.xyz,-R_MATERIAL_COLOR.xyz, R_DIFFUSE_DIRECTIONAL_LIGHTING_COLOR.xyz, R_DIFFUSE_COLOR.xyz
		mul oD1.xyz, R_MATERIAL_COLOR.xyz, R_DIFFUSE_DIRECTIONAL_LIGHTING_COLOR.xyz
		mul oD0.w, R_DIFFUSE_COLOR.w, R_TEMP.w
	</vertexshader-->

	<pixelshader name="ps1_far" target="ps_1_1">
		tex t0		// diffuse map

		mul r0.rgb,t0,v0		// diffuse color = lighting * diffuse map
		+mov r0.a,v0.a
	</pixelshader>

	<pixelshader name="ps1_near_opaque" target="ps_1_1">
		tex t0		// diffuse map, gloss in alpha
		tex t1		// specular spot

		mul r0.rgb,t0,v0		// diffuse color = lighting * diffuse map
		// add specular spot * specular color * gloss map
		mul r1.rgb,t1,v1
		mad r0.rgb,r1,t0.a,r0
		+mov_x4 r0.a,v0_bias.a	// near scene alpha is d4 + 1/2
	</pixelshader>

	<pixelshader name="ps1_near_transparent" target="ps_1_1">
		tex t0		// diffuse map, gloss in alpha
		tex t1		// specular spot

		mul r0,t0,v0		// diffuse color = lighting * diffuse map
		mul r0.rgb, r0, r0.a
		// add specular spot * specular color * gloss map
		mad r0.rgb,t1,v1,r0
	</pixelshader>

	<pixelshader name="ps1_near_opaque_shadow" target="ps_1_1">
		// c0.rgb = specular color
		tex t0		// diffuse map, gloss in alpha
		tex t1		// specular spot
		tex t2		// shadow map
		// v0.rgb = lighting minus sun lighting
		// v0.a = near scene alpha d4 + 1/2
		// v1.rgb = sun lighting
		// v1.a = specular factor (0 on unlit side of object)

		// shadow corrected light = (diffuse lighting) + shadowmap*(sun contribution)
		mad_sat r0.rgb, t2.a, v1, v0

		mul r0.rgb,t0,r0		// diffuse color = lighting * diffuse map
		// add specular spot * specular color * gloss map * specular factor
		+mul r1.a,t0.a,v1.a
		mul r1.rgb,t1,c0
		+mul r1.a,r1.a,t2.a
		mad r0.rgb,r1,r1.a,r0
		+mov_x4 r0.a,v0_bias.a	// near scene alpha is d4 + 1/2
	</pixelshader>

	<!--pixelshader name="ps1_near_transparent_shadow" target="ps_1_1">
		// c0.rgb = specular color
		tex t0		// diffuse map, gloss in alpha
		tex t1		// specular spot
		tex t2		// shadow map
		// v0.rgb = lighting minus sun lighting
		// v0.a = near scene alpha d4 + 1/2
		// v1.rgb = sun lighting
		// v1.a = specular factor (0 on unlit side of object)

		// shadow corrected light = (diffuse lighting) + shadowmap*(sun contribution)
		mad_sat r0.rgb, t2.a, v1, v0

		mul r0.rgb,t0,r0		// diffuse color = lighting * diffuse map
		+mul r1.a, v1.a, t0.a
		// add specular spot * specular color * gloss map
		mul r1.rgb,t1,c0
		+mul r1.a, r1.a, t2.a
		mad r0.rgb,r1,r1.a,r0
		+mov r0.a,v0.a
	</pixelshader-->

	<pipeline id="1">
		<state id="0">
			<pass transform="normals" lighting="diffuse">
				<vertexshader use="vs1_far"/>
				<pixelshader use="ps1_far"/>
			</pass>
		</state>
		<state id="1">
			<pass transform="normals" lighting="diffuse">
				<vertexshader use="vs1_near_opaque"/>
				<pixelshader use="ps1_near_opaque"/>
			</pass>
		</state>
		<state id="2">
			<pass transform="normals" lighting="diffuse">
				<vertexshader use="vs1_near_transparent"/>
				<pixelshader use="ps1_near_transparent"/>
			</pass>
		</state>
		<state id="3">
			<pass transform="normals" lighting="diffuse">
				<vertexshader use="vs1_near_opaque_shadow"/>
				<pixelshader use="ps1_near_opaque_shadow"/>
			</pass>
		</state>
		<!--state id="5">
			<pass transform="normals" lighting="diffuse">
				<vertexshader use="vs1_near_transparent_shadow"/>
				<pixelshader use="ps1_near_transparent_shadow"/>
			</pass>
		</state-->
	</pipeline>
</shader>