<?xml version="1.0" encoding="utf-8" ?>
<shader rendertype="pervertexdiffuselighting" skinned="yes" debuginfo="no">

	<vertexshader name="vs1_nolighting" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"

		mov oD0, c[C_CONST0].zzzz

		; project the position into screen space
		POS_PROJECT(oPos)
	</vertexshader>

	<!-- *********************** Non-projected texture vertex shaders ************************* -->

	<vertexshader name="vs1_2dir" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"

		#define R_WORLD_NORMAL	r11

		OBJECT_TO_WORLD_NORMAL(R_WORLD_NORMAL, R_NORMAL)

		LIGHT_AMBIENT(R_TEMP, R_WORLD_NORMAL, c[C_LIGHT_AMBIENT_COLOR0], c[C_LIGHT_AMBIENT_COLOR1], R_TEMP1);
		add R_DIFFUSE_LIGHTING.xyz, R_TEMP.xyz, R_STATIC_DIFFUSE_LIGHTING.xyz

		; directional lights
		LIGHT_INTENSITY_DIRECTIONAL_DIFFUSE(R_DIFFUSE_LIGHTING.w, R_WORLD_NORMAL, c[C_LIGHT_DIRECTIONAL0_DIR])
		mad R_DIFFUSE_LIGHTING.xyz, R_DIFFUSE_LIGHTING.w, c[C_LIGHT_DIRECTIONAL0_COLOR].xyz, R_DIFFUSE_LIGHTING.xyz
		LIGHT_INTENSITY_DIRECTIONAL_DIFFUSE(R_DIFFUSE_LIGHTING.w, R_WORLD_NORMAL, c[C_LIGHT_DIRECTIONAL1_DIR])
		mad oD0.xyz, R_DIFFUSE_LIGHTING.w, c[C_LIGHT_DIRECTIONAL1_COLOR].xyz, R_DIFFUSE_LIGHTING.xyz
		mov oD0.w, c[C_CONST0].z

		; project the position into screen space
		POS_PROJECT(oPos)
	</vertexshader>

	<vertexshader name="vs1_2dir_2point" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"

		#define R_WORLD_NORMAL	r11

		OBJECT_TO_WORLD_NORMAL(R_WORLD_NORMAL, R_NORMAL)

		LIGHT_AMBIENT(R_TEMP, R_WORLD_NORMAL, c[C_LIGHT_AMBIENT_COLOR0], c[C_LIGHT_AMBIENT_COLOR1], R_TEMP1);
		add R_DIFFUSE_LIGHTING.xyz, R_TEMP.xyz, R_STATIC_DIFFUSE_LIGHTING.xyz

		; directional lights
		LIGHT_INTENSITY_DIRECTIONAL_DIFFUSE(R_DIFFUSE_LIGHTING.w, R_WORLD_NORMAL, c[C_LIGHT_DIRECTIONAL0_DIR])
		mad R_DIFFUSE_LIGHTING.xyz, R_DIFFUSE_LIGHTING.w, c[C_LIGHT_DIRECTIONAL0_COLOR].xyz, R_DIFFUSE_LIGHTING.xyz
		LIGHT_INTENSITY_DIRECTIONAL_DIFFUSE(R_DIFFUSE_LIGHTING.w, R_WORLD_NORMAL, c[C_LIGHT_DIRECTIONAL1_DIR])
		mad R_DIFFUSE_LIGHTING.xyz, R_DIFFUSE_LIGHTING.w, c[C_LIGHT_DIRECTIONAL1_COLOR].xyz, R_DIFFUSE_LIGHTING.xyz

		; point lights
		LIGHT_INTENSITY_POINT_DIFFUSE(R_DIFFUSE_LIGHTING.w, R_WORLD_NORMAL, R_WORLD_POS, c[C_LIGHT_POINT0_POS], c[C_LIGHT_POINT0_POS].w, R_TEMP1, R_TEMP2)
		mad R_DIFFUSE_LIGHTING.xyz, R_DIFFUSE_LIGHTING.w, c[C_LIGHT_POINT0_COLOR].xyz, R_DIFFUSE_LIGHTING.xyz
		LIGHT_INTENSITY_POINT_DIFFUSE(R_DIFFUSE_LIGHTING.w, R_WORLD_NORMAL, R_WORLD_POS, c[C_LIGHT_POINT1_POS], c[C_LIGHT_POINT1_POS].w, R_TEMP1, R_TEMP2)
		mad oD0.xyz, R_DIFFUSE_LIGHTING.w, c[C_LIGHT_POINT1_COLOR].xyz, R_DIFFUSE_LIGHTING.xyz
	
		; project the position into screen space
		POS_PROJECT(oPos)
	</vertexshader>

	<vertexshader name="vs1_2dir_4point" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"

		#define R_WORLD_NORMAL	r11

		OBJECT_TO_WORLD_NORMAL(R_WORLD_NORMAL, R_NORMAL)

		LIGHT_AMBIENT(R_TEMP, R_WORLD_NORMAL, c[C_LIGHT_AMBIENT_COLOR0], c[C_LIGHT_AMBIENT_COLOR1], R_TEMP1);
		add R_DIFFUSE_LIGHTING.xyz, R_TEMP.xyz, R_STATIC_DIFFUSE_LIGHTING.xyz

		; directional lights
		LIGHT_INTENSITY_DIRECTIONAL_DIFFUSE(R_DIFFUSE_LIGHTING.w, R_WORLD_NORMAL, c[C_LIGHT_DIRECTIONAL0_DIR])
		mad R_DIFFUSE_LIGHTING.xyz, R_DIFFUSE_LIGHTING.w, c[C_LIGHT_DIRECTIONAL0_COLOR].xyz, R_DIFFUSE_LIGHTING.xyz
		LIGHT_INTENSITY_DIRECTIONAL_DIFFUSE(R_DIFFUSE_LIGHTING.w, R_WORLD_NORMAL, c[C_LIGHT_DIRECTIONAL1_DIR])
		mad R_DIFFUSE_LIGHTING.xyz, R_DIFFUSE_LIGHTING.w, c[C_LIGHT_DIRECTIONAL1_COLOR].xyz, R_DIFFUSE_LIGHTING.xyz

		; point lights
		LIGHT_INTENSITY_POINT_DIFFUSE(R_DIFFUSE_LIGHTING.w, R_WORLD_NORMAL, R_WORLD_POS, c[C_LIGHT_POINT0_POS], c[C_LIGHT_POINT0_POS].w, R_TEMP1, R_TEMP2)
		mad R_DIFFUSE_LIGHTING.xyz, R_DIFFUSE_LIGHTING.w, c[C_LIGHT_POINT0_COLOR].xyz, R_DIFFUSE_LIGHTING.xyz
		LIGHT_INTENSITY_POINT_DIFFUSE(R_DIFFUSE_LIGHTING.w, R_WORLD_NORMAL, R_WORLD_POS, c[C_LIGHT_POINT1_POS], c[C_LIGHT_POINT1_POS].w, R_TEMP1, R_TEMP2)
		mad R_DIFFUSE_LIGHTING.xyz, R_DIFFUSE_LIGHTING.w, c[C_LIGHT_POINT1_COLOR].xyz, R_DIFFUSE_LIGHTING.xyz
		LIGHT_INTENSITY_POINT_DIFFUSE(R_DIFFUSE_LIGHTING.w, R_WORLD_NORMAL, R_WORLD_POS, c[C_LIGHT_POINT2_POS], c[C_LIGHT_POINT2_POS].w, R_TEMP1, R_TEMP2)
		mad R_DIFFUSE_LIGHTING.xyz, R_DIFFUSE_LIGHTING.w, c[C_LIGHT_POINT2_COLOR].xyz, R_DIFFUSE_LIGHTING.xyz
		LIGHT_INTENSITY_POINT_DIFFUSE(R_DIFFUSE_LIGHTING.w, R_WORLD_NORMAL, R_WORLD_POS, c[C_LIGHT_POINT3_POS], c[C_LIGHT_POINT3_POS].w, R_TEMP1, R_TEMP2)
		mad oD0.xyz, R_DIFFUSE_LIGHTING.w, c[C_LIGHT_POINT3_COLOR].xyz, R_DIFFUSE_LIGHTING.xyz

		; project the position into screen space
		POS_PROJECT(oPos)
	</vertexshader>


	<!-- *********************** Projected texture vertex shaders ***************************** -->

	<vertexshader name="vs1_2dir_2spot" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"

		#define R_WORLD_NORMAL	r11
		#define R_SHADOW_COLOR  r10

		OBJECT_TO_WORLD_NORMAL(R_WORLD_NORMAL, R_NORMAL)

		LIGHT_AMBIENT(R_TEMP, R_WORLD_NORMAL, c[C_LIGHT_AMBIENT_COLOR0], c[C_LIGHT_AMBIENT_COLOR1], R_TEMP1);
		add R_DIFFUSE_LIGHTING.xyz, R_TEMP.xyz, R_STATIC_DIFFUSE_LIGHTING.xyz

		; directional lights
		LIGHT_INTENSITY_DIRECTIONAL_DIFFUSE(R_DIFFUSE_LIGHTING.w, R_WORLD_NORMAL, c[C_LIGHT_DIRECTIONAL0_DIR])
		mad R_DIFFUSE_LIGHTING.xyz, R_DIFFUSE_LIGHTING.w, c[C_LIGHT_DIRECTIONAL0_COLOR].xyz, R_DIFFUSE_LIGHTING.xyz
		LIGHT_INTENSITY_DIRECTIONAL_DIFFUSE(R_DIFFUSE_LIGHTING.w, R_WORLD_NORMAL, c[C_LIGHT_DIRECTIONAL1_DIR])
		mad oD1.xyz, R_DIFFUSE_LIGHTING.w, c[C_LIGHT_DIRECTIONAL1_COLOR].xyz, R_DIFFUSE_LIGHTING.xyz
/*
		; point lights
		LIGHT_INTENSITY_POINT_DIFFUSE(R_DIFFUSE_LIGHTING.w, R_WORLD_NORMAL, R_WORLD_POS, c[C_LIGHT_POINT0_POS], c[C_LIGHT_POINT0_POS].w, R_TEMP1, R_TEMP2)
		mad R_DIFFUSE_LIGHTING.xyz, R_DIFFUSE_LIGHTING.w, c[C_LIGHT_POINT0_COLOR].xyz, R_DIFFUSE_LIGHTING.xyz
		LIGHT_INTENSITY_POINT_DIFFUSE(R_DIFFUSE_LIGHTING.w, R_WORLD_NORMAL, R_WORLD_POS, c[C_LIGHT_POINT1_POS], c[C_LIGHT_POINT1_POS].w, R_TEMP1, R_TEMP2)
		mad R_DIFFUSE_LIGHTING.xyz, R_DIFFUSE_LIGHTING.w, c[C_LIGHT_POINT1_COLOR].xyz, R_DIFFUSE_LIGHTING.xyz
		LIGHT_INTENSITY_POINT_DIFFUSE(R_DIFFUSE_LIGHTING.w, R_WORLD_NORMAL, R_WORLD_POS, c[C_LIGHT_POINT2_POS], c[C_LIGHT_POINT2_POS].w, R_TEMP1, R_TEMP2)
		mad R_DIFFUSE_LIGHTING.xyz, R_DIFFUSE_LIGHTING.w, c[C_LIGHT_POINT2_COLOR].xyz, R_DIFFUSE_LIGHTING.xyz
		LIGHT_INTENSITY_POINT_DIFFUSE(R_DIFFUSE_LIGHTING.w, R_WORLD_NORMAL, R_WORLD_POS, c[C_LIGHT_POINT3_POS], c[C_LIGHT_POINT3_POS].w, R_TEMP1, R_TEMP2)
		mad R_DIFFUSE_LIGHTING.xyz, R_DIFFUSE_LIGHTING.w, c[C_LIGHT_POINT3_COLOR].xyz, R_DIFFUSE_LIGHTING.xyz

		mad R_TEMP, R_TEMP.w, c[C_LIGHT_DIRECTIONAL0_COLOR].w, R_TEMP
		mad R_TEMP, R_TEMP.w, c[C_LIGHT_DIRECTIONAL0_COLOR].w, R_TEMP
		mad R_TEMP, R_TEMP.w, c[C_LIGHT_DIRECTIONAL0_COLOR].w, R_TEMP
		mad R_TEMP, R_TEMP.w, c[C_LIGHT_DIRECTIONAL0_COLOR].w, R_TEMP
		mad R_TEMP, R_TEMP.w, c[C_LIGHT_DIRECTIONAL0_COLOR].w, R_TEMP
		mad R_TEMP, R_TEMP.w, c[C_LIGHT_DIRECTIONAL0_COLOR].w, R_TEMP
		mad R_TEMP, R_TEMP.w, c[C_LIGHT_DIRECTIONAL0_COLOR].w, R_TEMP
*/


//		mov oD1.xyz, c[C_CONST0].xxx

		LIGHT_INTENSITY_SPOT_DIFFUSE(oD0.rgba, R_WORLD_NORMAL, R_WORLD_POS, c[C_LIGHT_SPOT0_POS], c[C_LIGHT_SPOT0_POS].w, c[C_LIGHT_SPOT0_DIR], c[C_LIGHT_SPOT0_PARAMS], c[C_LIGHT_SPOT0_DIR].w, R_TEMP1, R_TEMP2)
//		LIGHT_INTENSITY_SPOT_DIFFUSE(oD0.a, R_WORLD_NORMAL, R_WORLD_POS, c[C_LIGHT_SPOT0_POS], c[C_LIGHT_SPOT0_POS].w, c[C_LIGHT_SPOT0_DIR], c[C_LIGHT_SPOT0_PARAMS], R_TEMP1, R_TEMP2)


		; project world position into light space
		dp4 oT0.x, R_WORLD_POS, c[C_LIGHT_PROJ_M0]
		dp4 oT0.y, R_WORLD_POS, c[C_LIGHT_PROJ_M1]
		mov oT0.z, c[C_CONST0].x
		dp4 oT0.w, R_WORLD_POS, c[C_LIGHT_PROJ_M2]

		; project world position into light space
		dp4 oT1.x, R_WORLD_POS, c[C_LIGHT_PROJ_M0]
		dp4 oT1.y, R_WORLD_POS, c[C_LIGHT_PROJ_M1]
		mov oT1.z, c[C_CONST0].x
		dp4 oT1.w, R_WORLD_POS, c[C_LIGHT_PROJ_M2]

		; transform shadow map coordinates
		dp4 oT1.x, R_WORLD_POS, c[C_SHADOWMAP_TRANSFORM_U]
		dp4 oT1.y, R_WORLD_POS, c[C_SHADOWMAP_TRANSFORM_V]
		dp4 oT1.w, R_WORLD_POS, c[C_SHADOWMAP_TRANSFORM_W]
		mov oT1.z, c[C_CONST0].x

		; project the position into screen space
		POS_PROJECT(oPos)

	</vertexshader>

	<vertexshader name="vs1_2dir_2point_2spot" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"

		#define R_WORLD_NORMAL	r11

		OBJECT_TO_WORLD_NORMAL(R_WORLD_NORMAL, R_NORMAL)

		LIGHT_AMBIENT(R_TEMP, R_WORLD_NORMAL, c[C_LIGHT_AMBIENT_COLOR0], c[C_LIGHT_AMBIENT_COLOR1], R_TEMP1);
		add R_DIFFUSE_LIGHTING.xyz, R_TEMP.xyz, R_STATIC_DIFFUSE_LIGHTING.xyz

		mov R_DIFFUSE_LIGHTING.xyz, c[C_CONST0].xxx

		; directional lights
		LIGHT_INTENSITY_DIRECTIONAL_DIFFUSE(R_DIFFUSE_LIGHTING.w, R_WORLD_NORMAL, c[C_LIGHT_DIRECTIONAL0_DIR])
		mad R_DIFFUSE_LIGHTING.xyz, R_DIFFUSE_LIGHTING.w, c[C_LIGHT_DIRECTIONAL0_COLOR].xyz, R_DIFFUSE_LIGHTING.xyz
		LIGHT_INTENSITY_DIRECTIONAL_DIFFUSE(R_DIFFUSE_LIGHTING.w, R_WORLD_NORMAL, c[C_LIGHT_DIRECTIONAL1_DIR])
		mad R_DIFFUSE_LIGHTING.xyz, R_DIFFUSE_LIGHTING.w, c[C_LIGHT_DIRECTIONAL1_COLOR].xyz, R_DIFFUSE_LIGHTING.xyz

		; point lights
		LIGHT_INTENSITY_POINT_DIFFUSE(R_DIFFUSE_LIGHTING.w, R_WORLD_NORMAL, R_WORLD_POS, c[C_LIGHT_POINT0_POS], c[C_LIGHT_POINT0_POS].w, R_TEMP1, R_TEMP2)
		mad R_DIFFUSE_LIGHTING.xyz, R_DIFFUSE_LIGHTING.w, c[C_LIGHT_POINT0_COLOR].xyz, R_DIFFUSE_LIGHTING.xyz
		LIGHT_INTENSITY_POINT_DIFFUSE(R_DIFFUSE_LIGHTING.w, R_WORLD_NORMAL, R_WORLD_POS, c[C_LIGHT_POINT1_POS], c[C_LIGHT_POINT1_POS].w, R_TEMP1, R_TEMP2)
		mad oD1.xyz, R_DIFFUSE_LIGHTING.w, c[C_LIGHT_POINT1_COLOR].xyz, R_DIFFUSE_LIGHTING.xyz
/*
		; spot lights
		LIGHT_INTENSITY_SPOT_DIFFUSE(oD0.rgb, oT0, R_WORLD_NORMAL, R_WORLD_POS, c[C_LIGHT_SPOT0_POS], c[C_LIGHT_SPOT0_POS].w, c[C_LIGHT_SPOT0_M0], c[C_LIGHT_SPOT0_M1], c[C_LIGHT_SPOT0_M2], R_TEMP1, R_TEMP2)
		LIGHT_INTENSITY_SPOT_DIFFUSE(oD0.a, oT1, R_WORLD_NORMAL, R_WORLD_POS, c[C_LIGHT_SPOT1_POS], c[C_LIGHT_SPOT1_POS].w, c[C_LIGHT_SPOT1_M0], c[C_LIGHT_SPOT1_M1], c[C_LIGHT_SPOT1_M2], R_TEMP1, R_TEMP2)
*/
		; project the position into screen space
		POS_PROJECT(oPos)
	</vertexshader>

	<vertexshader name="vs1_2dir_4point_2spot" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"

		#define R_WORLD_NORMAL	r11

		OBJECT_TO_WORLD_NORMAL(R_WORLD_NORMAL, R_NORMAL)

		LIGHT_AMBIENT(R_TEMP, R_WORLD_NORMAL, c[C_LIGHT_AMBIENT_COLOR0], c[C_LIGHT_AMBIENT_COLOR1], R_TEMP1);
		add R_DIFFUSE_LIGHTING.xyz, R_TEMP.xyz, R_STATIC_DIFFUSE_LIGHTING.xyz


		; directional lights
		LIGHT_INTENSITY_DIRECTIONAL_DIFFUSE(R_DIFFUSE_LIGHTING.w, R_WORLD_NORMAL, c[C_LIGHT_DIRECTIONAL0_DIR])
		mad R_DIFFUSE_LIGHTING.xyz, R_DIFFUSE_LIGHTING.w, c[C_LIGHT_DIRECTIONAL0_COLOR].xyz, R_DIFFUSE_LIGHTING.xyz
		LIGHT_INTENSITY_DIRECTIONAL_DIFFUSE(R_DIFFUSE_LIGHTING.w, R_WORLD_NORMAL, c[C_LIGHT_DIRECTIONAL1_DIR])
		mad R_DIFFUSE_LIGHTING.xyz, R_DIFFUSE_LIGHTING.w, c[C_LIGHT_DIRECTIONAL1_COLOR].xyz, R_DIFFUSE_LIGHTING.xyz

		; point lights
		LIGHT_INTENSITY_POINT_DIFFUSE(R_DIFFUSE_LIGHTING.w, R_WORLD_NORMAL, R_WORLD_POS, c[C_LIGHT_POINT0_POS], c[C_LIGHT_POINT0_POS].w, R_TEMP1, R_TEMP2)
		mad R_DIFFUSE_LIGHTING.xyz, R_DIFFUSE_LIGHTING.w, c[C_LIGHT_POINT0_COLOR].xyz, R_DIFFUSE_LIGHTING.xyz
		LIGHT_INTENSITY_POINT_DIFFUSE(R_DIFFUSE_LIGHTING.w, R_WORLD_NORMAL, R_WORLD_POS, c[C_LIGHT_POINT1_POS], c[C_LIGHT_POINT1_POS].w, R_TEMP1, R_TEMP2)
		mad R_DIFFUSE_LIGHTING.xyz, R_DIFFUSE_LIGHTING.w, c[C_LIGHT_POINT1_COLOR].xyz, R_DIFFUSE_LIGHTING.xyz
		LIGHT_INTENSITY_POINT_DIFFUSE(R_DIFFUSE_LIGHTING.w, R_WORLD_NORMAL, R_WORLD_POS, c[C_LIGHT_POINT2_POS], c[C_LIGHT_POINT2_POS].w, R_TEMP1, R_TEMP2)
		mad R_DIFFUSE_LIGHTING.xyz, R_DIFFUSE_LIGHTING.w, c[C_LIGHT_POINT2_COLOR].xyz, R_DIFFUSE_LIGHTING.xyz
		LIGHT_INTENSITY_POINT_DIFFUSE(R_DIFFUSE_LIGHTING.w, R_WORLD_NORMAL, R_WORLD_POS, c[C_LIGHT_POINT3_POS], c[C_LIGHT_POINT3_POS].w, R_TEMP1, R_TEMP2)
		mad R_DIFFUSE_LIGHTING.xyz, R_DIFFUSE_LIGHTING.w, c[C_LIGHT_POINT3_COLOR].xyz, R_DIFFUSE_LIGHTING.xyz

/*
		; spot lights
		LIGHT_INTENSITY_SPOT_DIFFUSE(oD0.rgb, oT0, R_WORLD_NORMAL, R_WORLD_POS, c[C_LIGHT_SPOT0_POS], c[C_LIGHT_SPOT0_POS].w, c[C_LIGHT_SPOT0_M0], c[C_LIGHT_SPOT0_M1], c[C_LIGHT_SPOT0_M2], R_TEMP1, R_TEMP2)
		LIGHT_INTENSITY_SPOT_DIFFUSE(oD0.a, oT1, R_WORLD_NORMAL, R_WORLD_POS, c[C_LIGHT_SPOT1_POS], c[C_LIGHT_SPOT1_POS].w, c[C_LIGHT_SPOT1_M0], c[C_LIGHT_SPOT1_M1], c[C_LIGHT_SPOT1_M2], R_TEMP1, R_TEMP2)
*/
		; project the position into screen space
		POS_PROJECT(oPos)
	</vertexshader>


	<vertexshader name="vs1_2dirproj_shadow" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"

		#define R_WORLD_NORMAL	r11

		OBJECT_TO_WORLD_NORMAL(R_WORLD_NORMAL, R_NORMAL)

		LIGHT_AMBIENT(R_TEMP, R_WORLD_NORMAL, c[C_LIGHT_AMBIENT_COLOR0], c[C_LIGHT_AMBIENT_COLOR1], R_TEMP1);
		add R_DIFFUSE_LIGHTING.xyz, R_TEMP.xyz, R_STATIC_DIFFUSE_LIGHTING.xyz

		; directional lights
		LIGHT_INTENSITY_DIRECTIONAL_DIFFUSE(R_DIFFUSE_LIGHTING.w, R_WORLD_NORMAL, c[C_LIGHT_DIRECTIONAL0_DIR])
		mad R_DIFFUSE_LIGHTING.xyz, R_DIFFUSE_LIGHTING.w, c[C_LIGHT_DIRECTIONAL0_COLOR].xyz, R_DIFFUSE_LIGHTING.xyz
		LIGHT_INTENSITY_DIRECTIONAL_DIFFUSE(R_DIFFUSE_LIGHTING.w, R_WORLD_NORMAL, c[C_LIGHT_DIRECTIONAL1_DIR])
		mad R_DIFFUSE_LIGHTING.xyz, R_DIFFUSE_LIGHTING.w, c[C_LIGHT_DIRECTIONAL1_COLOR].xyz, R_DIFFUSE_LIGHTING.xyz

		; point lights
		LIGHT_INTENSITY_POINT_DIFFUSE(R_DIFFUSE_LIGHTING.w, R_WORLD_NORMAL, R_WORLD_POS, c[C_LIGHT_POINT0_POS], c[C_LIGHT_POINT0_POS].w, R_TEMP1, R_TEMP2)
		mad R_DIFFUSE_LIGHTING.xyz, R_DIFFUSE_LIGHTING.w, c[C_LIGHT_POINT0_COLOR].xyz, R_DIFFUSE_LIGHTING.xyz
		LIGHT_INTENSITY_POINT_DIFFUSE(R_DIFFUSE_LIGHTING.w, R_WORLD_NORMAL, R_WORLD_POS, c[C_LIGHT_POINT1_POS], c[C_LIGHT_POINT1_POS].w, R_TEMP1, R_TEMP2)
		mad R_DIFFUSE_LIGHTING.xyz, R_DIFFUSE_LIGHTING.w, c[C_LIGHT_POINT1_COLOR].xyz, R_DIFFUSE_LIGHTING.xyz
		LIGHT_INTENSITY_POINT_DIFFUSE(R_DIFFUSE_LIGHTING.w, R_WORLD_NORMAL, R_WORLD_POS, c[C_LIGHT_POINT2_POS], c[C_LIGHT_POINT2_POS].w, R_TEMP1, R_TEMP2)
		mad R_DIFFUSE_LIGHTING.xyz, R_DIFFUSE_LIGHTING.w, c[C_LIGHT_POINT2_COLOR].xyz, R_DIFFUSE_LIGHTING.xyz
		LIGHT_INTENSITY_POINT_DIFFUSE(R_DIFFUSE_LIGHTING.w, R_WORLD_NORMAL, R_WORLD_POS, c[C_LIGHT_POINT3_POS], c[C_LIGHT_POINT3_POS].w, R_TEMP1, R_TEMP2)
		mad R_DIFFUSE_LIGHTING.xyz, R_DIFFUSE_LIGHTING.w, c[C_LIGHT_POINT3_COLOR].xyz, R_DIFFUSE_LIGHTING.xyz

		; project the position into screen space
		POS_PROJECT(oPos)

		; transform shadow map coordinates
		dp4 oT2.x, R_WORLD_POS, c[C_SHADOWMAP_TRANSFORM_U]
		dp4 oT2.y, R_WORLD_POS, c[C_SHADOWMAP_TRANSFORM_V]
		dp4 oT2.w, R_WORLD_POS, c[C_SHADOWMAP_TRANSFORM_W]
		mov oT2.z, c[C_CONST0].x

	</vertexshader>

	<vertexshader name="vs1_near_2pointproj_shadow" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"

		#define R_WORLD_NORMAL	r11

		OBJECT_TO_WORLD_NORMAL(R_WORLD_NORMAL, R_NORMAL)

		LIGHT_AMBIENT(R_TEMP, R_WORLD_NORMAL, c[C_LIGHT_AMBIENT_COLOR0], c[C_LIGHT_AMBIENT_COLOR1], R_TEMP1);
		add R_DIFFUSE_LIGHTING.xyz, R_TEMP.xyz, R_STATIC_DIFFUSE_LIGHTING.xyz

		; directional lights
		LIGHT_INTENSITY_DIRECTIONAL_DIFFUSE(R_DIFFUSE_LIGHTING.w, R_WORLD_NORMAL, c[C_LIGHT_DIRECTIONAL0_DIR])
		mad R_DIFFUSE_LIGHTING.xyz, R_DIFFUSE_LIGHTING.w, c[C_LIGHT_DIRECTIONAL0_COLOR].xyz, R_DIFFUSE_LIGHTING.xyz
		LIGHT_INTENSITY_DIRECTIONAL_DIFFUSE(R_DIFFUSE_LIGHTING.w, R_WORLD_NORMAL, c[C_LIGHT_DIRECTIONAL1_DIR])
		mad R_DIFFUSE_LIGHTING.xyz, R_DIFFUSE_LIGHTING.w, c[C_LIGHT_DIRECTIONAL1_COLOR].xyz, R_DIFFUSE_LIGHTING.xyz

		; compute lighting with texture projection for point light 0 (R_TEMP1 contains light direction)
		LIGHT_INTENSITY_POINT_DIFFUSE(R_DIFFUSE_LIGHTING.w, R_WORLD_NORMAL, R_WORLD_POS, c[C_LIGHT_POINT0_POS], c[C_LIGHT_POINT0_POS].w, R_TEMP1, R_TEMP2)
		mov oD0.xyz, R_DIFFUSE_LIGHTING.w
		mov oT0, R_TEMP1, c[C_CONST0].zzzx, c[C_CONST0].xxxz

		; compute lighting with texture projection for point light 1 (R_TEMP1 contains light direction)
		LIGHT_INTENSITY_POINT_DIFFUSE(R_DIFFUSE_LIGHTING.w, R_WORLD_NORMAL, R_WORLD_POS, c[C_LIGHT_POINT1_POS], c[C_LIGHT_POINT1_POS].w, R_TEMP1, R_TEMP2)
		mov oD0.w, R_DIFFUSE_LIGHTING.w
		mov oT1, R_TEMP1, c[C_CONST0].zzzx, c[C_CONST0].xxxz

		; point lights
		LIGHT_INTENSITY_POINT_DIFFUSE(R_DIFFUSE_LIGHTING.w, R_WORLD_NORMAL, R_WORLD_POS, c[C_LIGHT_POINT2_POS], c[C_LIGHT_POINT2_POS].w, R_TEMP1, R_TEMP2)
		mad R_DIFFUSE_LIGHTING.xyz, R_DIFFUSE_LIGHTING.w, c[C_LIGHT_POINT2_COLOR].xyz, R_DIFFUSE_LIGHTING.xyz
		LIGHT_INTENSITY_POINT_DIFFUSE(R_DIFFUSE_LIGHTING.w, R_WORLD_NORMAL, R_WORLD_POS, c[C_LIGHT_POINT3_POS], c[C_LIGHT_POINT3_POS].w, R_TEMP1, R_TEMP2)
		mad R_DIFFUSE_LIGHTING.xyz, R_DIFFUSE_LIGHTING.w, c[C_LIGHT_POINT3_COLOR].xyz, R_DIFFUSE_LIGHTING.xyz

		; project the position into screen space
		POS_PROJECT(oPos)

		; transform shadow map coordinates
		dp4 oT2.x, R_WORLD_POS, c[C_SHADOWMAP_TRANSFORM_U]
		dp4 oT2.y, R_WORLD_POS, c[C_SHADOWMAP_TRANSFORM_V]
		dp4 oT2.w, R_WORLD_POS, c[C_SHADOWMAP_TRANSFORM_W]
		mov oT2.z, c[C_CONST0].x

	</vertexshader>

	<vertexshader name="vs1_near_2spot_shadow" target="vs_1_1">
		#include "pcRedVertexShaderMacros.h"

		#define R_WORLD_NORMAL	r11

		OBJECT_TO_WORLD_NORMAL(R_WORLD_NORMAL, R_NORMAL)

		LIGHT_AMBIENT(R_TEMP, R_WORLD_NORMAL, c[C_LIGHT_AMBIENT_COLOR0], c[C_LIGHT_AMBIENT_COLOR1], R_TEMP1);
		add R_DIFFUSE_LIGHTING.xyz, R_TEMP.xyz, R_STATIC_DIFFUSE_LIGHTING.xyz

		; directional lights
		LIGHT_INTENSITY_DIRECTIONAL_DIFFUSE(R_DIFFUSE_LIGHTING.w, R_WORLD_NORMAL, c[C_LIGHT_DIRECTIONAL0_DIR])
		mad R_DIFFUSE_LIGHTING.xyz, R_DIFFUSE_LIGHTING.w, c[C_LIGHT_DIRECTIONAL0_COLOR].xyz, R_DIFFUSE_LIGHTING.xyz
		LIGHT_INTENSITY_DIRECTIONAL_DIFFUSE(R_DIFFUSE_LIGHTING.w, R_WORLD_NORMAL, c[C_LIGHT_DIRECTIONAL1_DIR])
		mad R_DIFFUSE_LIGHTING.xyz, R_DIFFUSE_LIGHTING.w, c[C_LIGHT_DIRECTIONAL1_COLOR].xyz, R_DIFFUSE_LIGHTING.xyz

		; point lights
		LIGHT_INTENSITY_POINT_DIFFUSE(R_DIFFUSE_LIGHTING.w, R_WORLD_NORMAL, R_WORLD_POS, c[C_LIGHT_POINT0_POS], c[C_LIGHT_POINT0_POS].w, R_TEMP1, R_TEMP2)
		mad R_DIFFUSE_LIGHTING.xyz, R_DIFFUSE_LIGHTING.w, c[C_LIGHT_POINT0_COLOR].xyz, R_DIFFUSE_LIGHTING.xyz
		LIGHT_INTENSITY_POINT_DIFFUSE(R_DIFFUSE_LIGHTING.w, R_WORLD_NORMAL, R_WORLD_POS, c[C_LIGHT_POINT1_POS], c[C_LIGHT_POINT1_POS].w, R_TEMP1, R_TEMP2)
		mad R_DIFFUSE_LIGHTING.xyz, R_DIFFUSE_LIGHTING.w, c[C_LIGHT_POINT1_COLOR].xyz, R_DIFFUSE_LIGHTING.xyz
		LIGHT_INTENSITY_POINT_DIFFUSE(R_DIFFUSE_LIGHTING.w, R_WORLD_NORMAL, R_WORLD_POS, c[C_LIGHT_POINT2_POS], c[C_LIGHT_POINT2_POS].w, R_TEMP1, R_TEMP2)
		mad R_DIFFUSE_LIGHTING.xyz, R_DIFFUSE_LIGHTING.w, c[C_LIGHT_POINT2_COLOR].xyz, R_DIFFUSE_LIGHTING.xyz
		LIGHT_INTENSITY_POINT_DIFFUSE(R_DIFFUSE_LIGHTING.w, R_WORLD_NORMAL, R_WORLD_POS, c[C_LIGHT_POINT3_POS], c[C_LIGHT_POINT3_POS].w, R_TEMP1, R_TEMP2)
		mad R_DIFFUSE_LIGHTING.xyz, R_DIFFUSE_LIGHTING.w, c[C_LIGHT_POINT3_COLOR].xyz, R_DIFFUSE_LIGHTING.xyz
/*
		; spot lights
		LIGHT_INTENSITY_SPOT_DIFFUSE(R_DIFFUSE_LIGHTING.w, oT0, R_WORLD_NORMAL, R_WORLD_POS, c[C_LIGHT_SPOT0_POS], c[C_LIGHT_SPOT0_POS].w, c[C_LIGHT_SPOT0_M0], c[C_LIGHT_SPOT0_M1], c[C_LIGHT_SPOT0_M2], R_TEMP1, R_TEMP2)
		mad R_DIFFUSE_LIGHTING.xyz, R_DIFFUSE_LIGHTING.w, c[C_LIGHT_SPOT0_COLOR].xyz, R_DIFFUSE_LIGHTING.xyz
		LIGHT_INTENSITY_SPOT_DIFFUSE(R_DIFFUSE_LIGHTING.w, oT1, R_WORLD_NORMAL, R_WORLD_POS, c[C_LIGHT_SPOT1_POS], c[C_LIGHT_SPOT1_POS].w, c[C_LIGHT_SPOT1_M0], c[C_LIGHT_SPOT1_M1], c[C_LIGHT_SPOT1_M2], R_TEMP1, R_TEMP2)
		mad R_DIFFUSE_LIGHTING.xyz, R_DIFFUSE_LIGHTING.w, c[C_LIGHT_SPOT1_COLOR].xyz, R_DIFFUSE_LIGHTING.xyz

*/
		; project the position into screen space
		POS_PROJECT(oPos)

		; transform shadow map coordinates
		dp4 oT2.x, R_WORLD_POS, c[C_SHADOWMAP_TRANSFORM_U]
		dp4 oT2.y, R_WORLD_POS, c[C_SHADOWMAP_TRANSFORM_V]
		dp4 oT2.w, R_WORLD_POS, c[C_SHADOWMAP_TRANSFORM_W]
		mov oT2.z, c[C_CONST0].x

	</vertexshader>

	<pixelshader name="ps1_simple" target="ps_1_1">
		// v0 => diffuse lighting
		mov r0, v0
	</pixelshader>

	<pixelshader name="ps1_simple_shadow" target="ps_1_1">
		// c0 => shadow light 0 color
		// c1 => shadow light 1 color
		// v0 => rgb light0atten, a light1atten
		// v1 => diffuse lighting

		tex t0	// shadow tex (rgb light 0, a light 1)

		//final color = v1 + c0*v0.rgb*t0.rgb + c1*v0.a*t0.a
		mul r0.rgb, c0, v0
		+mul r0.a, v0.a,t0.a
		mad_sat r0.rgb, r0, t0, v1
		mad_sat r0.rgb, r0.a, c1, r0
	</pixelshader>

	<pixelshader name="ps1_2projtex" target="ps_1_1">
		// this shader handles the case where the 2 projected lights are different from the shadowed lights
		// v0 => rgb light0atten, a light1atten
		// v1 => total light without projected lights
		// c0 => proj light 0 color
		// c1 => proj light 1 color

		tex t0	// light tex 0
		tex t1	// light tex 1

		//final color = v1 + c0*v0.rgb*t0.rgb + c1*v0.a*t1.rgb
		mul r0.rgb, c0, v0
		mul r0.a, c1, v0.a
		mad_sat r0.rgb, r0, t0, v1
		mad_sat r0.rgb, r0.a, c1, r0
	</pixelshader>

	<pixelshader name="ps1_projtex_shadow" target="ps_1_1">
		// this shader handles a projected light texture and a shadow
		// v0 => rgb light0atten, a light1atten
		// v1 => total light - projected lights
		// c0 => light 0 color
		// c1 => shadow light 0 color
		// c2 => shadow light 1 color

		tex t0	// light tex 0
		tex t1	// shadow tex (rgb light 0, a light 1)

		//final color = t0.rgb*(v1 + c0*v0.rgb + c1*v0.a*t1.a)
/*
		mul r0.rgb, c0, v0
//		+mul r0.a, t1.a,t1.b
		+mov r0.a, t1.a
		mul r0.rgb, r0, r0.a
		mad r0.rgb, r0, t0, v1

		mul r1.rgb, c1, v0.a
		mad r0.rgb, r1, t1.a, r0
*/


		// modulate
		mul r0.rgb, c0, v0
		mul r0.rgb, r0, t1.a
		mad r0.rgb, r0, t0, v1
		mul r0.a, v0.a, 1-t1.a
		mul r0.rgb, r0, 1-r0.a



	</pixelshader>

	<pixelshader name="ps1_2projtex_2shadow_different" target="ps_1_1">
		// this shader handles the case where the 2 projected lights are different from the shadowed lights
		// v0 => rgb light0atten, a light1atten
		// v1 => total light with projected and shadowed lights
		// c0 => proj light 0 color
		// c1 => proj light 1 color
		// c2 => shadow light 0 color
		// c3 => shadow light 1 color
		// t3 => rgb shadowlight0atten, a shadowlight1atten

		tex t0	// light tex 0
		tex t1	// light tex 1
		tex t2	// shadow tex (rgb light 0, a light 1)
		texcoord t3 // shadow light attenuations

		//final color = v1 + c0*v0.rgb*t0.rgb + c1*v0.a*t1.rgb + c2*t3.rgb*t2.rgb + c3*t3.a*t2.a
		mul r0.rgb, c0, v0
		+mul r0.a, v0.a,t0.a
		mad_sat r0.rgb, r0, t0, v1
		mad_sat r0.rgb, r0.a, c1, r0

		mul r1.rgb, c2, t3
		+mul r1.a, t2.a,t3.a
		mad_sat r0.rgb, r1, t2, r0
		mad_sat r0.rgb, r1.a, c3, r0
	</pixelshader>

	<pixelshader name="ps1_2projtex_2shadow_same" target="ps_1_1">
		// this shader handles the case where the 2 projected lights are the shadowed lights
		// v0 => rgb light0atten, a light1atten
		// v1 => total light - two projected lights
		// c0 => light 0 color
		// c1 => light 1 color

		tex t0	// light tex 0
		tex t1	// light tex 1
		tex t2	// shadow tex (rgb light 0, a light 1)

		//final color = v1 + c0*v0.rgb*t0.rgb*t2.rgb + c1*v0.a*t1.rgb*t2.a
		mul r0.rgb, c0, v0
		+mul r0.a, v0.a,t2.a
		mul r0.rgb, r0, t2
		mad r0.rgb, r0, t0, v1

		mul r1.rgb, c1, t1
		mad r0.rgb, r1, r0.a, r0
	</pixelshader>

	<pipeline id="1">
		<state id="0">
			<pass transform="normals" lighting="none">
				<vertexshader use="vs1_nolighting"/>
				<pixelshader use="ps1_simple"/>
			</pass>
		</state>
		<state id="1">
			<pass transform="normals" lighting="none">
				<vertexshader use="vs1_2dir"/>
				<pixelshader use="ps1_simple"/>
			</pass>
		</state>

		<state id="2">
			<pass transform="normals" lighting="none">
				<vertexshader use="vs1_2dir_2point"/>
				<pixelshader use="ps1_simple"/>
			</pass>
		</state>

		<state id="3">
			<pass transform="normals" lighting="none">
				<vertexshader use="vs1_2dir_4point"/>
				<pixelshader use="ps1_simple"/>
			</pass>
		</state>



<!-- ******* -->

		<state id="4">
			<pass transform="normals" lighting="none">
				<vertexshader use="vs1_2dir_2spot"/>
				<pixelshader use="ps1_projtex_shadow"/>
			</pass>
		</state>

		<state id="5">
			<pass transform="normals" lighting="none">
				<vertexshader use="vs1_2dir_2point_2spot"/>
				<pixelshader use="ps1_simple"/>
			</pass>
		</state>

		<state id="6">
			<pass transform="normals" lighting="none">
				<vertexshader use="vs1_2dir_4point_2spot"/>
				<pixelshader use="ps1_simple"/>
			</pass>
		</state>

	</pipeline>
</shader>
